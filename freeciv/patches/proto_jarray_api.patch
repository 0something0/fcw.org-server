From 9239e5be1f1086b4822a4612f494a0d69abe3da3 Mon Sep 17 00:00:00 2001
From: Sveinung Kvilhaugsvik <sveinung84@users.sourceforge.net>
Date: Sun, 19 Apr 2015 16:58:29 +0200
Subject: [PATCH 1/3] JSON protocol: take packet location as a parameter in the
 dio_* functions.

---
 common/dataio.h            |  35 ++++++++--
 common/dataio_json.c       | 115 +++++++++++++++++++++----------
 common/dataio_json.h       | 166 ++++++++++++++++++++++++++++++---------------
 common/generate_packets.py |  68 +++++++++----------
 common/packets_json.h      |   2 +-
 5 files changed, 257 insertions(+), 129 deletions(-)

diff --git a/common/dataio.h b/common/dataio.h
index eec366c..e8fd500 100644
--- a/common/dataio.h
+++ b/common/dataio.h
@@ -47,6 +47,33 @@ enum data_type {
   DIOT_LAST
 };
 
+/* What a location inside a packet is. */
+enum plocation_kind {
+  /* A field. Addressed by its name. */
+  PADR_FIELD,
+  /* An array element. Addressed by its number. */
+  PADR_ELEMENT
+};
+
+/* Address of a location inside a packet. */
+struct plocation {
+  /* The location kind. */
+  enum plocation_kind kind;
+
+  union {
+    /* Used if this is an array element */
+    int number;
+
+    /* Used if this is a field. */
+    char *name;
+  };
+
+  /* If the full address is to a location inside this this field should
+   * point to it. If this location is the final location this field should
+   * be NULL. */
+  struct plocation *sub_location;
+};
+
 #ifdef FREECIV_JSON_CONNECTION
 #include "dataio_json.h"
 #endif
@@ -121,10 +148,10 @@ bool dio_get_uint16_vec8_raw(struct data_in *din, int **values, int stop_value)
 #ifndef FREECIV_JSON_CONNECTION
 
 /* Should be a function but we need some macro magic. */
-#define DIO_BV_GET(pdin, basekey, bv)                         \
+#define DIO_BV_GET(pdin, basekey, location, bv)                         \
   dio_get_memory_raw((pdin), (bv).vec, sizeof((bv).vec))
 
-#define DIO_GET(f, d, k, ...) dio_get_##f##_raw(d, ## __VA_ARGS__)
+#define DIO_GET(f, d, k, l, ...) dio_get_##f##_raw(d, ## __VA_ARGS__)
 
 #endif /* FREECIV_JSON_CONNECTION */
 
@@ -159,10 +186,10 @@ void dio_put_uint16_vec8_raw(struct raw_data_out *dout, int *values, int stop_va
 #ifndef FREECIV_JSON_CONNECTION
 
 /* Should be a function but we need some macro magic. */
-#define DIO_BV_PUT(pdout, k, bv)                         \
+#define DIO_BV_PUT(pdout, k, location, bv)                         \
   dio_put_memory_raw((pdout), (bv).vec, sizeof((bv).vec))
 
-#define DIO_PUT(f, d, k, ...) dio_put_##f##_raw(d, ## __VA_ARGS__)
+#define DIO_PUT(f, d, k, l, ...) dio_put_##f##_raw(d, ## __VA_ARGS__)
 
 #endif /* FREECIV_JSON_CONNECTION */
 
diff --git a/common/dataio_json.c b/common/dataio_json.c
index 7986f0d..1c3d113 100644
--- a/common/dataio_json.c
+++ b/common/dataio_json.c
@@ -113,7 +113,9 @@ static bool get_conv(char *dst, size_t ndst, const char *src,
 /**************************************************************************
   Insert 8 bit value with json.
 **************************************************************************/
-void dio_put_uint8_json(struct json_data_out *dout, char *key, int value)
+void dio_put_uint8_json(struct json_data_out *dout,
+                        char *key, const struct plocation* location,
+                        int value)
 {
   json_object_set_new(dout->json, key, json_integer(value));
 }
@@ -121,7 +123,8 @@ void dio_put_uint8_json(struct json_data_out *dout, char *key, int value)
 /**************************************************************************
   Insert value using 32 bits. May overflow.
 **************************************************************************/
-void dio_put_uint16_json(struct json_data_out *dout, char *key, int value)
+void dio_put_uint16_json(struct json_data_out *dout, char *key,
+                         const struct plocation* location, int value)
 {
   json_object_set_new(dout->json, key, json_integer(value));
 }
@@ -130,7 +133,9 @@ void dio_put_uint16_json(struct json_data_out *dout, char *key, int value)
   Insert unit type numbers from value array as 8 bit values until there is
   value U_LAST or MAX_NUM_UNIT_LIST numbers have been inserted.
 **************************************************************************/
-void dio_put_unit_list_json(struct json_data_out *dout, char *key, const int *value)
+void dio_put_unit_list_json(struct json_data_out *dout, char *key,
+                            const struct plocation* location,
+                            const int *value)
 {
   /* TODO: implement */
 }
@@ -140,6 +145,7 @@ void dio_put_unit_list_json(struct json_data_out *dout, char *key, const int *va
   is value B_LAST or MAX_NUM_BUILDING_LIST numbers have been inserted.
 **************************************************************************/
 void dio_put_building_list_json(struct json_data_out *dout, char *key,
+                                const struct plocation* location,
                                 const int *value)
 {
   /* TODO: implement */
@@ -149,6 +155,7 @@ void dio_put_building_list_json(struct json_data_out *dout, char *key,
 ...
 **************************************************************************/
 void dio_put_worklist_json(struct json_data_out *dout, char *key,
+                           const struct plocation* location,
                            const struct worklist *pwl)
 {
   /* TODO: implement */
@@ -157,7 +164,8 @@ void dio_put_worklist_json(struct json_data_out *dout, char *key,
 /**************************************************************************
  Receive uint8 value to dest with json.
 **************************************************************************/
-bool dio_get_uint8_json(json_t *json_packet, char *key, int *dest)
+bool dio_get_uint8_json(json_t *json_packet, char *key,
+                        const struct plocation* location, int *dest)
 {
   json_t *pint = json_object_get(json_packet, key);
 
@@ -178,7 +186,8 @@ bool dio_get_uint8_json(json_t *json_packet, char *key, int *dest)
 /**************************************************************************
  Receive uint16 value to dest with json.
 **************************************************************************/
-bool dio_get_uint16_json(json_t *json_packet, char *key, int *dest)
+bool dio_get_uint16_json(json_t *json_packet, char *key,
+                         const struct plocation* location, int *dest)
 {
   json_t *pint = json_object_get(json_packet, key);
 
@@ -199,7 +208,8 @@ bool dio_get_uint16_json(json_t *json_packet, char *key, int *dest)
 /**************************************************************************
  ..
 **************************************************************************/
-bool dio_get_uint32_json(json_t *json_packet, char *key, int *dest)
+bool dio_get_uint32_json(json_t *json_packet, char *key,
+                         const struct plocation* location, int *dest)
 {
   json_t *pint = json_object_get(json_packet, key);
 
@@ -220,7 +230,8 @@ bool dio_get_uint32_json(json_t *json_packet, char *key, int *dest)
 /**************************************************************************
  ..
 **************************************************************************/
-bool dio_get_tech_list_json(json_t *json_packet, char *key, int *dest)
+bool dio_get_tech_list_json(json_t *json_packet, char *key,
+                            const struct plocation* location, int *dest)
 {
   /* TODO: implement */
   return TRUE;
@@ -230,7 +241,8 @@ bool dio_get_tech_list_json(json_t *json_packet, char *key, int *dest)
   Take unit type numbers until UTYF_LAST encountered, or MAX_NUM_UNIT_LIST
   types retrieved.
 **************************************************************************/
-bool dio_get_unit_list_json(json_t *json_packet, char *key, int *dest)
+bool dio_get_unit_list_json(json_t *json_packet, char *key,
+                            const struct plocation* location, int *dest)
 {
   /* TODO: implement */
   return TRUE;
@@ -239,7 +251,8 @@ bool dio_get_unit_list_json(json_t *json_packet, char *key, int *dest)
 /**************************************************************************
  ..
 **************************************************************************/
-bool dio_get_building_list_json(json_t *json_packet, char *key, int *dest)
+bool dio_get_building_list_json(json_t *json_packet, char *key,
+                                const struct plocation* location, int *dest)
 {
   /* TODO: implement */
   return TRUE;
@@ -248,7 +261,9 @@ bool dio_get_building_list_json(json_t *json_packet, char *key, int *dest)
 /**************************************************************************
  ..
 **************************************************************************/
-bool dio_get_worklist_json(json_t *json_packet, char *key, struct worklist *pwl)
+bool dio_get_worklist_json(json_t *json_packet, char *key,
+                           const struct plocation* location,
+                           struct worklist *pwl)
 {
   /* TODO: implement */
   return TRUE;
@@ -258,6 +273,7 @@ bool dio_get_worklist_json(json_t *json_packet, char *key, struct worklist *pwl)
 ...
 **************************************************************************/
 bool dio_get_uint8_vec8_json(json_t *json_packet, char *key,
+                             const struct plocation* location,
                              int **values, int stop_value)
 {
   /* TODO: implement */
@@ -267,7 +283,9 @@ bool dio_get_uint8_vec8_json(json_t *json_packet, char *key,
 /**************************************************************************
 ...
 **************************************************************************/
-bool dio_get_uint16_vec8_json(json_t *json_packet, char *key, int **values,
+bool dio_get_uint16_vec8_json(json_t *json_packet, char *key,
+                              const struct plocation* location,
+                              int **values,
                               int stop_value)
 {
   /* TODO: implement */
@@ -278,6 +296,7 @@ bool dio_get_uint16_vec8_json(json_t *json_packet, char *key, int **values,
   Read a single requirement.
 **************************************************************************/
 bool dio_get_requirement_json(json_t *json_packet, char *key,
+                              const struct plocation* location,
                               struct requirement *preq)
 {
   int kind, range, value;
@@ -291,31 +310,31 @@ bool dio_get_requirement_json(json_t *json_packet, char *key,
   }
 
   /* Find the requirement object fields and translate their values. */
-  if (!dio_get_uint8_json(requirement, "kind", &kind)) {
+  if (!dio_get_uint8_json(requirement, "kind", NULL, &kind)) {
     log_error("ERROR: Unable to get part of requirement with key: %s",
               key);
     return FALSE;
   }
 
-  if (!dio_get_sint32_json(requirement, "value", &value)) {
+  if (!dio_get_sint32_json(requirement, "value", NULL, &value)) {
     log_error("ERROR: Unable to get part of requirement with key: %s",
               key);
     return FALSE;
   }
 
-  if (!dio_get_uint8_json(requirement, "range", &range)) {
+  if (!dio_get_uint8_json(requirement, "range", NULL, &range)) {
     log_error("ERROR: Unable to get part of requirement with key: %s",
               key);
     return FALSE;
   }
 
-  if (!dio_get_bool8_json(requirement, "survives", &survives)) {
+  if (!dio_get_bool8_json(requirement, "survives", NULL, &survives)) {
     log_error("ERROR: Unable to get part of requirement with key: %s",
               key);
     return FALSE;
   }
 
-  if (!dio_get_bool8_json(requirement, "present", &present)) {
+  if (!dio_get_bool8_json(requirement, "present", NULL, &present)) {
     log_error("ERROR: Unable to get part of requirement with key: %s",
               key);
     return FALSE;
@@ -330,7 +349,8 @@ bool dio_get_requirement_json(json_t *json_packet, char *key,
 /**************************************************************************
 ...
 **************************************************************************/
-void dio_put_uint32_json(struct json_data_out *dout, char *key, int value)
+void dio_put_uint32_json(struct json_data_out *dout, char *key,
+                         const struct plocation* location, int value)
 {
   json_object_set_new(dout->json, key, json_integer(value));
 }
@@ -338,7 +358,8 @@ void dio_put_uint32_json(struct json_data_out *dout, char *key, int value)
 /**************************************************************************
 ...
 **************************************************************************/
-void dio_put_bool8_json(struct json_data_out *dout, char *key, bool value)
+void dio_put_bool8_json(struct json_data_out *dout, char *key,
+                        const struct plocation* location, bool value)
 {
   json_object_set_new(dout->json, key, value ? json_true() : json_false());
 }
@@ -346,7 +367,8 @@ void dio_put_bool8_json(struct json_data_out *dout, char *key, bool value)
 /**************************************************************************
 ...
 **************************************************************************/
-void dio_put_bool32_json(struct json_data_out *dout, char *key, bool value)
+void dio_put_bool32_json(struct json_data_out *dout, char *key,
+                         const struct plocation* location, bool value)
 {
   json_object_set_new(dout->json, key, value ? json_true() : json_false());
 }
@@ -355,6 +377,7 @@ void dio_put_bool32_json(struct json_data_out *dout, char *key, bool value)
 ...
 **************************************************************************/
 void dio_put_ufloat_json(struct json_data_out *dout, char *key,
+                         const struct plocation* location,
                          float value, int float_factor)
 {
   json_object_set_new(dout->json, key, json_real(value));
@@ -364,6 +387,7 @@ void dio_put_ufloat_json(struct json_data_out *dout, char *key,
 ...
 **************************************************************************/
 void dio_put_sfloat_json(struct json_data_out *dout, char *key,
+                         const struct plocation* location,
                          float value, int float_factor)
 {
   json_object_set_new(dout->json, key, json_real(value));
@@ -373,6 +397,7 @@ void dio_put_sfloat_json(struct json_data_out *dout, char *key,
 ...
 **************************************************************************/
 void dio_put_uint8_vec8_json(struct json_data_out *dout, char *key,
+                             const struct plocation* location,
                              int *values, int stop_value)
 {
   /* TODO: implement. */
@@ -381,7 +406,8 @@ void dio_put_uint8_vec8_json(struct json_data_out *dout, char *key,
 /**************************************************************************
 ...
 **************************************************************************/
-void dio_put_uint16_vec8_json(struct json_data_out *dout, char *key, int *values,
+void dio_put_uint16_vec8_json(struct json_data_out *dout, char *key,
+                              const struct plocation* location, int *values,
                               int stop_value)
 {
   /* TODO: implement. */
@@ -390,7 +416,9 @@ void dio_put_uint16_vec8_json(struct json_data_out *dout, char *key, int *values
 /**************************************************************************
   Send block of memory as byte array
 **************************************************************************/
-void dio_put_memory_json(struct json_data_out *dout, char *key, const void *value,
+void dio_put_memory_json(struct json_data_out *dout, char *key,
+                         const struct plocation* location,
+                         const void *value,
                          size_t size)
 {
   int i;
@@ -399,14 +427,16 @@ void dio_put_memory_json(struct json_data_out *dout, char *key, const void *valu
   for (i = 0; i < size; i++) {
     fc_snprintf(fullkey, sizeof(fullkey), "%s_%d", key, i);
 
-    dio_put_uint8_json(dout, fullkey, ((unsigned char *)value)[i]);
+    dio_put_uint8_json(dout, fullkey, NULL, ((unsigned char *)value)[i]);
   }
 }
 
 /**************************************************************************
 ...
 **************************************************************************/
-void dio_put_string_json(struct json_data_out *dout, char *key, const char *value)
+void dio_put_string_json(struct json_data_out *dout, char *key,
+                         const struct plocation* location,
+                         const char *value)
 {
   json_object_set_new(dout->json, key, json_string(value));
 }
@@ -414,7 +444,9 @@ void dio_put_string_json(struct json_data_out *dout, char *key, const char *valu
 /**************************************************************************
 ...
 **************************************************************************/
-void dio_put_tech_list_json(struct json_data_out *dout, char *key, const int *value)
+void dio_put_tech_list_json(struct json_data_out *dout, char *key,
+                            const struct plocation* location,
+                            const int *value)
 {
   /* TODO: implement */
 }
@@ -423,6 +455,7 @@ void dio_put_tech_list_json(struct json_data_out *dout, char *key, const int *va
   Insert a single requirement.
 **************************************************************************/
 void dio_put_requirement_json(struct json_data_out *dout, char *key,
+                              const struct plocation* location,
                               const struct requirement *preq)
 {
   int kind, range, value;
@@ -451,7 +484,8 @@ void dio_put_requirement_json(struct json_data_out *dout, char *key,
 /**************************************************************************
 ...
 **************************************************************************/
-bool dio_get_bool8_json(json_t *json_packet, char *key, bool *dest)
+bool dio_get_bool8_json(json_t *json_packet, char *key,
+                        const struct plocation* location, bool *dest)
 {
   json_t *pbool = json_object_get(json_packet, key);
 
@@ -472,7 +506,8 @@ bool dio_get_bool8_json(json_t *json_packet, char *key, bool *dest)
 /**************************************************************************
 ...
 **************************************************************************/
-bool dio_get_bool32_json(json_t *json_packet, char *key, bool *dest)
+bool dio_get_bool32_json(json_t *json_packet, char *key,
+                         const struct plocation* location, bool *dest)
 {
   json_t *pbool = json_object_get(json_packet, key);
 
@@ -493,8 +528,9 @@ bool dio_get_bool32_json(json_t *json_packet, char *key, bool *dest)
 /**************************************************************************
   ...
 **************************************************************************/
-bool dio_get_ufloat_json(json_t *json_packet, char *key, float *dest,
-                         int float_factor)
+bool dio_get_ufloat_json(json_t *json_packet, char *key,
+                         const struct plocation* location,
+                         float *dest, int float_factor)
 {
   json_t *preal = json_object_get(json_packet, key);
 
@@ -510,8 +546,9 @@ bool dio_get_ufloat_json(json_t *json_packet, char *key, float *dest,
 /**************************************************************************
   ...
 **************************************************************************/
-bool dio_get_sfloat_json(json_t *json_packet, char *key, float *dest,
-                         int float_factor)
+bool dio_get_sfloat_json(json_t *json_packet, char *key,
+                         const struct plocation* location,
+                         float *dest, int float_factor)
 {
   json_t *preal = json_object_get(json_packet, key);
 
@@ -527,7 +564,8 @@ bool dio_get_sfloat_json(json_t *json_packet, char *key, float *dest,
 /**************************************************************************
 ...
 **************************************************************************/
-bool dio_get_sint8_json(json_t *json_packet, char *key, int *dest)
+bool dio_get_sint8_json(json_t *json_packet, char *key,
+                        const struct plocation* location, int *dest)
 {
   json_t *pint = json_object_get(json_packet, key);
 
@@ -548,7 +586,8 @@ bool dio_get_sint8_json(json_t *json_packet, char *key, int *dest)
 /**************************************************************************
 ...
 **************************************************************************/
-bool dio_get_sint16_json(json_t *json_packet, char *key, int *dest)
+bool dio_get_sint16_json(json_t *json_packet, char *key,
+                         const struct plocation* location, int *dest)
 {
   json_t *pint = json_object_get(json_packet, key);
 
@@ -569,8 +608,9 @@ bool dio_get_sint16_json(json_t *json_packet, char *key, int *dest)
 /**************************************************************************
   Receive block of memory as byte array
 **************************************************************************/
-bool dio_get_memory_json(json_t *json_packet, char *key, void *dest,
-                         size_t dest_size)
+bool dio_get_memory_json(json_t *json_packet, char *key,
+                         const struct plocation* location,
+                         void *dest, size_t dest_size)
 {
    int i;
   char fullkey[512];
@@ -580,7 +620,7 @@ bool dio_get_memory_json(json_t *json_packet, char *key, void *dest,
 
     fc_snprintf(fullkey, sizeof(fullkey), "%s_%d", key, i);
 
-    if (!dio_get_uint8_json(json_packet, fullkey, &val)) {
+    if (!dio_get_uint8_json(json_packet, fullkey, NULL, &val)) {
       return FALSE;
     }
     ((unsigned char *)dest)[i] = val;
@@ -592,8 +632,9 @@ bool dio_get_memory_json(json_t *json_packet, char *key, void *dest,
 /**************************************************************************
 ...
 **************************************************************************/
-bool dio_get_string_json(json_t *json_packet, char *key, char *dest,
-                         size_t max_dest_size)
+bool dio_get_string_json(json_t *json_packet, char *key,
+                         const struct plocation* location,
+                         char *dest, size_t max_dest_size)
 {
   json_t *pstring = json_object_get(json_packet, key);
 
diff --git a/common/dataio_json.h b/common/dataio_json.h
index 1359fc0..c112baa 100644
--- a/common/dataio_json.h
+++ b/common/dataio_json.h
@@ -47,70 +47,130 @@ size_t data_type_size(enum data_type type);
 bool dio_get_type_json(struct data_in *din, enum data_type type, int *dest)
     fc__attribute((nonnull (3)));
 
-bool dio_get_uint8_json(json_t *json_packet, char *key, int *dest);
-bool dio_get_uint16_json(json_t *json_packet, char *key, int *dest);
-bool dio_get_uint32_json(json_t *json_packet, char *key, int *dest);
-
-bool dio_get_sint8_json(json_t *json_packet, char *key, int *dest);
-bool dio_get_sint16_json(json_t *json_packet, char *key, int *dest);
-#define dio_get_sint32_json(d,v,x) dio_get_uint32_json(d,v,x)
-
-
-bool dio_get_bool8_json(json_t *json_packet, char *key, bool *dest);
-bool dio_get_bool32_json(json_t *json_packet, char *key, bool *dest);
-bool dio_get_ufloat_json(json_t *json_packet, char *key, float *dest, int float_factor);
-bool dio_get_sfloat_json(json_t *json_packet, char *key, float *dest, int float_factor);
-bool dio_get_memory_json(json_t *json_packet, char *key, void *dest, size_t dest_size);
-bool dio_get_string_json(json_t *json_packet, char *key, char *dest, size_t max_dest_size);
-bool dio_get_tech_list_json(json_t *json_packet, char *key, int *dest);
-bool dio_get_unit_list_json(json_t *json_packet, char *key, int *dest);
-bool dio_get_building_list_json(json_t *json_packet, char *key, int *dest);
-bool dio_get_worklist_json(json_t *json_packet, char *key, struct worklist *pwl);
-bool dio_get_requirement_json(json_t *json_packet, char *key, struct requirement *preq);
-
-bool dio_get_uint8_vec8_json(json_t *json_packet, char *key, int **values, int stop_value);
-bool dio_get_uint16_vec8_json(json_t *json_packet, char *key, int **values, int stop_value);
+bool dio_get_uint8_json(json_t *json_packet, char *key,
+                        const struct plocation* location, int *dest);
+bool dio_get_uint16_json(json_t *json_packet, char *key,
+                         const struct plocation* location, int *dest);
+bool dio_get_uint32_json(json_t *json_packet, char *key,
+                         const struct plocation* location, int *dest);
+
+bool dio_get_sint8_json(json_t *json_packet, char *key,
+                        const struct plocation* location, int *dest);
+bool dio_get_sint16_json(json_t *json_packet, char *key,
+                         const struct plocation* location, int *dest);
+#define dio_get_sint32_json(d, v, l, x) dio_get_uint32_json(d, v, l, x)
+
+
+bool dio_get_bool8_json(json_t *json_packet, char *key,
+                        const struct plocation* location, bool *dest);
+bool dio_get_bool32_json(json_t *json_packet, char *key,
+                         const struct plocation* location, bool *dest);
+bool dio_get_ufloat_json(json_t *json_packet, char *key,
+                         const struct plocation* location,
+                         float *dest, int float_factor);
+bool dio_get_sfloat_json(json_t *json_packet, char *key,
+                         const struct plocation* location,
+                         float *dest, int float_factor);
+bool dio_get_memory_json(json_t *json_packet, char *key,
+                         const struct plocation* location,
+                         void *dest, size_t dest_size);
+bool dio_get_string_json(json_t *json_packet, char *key,
+                         const struct plocation* location,
+                         char *dest, size_t max_dest_size);
+bool dio_get_tech_list_json(json_t *json_packet, char *key,
+                            const struct plocation* location, int *dest);
+bool dio_get_unit_list_json(json_t *json_packet, char *key,
+                            const struct plocation* location, int *dest);
+bool dio_get_building_list_json(json_t *json_packet, char *key,
+                                const struct plocation* location,
+                                int *dest);
+bool dio_get_worklist_json(json_t *json_packet, char *key,
+                           const struct plocation* location,
+                           struct worklist *pwl);
+bool dio_get_requirement_json(json_t *json_packet, char *key,
+                              const struct plocation* location,
+                              struct requirement *preq);
+
+bool dio_get_uint8_vec8_json(json_t *json_packet, char *key,
+                             const struct plocation* location,
+                             int **values, int stop_value);
+bool dio_get_uint16_vec8_json(json_t *json_packet, char *key,
+                              const struct plocation* location,
+                              int **values, int stop_value);
 
 /* Should be a function but we need some macro magic. */
-#define DIO_BV_GET(pdin, basekey, bv)                                        \
-  dio_get_memory_json(pc->json_packet, basekey, (bv).vec, sizeof((bv).vec))
+#define DIO_BV_GET(pdin, basekey, location, bv) \
+  dio_get_memory_json(pc->json_packet, basekey, location,\
+                      (bv).vec, sizeof((bv).vec))
 
-#define DIO_GET(f, d, k, ...) dio_get_##f##_json(pc->json_packet, k, ## __VA_ARGS__)
+#define DIO_GET(f, d, k, l, ...) \
+  dio_get_##f##_json(pc->json_packet, k, l, ## __VA_ARGS__)
 
 /* puts */
-void dio_put_type_json(struct json_data_out *dout, enum data_type type, char *key, int value);
-
-void dio_put_uint8_json(struct json_data_out *dout, char *key, int value);
-void dio_put_uint16_json(struct json_data_out *dout, char *key, int value);
-void dio_put_uint32_json(struct json_data_out *dout, char *key, int value);
-
-#define dio_put_sint8_json(d,k,v) dio_put_uint8_json(d,k,v)
-#define dio_put_sint16_json(d,k,v) dio_put_uint16_json(d,k,v)
-#define dio_put_sint32_json(d,k,v) dio_put_uint32_json(d,k,v)
-
-void dio_put_bool8_json(struct json_data_out *dout, char *key, bool value);
-void dio_put_bool32_json(struct json_data_out *dout, char *key, bool value);
-void dio_put_ufloat_json(struct json_data_out *dout, char *key, float value, int float_factor);
-void dio_put_sfloat_json(struct json_data_out *dout, char *key, float value, int float_factor);
-
-void dio_put_memory_json(struct json_data_out *dout, char *key, const void *value, size_t size);
-void dio_put_string_json(struct json_data_out *dout, char *key, const char *value);
-void dio_put_city_map_json(struct json_data_out *dout, char *key, const char *value);
-void dio_put_tech_list_json(struct json_data_out *dout, char *key, const int *value);
-void dio_put_unit_list_json(struct json_data_out *dout, char *key, const int *value);
-void dio_put_building_list_json(struct json_data_out *dout, char *key, const int *value);
-void dio_put_worklist_json(struct json_data_out *dout, char *key, const struct worklist *pwl);
+void dio_put_type_json(struct json_data_out *dout, enum data_type type,
+                       char *key, const struct plocation* location,
+                       int value);
+
+void dio_put_uint8_json(struct json_data_out *dout, char *key,
+                        const struct plocation* location, int value);
+void dio_put_uint16_json(struct json_data_out *dout, char *key,
+                         const struct plocation* location, int value);
+void dio_put_uint32_json(struct json_data_out *dout, char *key,
+                         const struct plocation* location, int value);
+
+#define dio_put_sint8_json(d, k, l, v) dio_put_uint8_json(d, k, l, v)
+#define dio_put_sint16_json(d, k, l, v) dio_put_uint16_json(d, k, l, v)
+#define dio_put_sint32_json(d, k, l, v) dio_put_uint32_json(d, k, l, v)
+
+void dio_put_bool8_json(struct json_data_out *dout, char *key,
+                        const struct plocation* location, bool value);
+void dio_put_bool32_json(struct json_data_out *dout, char *key,
+                         const struct plocation* location, bool value);
+void dio_put_ufloat_json(struct json_data_out *dout, char *key,
+                         const struct plocation* location,
+                         float value, int float_factor);
+void dio_put_sfloat_json(struct json_data_out *dout, char *key,
+                         const struct plocation* location,
+                         float value, int float_factor);
+
+void dio_put_memory_json(struct json_data_out *dout, char *key,
+                         const struct plocation* location,
+                         const void *value, size_t size);
+void dio_put_string_json(struct json_data_out *dout, char *key,
+                         const struct plocation* location,
+                         const char *value);
+void dio_put_city_map_json(struct json_data_out *dout, char *key,
+                           const struct plocation* location,
+                           const char *value);
+void dio_put_tech_list_json(struct json_data_out *dout, char *key,
+                            const struct plocation* location,
+                            const int *value);
+void dio_put_unit_list_json(struct json_data_out *dout, char *key,
+                            const struct plocation* location,
+                            const int *value);
+void dio_put_building_list_json(struct json_data_out *dout, char *key,
+                                const struct plocation* location,
+                                const int *value);
+void dio_put_worklist_json(struct json_data_out *dout, char *key,
+                           const struct plocation* location,
+                           const struct worklist *pwl);
 void dio_put_requirement_json(struct json_data_out *dout, char *key,
+                              const struct plocation* location,
                               const struct requirement *preq);
 
-void dio_put_uint8_vec8_json(struct json_data_out *dout, char *key, int *values, int stop_value);
-void dio_put_uint16_vec8_json(struct json_data_out *dout, char *key, int *values, int stop_value);
+void dio_put_uint8_vec8_json(struct json_data_out *dout, char *key,
+                             const struct plocation* location,
+                             int *values, int stop_value);
+void dio_put_uint16_vec8_json(struct json_data_out *dout, char *key,
+                              const struct plocation* location,
+                              int *values, int stop_value);
 
 /* Should be a function but we need some macro magic. */
-#define DIO_BV_PUT(pdout, type, bv) \
-  dio_put_memory_json((pdout), type, (bv).vec, sizeof((bv).vec))
+#define DIO_BV_PUT(pdout, type, location, bv) \
+  dio_put_memory_json((pdout), type, location, (bv).vec, sizeof((bv).vec))
 
-#define DIO_PUT(f, d, k, ...) dio_put_##f##_json(d, k, ## __VA_ARGS__)
+#define DIO_PUT(f, d, k, l, ...) \
+  dio_put_##f##_json(d, k, l, ## __VA_ARGS__)
 
 #ifdef __cplusplus
 }
diff --git a/common/generate_packets.py b/common/generate_packets.py
index 536d77b..1962dcc 100755
--- a/common/generate_packets.py
+++ b/common/generate_packets.py
@@ -348,41 +348,41 @@ class Field:
     # Returns code which put this field.
     def get_put(self):
         if self.dataio_type=="bitvector":
-            return "DIO_BV_PUT(&dout, \"%(name)s\", packet->%(name)s);"%self.__dict__
+            return "DIO_BV_PUT(&dout, \"%(name)s\", NULL, packet->%(name)s);"%self.__dict__
 
         if self.struct_type=="float" and not self.is_array:
-            return "  DIO_PUT(%(dataio_type)s, &dout, \"%(name)s\", real_packet->%(name)s, %(float_factor)d);"%self.__dict__
+            return "  DIO_PUT(%(dataio_type)s, &dout, \"%(name)s\", NULL, real_packet->%(name)s, %(float_factor)d);"%self.__dict__
 
         if self.dataio_type in ["worklist"]:
-            return "  DIO_PUT(%(dataio_type)s, &dout, \"%(name)s\", &real_packet->%(name)s);"%self.__dict__
+            return "  DIO_PUT(%(dataio_type)s, &dout, \"%(name)s\", NULL, &real_packet->%(name)s);"%self.__dict__
 
         if self.dataio_type in ["memory"]:
-            return "  DIO_PUT(%(dataio_type)s, &dout, \"%(name)s\", &real_packet->%(name)s, %(array_size_u)s);"%self.__dict__
+            return "  DIO_PUT(%(dataio_type)s, &dout, \"%(name)s\", NULL, &real_packet->%(name)s, %(array_size_u)s);"%self.__dict__
 
         arr_types=["string","city_map","tech_list",
                    "unit_list","building_list"]
         if (self.dataio_type in arr_types and self.is_array==1) or \
            (self.dataio_type not in arr_types and self.is_array==0):
-            return "  DIO_PUT(%(dataio_type)s, &dout, \"%(name)s\", real_packet->%(name)s);"%self.__dict__
+            return "  DIO_PUT(%(dataio_type)s, &dout, \"%(name)s\", NULL, real_packet->%(name)s);"%self.__dict__
         if self.is_struct:
             if self.is_array==2:
-                c="DIO_PUT(%(dataio_type)s, &dout, namestr, &real_packet->%(name)s[i][j]);"%self.__dict__
+                c="DIO_PUT(%(dataio_type)s, &dout, namestr, NULL, &real_packet->%(name)s[i][j]);"%self.__dict__
             else:
-                c="DIO_PUT(%(dataio_type)s, &dout, namestr, &real_packet->%(name)s[i]);"%self.__dict__
+                c="DIO_PUT(%(dataio_type)s, &dout, namestr, NULL, &real_packet->%(name)s[i]);"%self.__dict__
         elif self.dataio_type=="string":
-            c="DIO_PUT(%(dataio_type)s, &dout, namestr, real_packet->%(name)s[i]);"%self.__dict__
+            c="DIO_PUT(%(dataio_type)s, &dout, namestr, NULL, real_packet->%(name)s[i]);"%self.__dict__
             array_size_u=self.array_size1_u
 
         elif self.struct_type=="float":
             if self.is_array==2:
-                c="  DIO_PUT(%(dataio_type)s, &dout, namestr, real_packet->%(name)s[i][j], %(float_factor)d);"%self.__dict__
+                c="  DIO_PUT(%(dataio_type)s, &dout, namestr, NULL, real_packet->%(name)s[i][j], %(float_factor)d);"%self.__dict__
             else:
-                c="  DIO_PUT(%(dataio_type)s, &dout, namestr, real_packet->%(name)s[i], %(float_factor)d);"%self.__dict__
+                c="  DIO_PUT(%(dataio_type)s, &dout, namestr, NULL, real_packet->%(name)s[i], %(float_factor)d);"%self.__dict__
         else:
             if self.is_array==2:
-                c="DIO_PUT(%(dataio_type)s, &dout, namestr, real_packet->%(name)s[i][j]);"%self.__dict__
+                c="DIO_PUT(%(dataio_type)s, &dout, namestr, NULL, real_packet->%(name)s[i][j]);"%self.__dict__
             else:
-                c="DIO_PUT(%(dataio_type)s, &dout, namestr, real_packet->%(name)s[i]);"%self.__dict__
+                c="DIO_PUT(%(dataio_type)s, &dout, namestr, NULL, real_packet->%(name)s[i]);"%self.__dict__
 
         if not self.diff:
             if self.is_array==2 and self.dataio_type!="string":
@@ -423,12 +423,12 @@ class Field:
       for (i = 0; i < %(array_size_u)s; i++) {
         if (old->%(name)s[i] != real_packet->%(name)s[i]) {
           fc_snprintf(namestr, sizeof(namestr), "index_%%%%d", count++);
-          DIO_PUT(uint8, &dout, namestr, i);
+          DIO_PUT(uint8, &dout, namestr, NULL, i);
           %(c)s
         }
       }
       fc_snprintf(namestr, sizeof(namestr), "index_%%%%d", count++);
-      DIO_PUT(uint8, &dout, namestr, 255);
+      DIO_PUT(uint8, &dout, namestr, NULL, 255);
     } '''%self.get_dict(vars())
 
     # Returns a code fragement which will get the field if the
@@ -452,36 +452,36 @@ class Field:
     # Returns code which get this field.
     def get_get(self):
         if self.struct_type=="float" and not self.is_array:
-            return '''if (!DIO_GET(%(dataio_type)s, &din, \"%(name)s\", &real_packet->%(name)s, %(float_factor)d)) {
+            return '''if (!DIO_GET(%(dataio_type)s, &din, \"%(name)s\", NULL, &real_packet->%(name)s, %(float_factor)d)) {
   RECEIVE_PACKET_FIELD_ERROR(%(name)s);
 }'''%self.__dict__
         if self.dataio_type=="bitvector":
-            return '''if (!DIO_BV_GET(&din, \"%(name)s\", real_packet->%(name)s)) {
+            return '''if (!DIO_BV_GET(&din, \"%(name)s\", NULL, real_packet->%(name)s)) {
   RECEIVE_PACKET_FIELD_ERROR(%(name)s);
 }'''%self.__dict__
         if self.dataio_type in ["string","city_map"] and \
            self.is_array!=2:
-            return '''if (!DIO_GET(%(dataio_type)s, &din, \"%(name)s\", real_packet->%(name)s, sizeof(real_packet->%(name)s))) {
+            return '''if (!DIO_GET(%(dataio_type)s, &din, \"%(name)s\", NULL, real_packet->%(name)s, sizeof(real_packet->%(name)s))) {
   RECEIVE_PACKET_FIELD_ERROR(%(name)s);
 }'''%self.__dict__
         if self.is_struct and self.is_array==0:
-            return '''if (!DIO_GET(%(dataio_type)s, &din, \"%(name)s\", &real_packet->%(name)s)) {
+            return '''if (!DIO_GET(%(dataio_type)s, &din, \"%(name)s\", NULL, &real_packet->%(name)s)) {
   RECEIVE_PACKET_FIELD_ERROR(%(name)s);
 }'''%self.__dict__
         if self.dataio_type in ["tech_list","unit_list","building_list"]:
-            return '''if (!DIO_GET(%(dataio_type)s, &din, \"%(name)s\", real_packet->%(name)s)) {
+            return '''if (!DIO_GET(%(dataio_type)s, &din, \"%(name)s\", NULL, real_packet->%(name)s)) {
   RECEIVE_PACKET_FIELD_ERROR(%(name)s);
 }'''%self.__dict__
         if not self.is_array:
             if self.struct_type in ["int","bool"]:
-                return '''if (!DIO_GET(%(dataio_type)s, &din, \"%(name)s\", &real_packet->%(name)s)) {
+                return '''if (!DIO_GET(%(dataio_type)s, &din, \"%(name)s\", NULL, &real_packet->%(name)s)) {
   RECEIVE_PACKET_FIELD_ERROR(%(name)s);
 }'''%self.__dict__
             else:
                 return '''{
   int readin;
   
-  if (!DIO_GET(%(dataio_type)s, &din, \"%(name)s\", &readin)) {
+  if (!DIO_GET(%(dataio_type)s, &din, \"%(name)s\", NULL, &readin)) {
     RECEIVE_PACKET_FIELD_ERROR(%(name)s);
   }
   real_packet->%(name)s = readin;
@@ -489,49 +489,49 @@ class Field:
 
         if self.is_struct:
             if self.is_array==2:
-                c='''if (!DIO_GET(%(dataio_type)s, &din, namestr, &real_packet->%(name)s[i][j])) {
+                c='''if (!DIO_GET(%(dataio_type)s, &din, namestr, NULL, &real_packet->%(name)s[i][j])) {
       RECEIVE_PACKET_FIELD_ERROR(%(name)s);
     }'''%self.__dict__
             else:
-                c='''if (!DIO_GET(%(dataio_type)s, &din, namestr, &real_packet->%(name)s[i])) {
+                c='''if (!DIO_GET(%(dataio_type)s, &din, namestr, NULL, &real_packet->%(name)s[i])) {
       RECEIVE_PACKET_FIELD_ERROR(%(name)s);
     }'''%self.__dict__
         elif self.dataio_type=="string":
-            c='''if (!DIO_GET(%(dataio_type)s, &din, namestr, real_packet->%(name)s[i], sizeof(real_packet->%(name)s[i]))) {
+            c='''if (!DIO_GET(%(dataio_type)s, &din, namestr, NULL, real_packet->%(name)s[i], sizeof(real_packet->%(name)s[i]))) {
       RECEIVE_PACKET_FIELD_ERROR(%(name)s);
     }'''%self.__dict__
         elif self.struct_type=="float":
             if self.is_array==2:
-                c='''if (!DIO_GET(%(dataio_type)s, &din, namestr, &real_packet->%(name)s[i][j], %(float_factor)d)) {
+                c='''if (!DIO_GET(%(dataio_type)s, &din, namestr, NULL, &real_packet->%(name)s[i][j], %(float_factor)d)) {
       RECEIVE_PACKET_FIELD_ERROR(%(name)s);
     }'''%self.__dict__
             else:
-                c='''if (!DIO_GET(%(dataio_type)s, &din, namestr, &real_packet->%(name)s[i], %(float_factor)d)) {
+                c='''if (!DIO_GET(%(dataio_type)s, &din, namestr, NULL, &real_packet->%(name)s[i], %(float_factor)d)) {
       RECEIVE_PACKET_FIELD_ERROR(%(name)s);
     }'''%self.__dict__
         elif self.is_array==2:
             if self.struct_type in ["int","bool"]:
-                c='''if (!DIO_GET(%(dataio_type)s, &din, namestr, &real_packet->%(name)s[i][j])) {
+                c='''if (!DIO_GET(%(dataio_type)s, &din, namestr, NULL, &real_packet->%(name)s[i][j])) {
       RECEIVE_PACKET_FIELD_ERROR(%(name)s);
     }'''%self.__dict__
             else:
                 c='''{
       int readin;
   
-      if (!DIO_GET(%(dataio_type)s, &din, \"%(name)s\", &readin)) {
+      if (!DIO_GET(%(dataio_type)s, &din, \"%(name)s\", NULL, &readin)) {
         RECEIVE_PACKET_FIELD_ERROR(%(name)s);
       }
       real_packet->%(name)s[i][j] = readin;
     }'''%self.__dict__
         elif self.struct_type in ["int","bool"]:
-            c='''if (!DIO_GET(%(dataio_type)s, &din, namestr, &real_packet->%(name)s[i])) {
+            c='''if (!DIO_GET(%(dataio_type)s, &din, namestr, NULL, &real_packet->%(name)s[i])) {
       RECEIVE_PACKET_FIELD_ERROR(%(name)s);
     }'''%self.__dict__
         else:
             c='''{
       int readin;
   
-      if (!DIO_GET(%(dataio_type)s, &din, namestr, &readin)) {
+      if (!DIO_GET(%(dataio_type)s, &din, namestr, NULL, &readin)) {
         RECEIVE_PACKET_FIELD_ERROR(%(name)s);
       }
       real_packet->%(name)s[i] = readin;
@@ -554,7 +554,7 @@ class Field:
                 extra=""
             if self.dataio_type=="memory":
                 return '''%(extra)s
-  if (!DIO_GET(%(dataio_type)s, &din, \"%(name)s\", real_packet->%(name)s, %(array_size_u)s)){
+  if (!DIO_GET(%(dataio_type)s, &din, \"%(name)s\", NULL, real_packet->%(name)s, %(array_size_u)s)){
     RECEIVE_PACKET_FIELD_ERROR(%(name)s);
   }'''%self.get_dict(vars())
             elif self.is_array==2 and self.dataio_type!="string":
@@ -588,7 +588,7 @@ class Field:
 for (;;) {
   int i;
 
-  if (!DIO_GET(uint8, &din, \"%(name)s\", &i)) {
+  if (!DIO_GET(uint8, &din, \"%(name)s\", NULL, &i)) {
     RECEIVE_PACKET_FIELD_ERROR(%(name)s);
   }
   if (i == 255) {
@@ -909,7 +909,7 @@ static char *stats_%(name)s_names[] = {%(names)s};
 '''%self.get_dict(vars())
 
         body=body+'''
-  DIO_BV_PUT(&dout, \"fields\", fields);
+  DIO_BV_PUT(&dout, \"fields\", NULL, fields);
 '''
 
         for field in self.key_fields:
@@ -950,7 +950,7 @@ static char *stats_%(name)s_names[] = {%(names)s};
   struct %(packet_name)s *old;
   struct genhash **hash = pc->phs.received + %(type)s;
 '''
-            delta_body1="\n  DIO_BV_GET(&din, \"fields\", fields);\n"
+            delta_body1="\n  DIO_BV_GET(&din, \"fields\", NULL, fields);\n"
             body1=""
             for field in self.key_fields:
                 body1=body1+prefix("  ",field.get_get())+"\n"
diff --git a/common/packets_json.h b/common/packets_json.h
index f453f20..be1b456 100644
--- a/common/packets_json.h
+++ b/common/packets_json.h
@@ -32,7 +32,7 @@ void *get_packet_from_connection_json(struct connection *pc,
   \
   dio_output_init(&(dout.raw), buffer, sizeof(buffer)); \
   dio_put_uint16_raw(&(dout.raw), 0);                   \
-  dio_put_uint8_json(&dout, "pid", packet_type);
+  dio_put_uint8_json(&dout, "pid", NULL, packet_type);
 
 #define SEND_PACKET_END(packet_type) \
   { \
-- 
2.1.4

