commit d6d844430e17c1ed6721b3c43721aab2c6080640
Author: sveinung <sveinung@a0f10bec-cc02-0410-94fc-a9cfff90b4cd>
Date:   Fri Jul 15 11:21:52 2016 +0000

    Make action probability a range.
    
    In some cases the player may know enough to predict the range the action
    probability will be in even when the exact probability of success is
    unknown. Making action probability a range allows it to be sent.
    
    In some cases the probability of success can't be expressed as X * 0.5%.
    Rounding it wrong can cause problems. Example: bug #24802 was caused by a
    low probability being rounded to 0. 0 was seen as disabled.
    
    Making action probability a range allows the completely unknown action
    probability to become the regular value [0%, 100%].
    
    See patch #7238
    
    git-svn-id: svn://svn.gna.org/svn/freeciv/trunk@33249 a0f10bec-cc02-0410-94fc-a9cfff90b4cd

diff --git a/client/climisc.c b/client/climisc.c
index d9b926e..856dc66 100644
--- a/client/climisc.c
+++ b/client/climisc.c
@@ -1259,7 +1259,7 @@ void client_unit_init_act_prob_cache(struct unit *punit)
   /* A double init would cause a leak. */
   fc_assert_ret(punit->client.act_prob_cache == NULL);
 
-  punit->client.act_prob_cache = (action_probability*)fc_malloc(
+  punit->client.act_prob_cache = (struct act_prob*)fc_malloc(
         ACTION_COUNT * sizeof(*punit->client.act_prob_cache));
 }
 
diff --git a/client/gui-gtk-2.0/action_dialog.c b/client/gui-gtk-2.0/action_dialog.c
index 29cac64..3d07106 100644
--- a/client/gui-gtk-2.0/action_dialog.c
+++ b/client/gui-gtk-2.0/action_dialog.c
@@ -1244,7 +1244,7 @@ static const GCallback af_map[ACTION_COUNT] = {
 *******************************************************************/
 static void action_entry(GtkWidget *shl,
                          int action_id,
-                         const action_probability *act_probs,
+                         const struct act_prob *act_probs,
                          const gchar *custom,
                          struct action_data *handler_args)
 {
@@ -1295,7 +1295,7 @@ static void action_entry(GtkWidget *shl,
 *******************************************************************/
 static void action_entry_update(GtkWidget *shl,
                                 int action_id,
-                                const action_probability *act_probs,
+                                const struct act_prob *act_probs,
                                 const gchar *custom,
                                 struct action_data *handler_args)
 {
@@ -1331,7 +1331,7 @@ void popup_action_selection(struct unit *actor_unit,
                             struct city *target_city,
                             struct unit *target_unit,
                             struct tile *target_tile,
-                            const action_probability *act_probs)
+                            const struct act_prob *act_probs)
 {
   GtkWidget *shl;
   struct astring title = ASTRING_INIT, text = ASTRING_INIT;
@@ -1572,7 +1572,7 @@ void action_selection_refresh(struct unit *actor_unit,
                               struct city *target_city,
                               struct unit *target_unit,
                               struct tile *target_tile,
-                              const action_probability *act_probs)
+                              const struct act_prob *act_probs)
 {
   struct action_data *data;
 
diff --git a/client/gui-gtk-3.0/action_dialog.c b/client/gui-gtk-3.0/action_dialog.c
index 06ed65d..fb25ce2 100644
--- a/client/gui-gtk-3.0/action_dialog.c
+++ b/client/gui-gtk-3.0/action_dialog.c
@@ -1254,7 +1254,7 @@ static const GCallback af_map[ACTION_COUNT] = {
 *******************************************************************/
 static void action_entry(GtkWidget *shl,
                          int action_id,
-                         const action_probability *act_probs,
+                         const struct act_prob *act_probs,
                          const gchar *custom,
                          struct action_data *handler_args)
 {
@@ -1305,7 +1305,7 @@ static void action_entry(GtkWidget *shl,
 *******************************************************************/
 static void action_entry_update(GtkWidget *shl,
                                 int action_id,
-                                const action_probability *act_probs,
+                                const struct act_prob *act_probs,
                                 const gchar *custom,
                                 struct action_data *handler_args)
 {
@@ -1341,7 +1341,7 @@ void popup_action_selection(struct unit *actor_unit,
                             struct city *target_city,
                             struct unit *target_unit,
                             struct tile *target_tile,
-                            const action_probability *act_probs)
+                            const struct act_prob *act_probs)
 {
   GtkWidget *shl;
   struct astring title = ASTRING_INIT, text = ASTRING_INIT;
@@ -1582,7 +1582,7 @@ void action_selection_refresh(struct unit *actor_unit,
                               struct city *target_city,
                               struct unit *target_unit,
                               struct tile *target_tile,
-                              const action_probability *act_probs)
+                              const struct act_prob *act_probs)
 {
   struct action_data *data;
 
diff --git a/client/gui-gtk-3.x/action_dialog.c b/client/gui-gtk-3.x/action_dialog.c
index 22051cf..0568d84 100644
--- a/client/gui-gtk-3.x/action_dialog.c
+++ b/client/gui-gtk-3.x/action_dialog.c
@@ -1248,7 +1248,7 @@ static const GCallback af_map[ACTION_COUNT] = {
 *******************************************************************/
 static void action_entry(GtkWidget *shl,
                          int action_id,
-                         const action_probability *act_probs,
+                         const struct act_prob *act_probs,
                          const gchar *custom,
                          struct action_data *handler_args)
 {
@@ -1299,7 +1299,7 @@ static void action_entry(GtkWidget *shl,
 *******************************************************************/
 static void action_entry_update(GtkWidget *shl,
                                 int action_id,
-                                const action_probability *act_probs,
+                                const struct act_prob *act_probs,
                                 const gchar *custom,
                                 struct action_data *handler_args)
 {
@@ -1335,7 +1335,7 @@ void popup_action_selection(struct unit *actor_unit,
                             struct city *target_city,
                             struct unit *target_unit,
                             struct tile *target_tile,
-                            const action_probability *act_probs)
+                            const struct act_prob *act_probs)
 {
   GtkWidget *shl;
   struct astring title = ASTRING_INIT, text = ASTRING_INIT;
@@ -1576,7 +1576,7 @@ void action_selection_refresh(struct unit *actor_unit,
                               struct city *target_city,
                               struct unit *target_unit,
                               struct tile *target_tile,
-                              const action_probability *act_probs)
+                              const struct act_prob *act_probs)
 {
   struct action_data *data;
 
diff --git a/client/gui-qt/dialogs.cpp b/client/gui-qt/dialogs.cpp
index b1aaf7e..d354233 100644
--- a/client/gui-qt/dialogs.cpp
+++ b/client/gui-qt/dialogs.cpp
@@ -96,7 +96,7 @@ static void keep_moving(QVariant data1, QVariant data2);
 static void pillage_something(QVariant data1, QVariant data2);
 static void action_entry(choice_dialog *cd,
                          gen_action act,
-                         const action_probability *act_probs,
+                         const struct act_prob *act_probs,
                          QString custom,
                          QVariant data1, QVariant data2);
 
@@ -1357,7 +1357,7 @@ void popup_action_selection(struct unit *actor_unit,
                             struct city *target_city,
                             struct unit *target_unit,
                             struct tile *target_tile,
-                            const action_probability *act_probs)
+                            const struct act_prob *act_probs)
 {
   struct astring title = ASTRING_INIT, text = ASTRING_INIT;
   QVariant qv1, qv2;
@@ -1556,7 +1556,7 @@ void popup_action_selection(struct unit *actor_unit,
 **********************************************************************/
 static void action_entry(choice_dialog *cd,
                          gen_action act,
-                         const action_probability *act_probs,
+                         const struct act_prob *act_probs,
                          QString custom,
                          QVariant data1, QVariant data2)
 {
@@ -1606,7 +1606,7 @@ static void action_entry(choice_dialog *cd,
 **********************************************************************/
 static void action_entry_update(QPushButton *button,
                                 gen_action act,
-                                const action_probability *act_probs,
+                                const struct act_prob *act_probs,
                                 QString custom,
                                 QVariant data1, QVariant data2)
 {
@@ -2466,7 +2466,7 @@ void action_selection_refresh(struct unit *actor_unit,
                               struct city *target_city,
                               struct unit *target_unit,
                               struct tile *target_tile,
-                              const action_probability *act_probs)
+                              const struct act_prob *act_probs)
 {
   choice_dialog *asd;
   Choice_dialog_button *keep_moving_button;
diff --git a/client/gui-sdl2/action_dialog.c b/client/gui-sdl2/action_dialog.c
index 199a07a..84b851d 100644
--- a/client/gui-sdl2/action_dialog.c
+++ b/client/gui-sdl2/action_dialog.c
@@ -1071,7 +1071,7 @@ static const act_func af_map[ACTION_COUNT] = {
   Add an entry for an action in the action choice dialog.
 **************************************************************************/
 static void action_entry(const enum gen_action act,
-                         const action_probability *act_probs,
+                         const struct act_prob *act_probs,
                          const char *custom,
                          struct unit *act_unit,
                          struct tile *tgt_tile,
@@ -1148,7 +1148,7 @@ static void action_entry(const enum gen_action act,
   possible).
 **************************************************************************/
 static const char *action_custom_text(const int action_id,
-                                      const action_probability prob,
+                                      const struct act_prob prob,
                                       const struct city *actor_homecity,
                                       const struct city *target_city)
 {
@@ -1202,7 +1202,7 @@ void popup_action_selection(struct unit *actor_unit,
                             struct city *target_city,
                             struct unit *target_unit,
                             struct tile *target_tile,
-                            const action_probability *act_probs)
+                            const struct act_prob *act_probs)
 {
   struct widget *pWindow = NULL, *pBuf = NULL;
   utf8_str *pstr;
@@ -1459,7 +1459,7 @@ void action_selection_refresh(struct unit *actor_unit,
                               struct city *target_city,
                               struct unit *target_unit,
                               struct tile *target_tile,
-                              const action_probability *act_probs)
+                              const struct act_prob *act_probs)
 {
   /* TODO: port me. */
 }
diff --git a/client/gui-stub/dialogs.c b/client/gui-stub/dialogs.c
index 5f5ab02..1c2548f 100644
--- a/client/gui-stub/dialogs.c
+++ b/client/gui-stub/dialogs.c
@@ -119,7 +119,7 @@ void popup_action_selection(struct unit *actor_unit,
                                    struct city *target_city,
                                    struct unit *target_unit,
                                    struct tile *target_tile,
-                                   const action_probability *act_probs)
+                                   const struct act_prob *act_probs)
 {
   /* PORTME */
 }
@@ -256,7 +256,7 @@ void action_selection_refresh(struct unit *actor_unit,
                               struct city *target_city,
                               struct unit *target_unit,
                               struct tile *target_tile,
-                              const action_probability *act_probs)
+                              const struct act_prob *act_probs)
 {
   /* TODO: port me. */
 }
diff --git a/client/include/dialogs_g.h b/client/include/dialogs_g.h
index 96f5a7c..6f79d38 100644
--- a/client/include/dialogs_g.h
+++ b/client/include/dialogs_g.h
@@ -50,7 +50,7 @@ GUI_FUNC_PROTO(void, races_update_pickable, bool nationset_change)
 GUI_FUNC_PROTO(void, popup_action_selection, struct unit *actor_unit,
                struct city *target_city, struct unit *target_unit,
                struct tile *target_tile,
-               const action_probability *act_probs)
+               const struct act_prob *act_probs)
 GUI_FUNC_PROTO(int, action_selection_actor_unit, void)
 GUI_FUNC_PROTO(int, action_selection_target_city, void)
 GUI_FUNC_PROTO(int, action_selection_target_unit, void)
@@ -58,7 +58,7 @@ GUI_FUNC_PROTO(void, action_selection_close, void)
 GUI_FUNC_PROTO(void, action_selection_refresh, struct unit *actor_unit,
                struct city *target_city, struct unit *target_unit,
                struct tile *target_tile,
-               const action_probability *act_probs)
+               const struct act_prob *act_probs)
 GUI_FUNC_PROTO(void, popup_incite_dialog, struct unit *actor,
                struct city *pcity, int cost)
 GUI_FUNC_PROTO(void, popup_bribe_dialog, struct unit *actor,
diff --git a/client/packhand.c b/client/packhand.c
index 0df7f8f..26b45b2 100644
--- a/client/packhand.c
+++ b/client/packhand.c
@@ -4437,7 +4437,7 @@ void handle_unit_action_answer(int diplomat_id, int target_id, int cost,
   Returns a possibly legal attack action iff it is the only interesting
   action that currently is legal.
 **************************************************************************/
-static enum gen_action auto_attack_act(const action_probability *act_probs)
+static enum gen_action auto_attack_act(const struct act_prob *act_probs)
 {
   enum gen_action attack_action = ACTION_COUNT;
 
@@ -4512,7 +4512,7 @@ void handle_unit_actions(const struct packet_unit_actions *packet)
   struct city *target_city = game_city_by_number(packet->target_city_id);
   struct unit *target_unit = game_unit_by_number(packet->target_unit_id);
 
-  const action_probability *act_probs = packet->action_probabilities;
+  const struct act_prob *act_probs = packet->action_probabilities;
 
   bool disturb_player = packet->disturb_player;
   bool valid = FALSE;
diff --git a/common/actions.c b/common/actions.c
index e79b358..c35207d 100644
--- a/common/actions.c
+++ b/common/actions.c
@@ -15,7 +15,7 @@
 #include <fc_config.h>
 #endif
 
-#include <math.h> /* ceil */
+#include <math.h> /* ceil, floor */
 
 /* utility */
 #include "astring.h"
@@ -63,13 +63,13 @@ static bool is_enabler_active(const struct action_enabler *enabler,
 			      const struct specialist *target_specialist);
 
 static inline bool
-action_prob_is_signal(const action_probability probability);
+action_prob_is_signal(const struct act_prob probability);
 static inline bool
-action_prob_not_relevant(const action_probability probability);
+action_prob_not_relevant(const struct act_prob probability);
 static inline bool
-action_prob_unknown(const action_probability probability);
+action_prob_unknown(const struct act_prob probability);
 static inline bool
-action_prob_not_impl(const action_probability probability);
+action_prob_not_impl(const struct act_prob probability);
 
 /**************************************************************************
   Initialize the actions and the action enablers.
@@ -534,7 +534,7 @@ const char *action_get_ui_name_mnemonic(int action_id,
   the probability information.
 **************************************************************************/
 const char *action_prepare_ui_name(int action_id, const char* mnemonic,
-                                   const action_probability prob,
+                                   const struct act_prob prob,
                                    const char* custom)
 {
   static struct astring str = ASTRING_INIT;
@@ -568,22 +568,24 @@ const char *action_prepare_ui_name(int action_id, const char* mnemonic,
   /* How to interpret action probabilities like prob is documented in
    * fc_types.h */
   if (action_prob_is_signal(prob)) {
-    if (action_prob_unknown(prob)) {
-      /* Unknown because the player don't have the required knowledge to
-       * determine the probability of success for this action. */
+    fc_assert(action_prob_not_impl(prob)
+              || action_prob_not_relevant(prob));
 
-      /* TRANS: the chance of an action succeeding is unknown. */
-      probtxt = _("?%");
-    } else {
-      fc_assert(action_prob_not_impl(prob)
-                || action_prob_not_relevant(prob));
+    /* Unknown because of missing server support or should not exits. */
+    probtxt = NULL;
+  } else {
+    if (prob.min == prob.max) {
+      /* Only one probability in range. */
 
-      /* Unknown because of missing server support or should not exits. */
-      probtxt = NULL;
+      /* TRANS: the probability that an action will succeed. Given in
+       * percentage. Resolution is 0.5%. */
+      astr_set(&chance, _("%.1f%%"), (double)prob.max / 2);
+    } else {
+      /* TRANS: the interval (end points included) where the probability of
+       * the action's success is. Given in percentage. Resolution is 0.5%. */
+      astr_set(&chance, _("[%.1f%%, %.1f%%]"),
+               (double)prob.min / 2, (double)prob.max / 2);
     }
-  } else {
-    /* TRANS: the probability that an action will succeed. */
-    astr_set(&chance, _("%.1f%%"), (double)prob / 2);
     probtxt = astr_str(&chance);
   }
 
@@ -615,27 +617,31 @@ const char *action_prepare_ui_name(int action_id, const char* mnemonic,
   Suitable for a tool tip for the button that starts it.
 **************************************************************************/
 const char *action_get_tool_tip(const int action_id,
-                                const action_probability prob)
+                                const struct act_prob prob)
 {
   static struct astring tool_tip = ASTRING_INIT;
 
   if (action_prob_is_signal(prob)) {
-    if (action_prob_unknown(prob)) {
-      /* Missing in game knowledge. An in game action can change this. */
-      astr_set(&tool_tip,
-               _("Starting to do this may currently be impossible."));
-    } else {
-      fc_assert(action_prob_not_impl(prob));
-
-      /* Missing server support. No in game action will change this. */
-      astr_clear(&tool_tip);
-    }
-  } else {
-    /* The unit is 0.5% chance of success. */
-    const double converted = (double)prob / 2.0;
-
+    fc_assert(action_prob_not_impl(prob));
+
+    /* Missing server support. No in game action will change this. */
+    astr_clear(&tool_tip);
+  } else if (action_prob_unknown(prob)) {
+    /* Missing in game knowledge. An in game action can change this. */
+    astr_set(&tool_tip,
+             _("Starting to do this may currently be impossible."));
+  } else if (prob.min == prob.max) {
+    /* TRANS: action probability of success. Given in percentage.
+     * Resolution is 0.5%. */
     astr_set(&tool_tip, _("The probability of success is %.1f%%."),
-             converted);
+             (double)prob.max / 2.0);
+  } else {
+    astr_set(&tool_tip,
+             /* TRANS: action probability range (min to max). Given in
+              * percentage. Resolution is 0.5%. */
+             _("The probability of success is %.1f%%, %.1f%% or somewhere"
+               " in between."),
+             (double)prob.min / 2.0, (double)prob.max / 2.0);
   }
 
   return astr_str(&tool_tip);
@@ -2118,11 +2124,12 @@ tech_can_be_stolen(const struct player *actor_player,
 
   See diplomat_success_vs_defender() in server/diplomats.c
 **************************************************************************/
-static action_probability ap_dipl_battle_win(const struct unit *pattacker,
-                                             const struct unit *pdefender)
+static struct act_prob ap_dipl_battle_win(const struct unit *pattacker,
+                                          const struct unit *pdefender)
 {
   /* Keep unconverted until the end to avoid scaling each step */
   int chance;
+  struct act_prob out;
 
   /* Superspy always win */
   if (unit_has_type_flag(pdefender, UTYF_SUPERSPY)) {
@@ -2178,7 +2185,10 @@ static action_probability ap_dipl_battle_win(const struct unit *pattacker,
   }
 
   /* Convert to action probability */
-  return chance * 2;
+  out.min = chance * 2;
+  out.max = chance * 2;
+
+  return out;
 }
 
 /**************************************************************************
@@ -2186,8 +2196,8 @@ static action_probability ap_dipl_battle_win(const struct unit *pattacker,
 
   See diplomat_infiltrate_tile() in server/diplomats.c
 **************************************************************************/
-static action_probability ap_diplomat_battle(const struct unit *pattacker,
-                                             const struct unit *pvictim)
+static struct act_prob ap_diplomat_battle(const struct unit *pattacker,
+                                          const struct unit *pvictim)
 {
   unit_list_iterate(unit_tile(pvictim)->units, punit) {
     if (unit_owner(punit) == unit_owner(pattacker)) {
@@ -2226,7 +2236,7 @@ static action_probability ap_diplomat_battle(const struct unit *pattacker,
   player has and is willing to spend the money. This is so the player can
   figure out what his odds are before deciding to get the extra money.
 **************************************************************************/
-static action_probability
+static struct act_prob
 action_prob(const enum gen_action wanted_action,
             const struct player *actor_player,
             const struct city *actor_city,
@@ -2246,7 +2256,7 @@ action_prob(const enum gen_action wanted_action,
             const struct specialist *target_specialist)
 {
   int known;
-  action_probability chance;
+  struct act_prob chance;
 
   const struct unit_type *actor_unittype;
   const struct unit_type *target_unittype;
@@ -2408,15 +2418,13 @@ action_prob(const enum gen_action wanted_action,
     break;
   case ACTION_ATTACK:
     {
-      struct unit *defender_unit = get_defender(actor_unit,
-                                   target_tile);
+      struct unit *defender_unit = get_defender(actor_unit, target_tile);
 
       if (can_player_see_unit(actor_player, defender_unit)) {
         double unconverted = unit_win_chance(actor_unit, defender_unit);
 
-        /* Action is seen as disabled by anyone that relies on action
-         * probability if it is rounded down to 0%. */
-        chance = ceil((double)200 * unconverted);
+        chance.min = floor((double)200 * unconverted);
+        chance.max = ceil((double)200 * unconverted);
       } else if (known == TRI_YES) {
         known = TRI_MAYBE;
       }
@@ -2447,9 +2455,9 @@ action_prob(const enum gen_action wanted_action,
   Get the actor unit's probability of successfully performing the chosen
   action on the target city.
 **************************************************************************/
-action_probability action_prob_vs_city(const struct unit* actor_unit,
-                                       const int action_id,
-                                       const struct city* target_city)
+struct act_prob action_prob_vs_city(const struct unit* actor_unit,
+                                    const int action_id,
+                                    const struct city* target_city)
 {
   struct tile *actor_tile = unit_tile(actor_unit);
   struct impr_type *target_building;
@@ -2497,9 +2505,9 @@ action_probability action_prob_vs_city(const struct unit* actor_unit,
   Get the actor unit's probability of successfully performing the chosen
   action on the target unit.
 **************************************************************************/
-action_probability action_prob_vs_unit(const struct unit* actor_unit,
-                                       const int action_id,
-                                       const struct unit* target_unit)
+struct act_prob action_prob_vs_unit(const struct unit* actor_unit,
+                                    const int action_id,
+                                    const struct unit* target_unit)
 {
   struct tile *actor_tile = unit_tile(actor_unit);
 
@@ -2543,11 +2551,11 @@ action_probability action_prob_vs_unit(const struct unit* actor_unit,
   Get the actor unit's probability of successfully performing the chosen
   action on all units at the target tile.
 **************************************************************************/
-action_probability action_prob_vs_units(const struct unit* actor_unit,
-                                        const int action_id,
-                                        const struct tile* target_tile)
+struct act_prob action_prob_vs_units(const struct unit* actor_unit,
+                                     const int action_id,
+                                     const struct tile* target_tile)
 {
-  action_probability prob_all;
+  struct act_prob prob_all;
   struct tile *actor_tile = unit_tile(actor_unit);
 
   if (actor_unit == NULL || target_tile == NULL
@@ -2579,7 +2587,7 @@ action_probability action_prob_vs_units(const struct unit* actor_unit,
 
   prob_all = ACTPROB_CERTAIN;
   unit_list_iterate(target_tile->units, target_unit) {
-    action_probability prob_unit;
+    struct act_prob prob_unit;
 
     prob_unit = action_prob(action_id,
                             unit_owner(actor_unit),
@@ -2595,22 +2603,13 @@ action_probability action_prob_vs_units(const struct unit* actor_unit,
     if (!action_prob_possible(prob_unit)) {
       /* One unit makes it impossible for all units. */
       return ACTPROB_IMPOSSIBLE;
-    } else if (action_prob_is_signal(prob_unit)) {
-      if (action_prob_not_impl(prob_unit)) {
-        /* Not implemented dominates all except impossible. */
-        prob_all = ACTPROB_NOT_IMPLEMENTED;
-      } else {
-        fc_assert(action_prob_unknown(prob_unit));
-
-        if (!action_prob_not_impl(prob_all)) {
-          /* Not known dominates all except not implemented and
-           * impossible. */
-          prob_all = ACTPROB_NOT_KNOWN;
-        }
-      }
+    } else if (action_prob_not_impl(prob_unit)) {
+      /* Not implemented dominates all except impossible. */
+      prob_all = ACTPROB_NOT_IMPLEMENTED;
     } else {
       fc_assert_msg(!action_prob_is_signal(prob_unit),
-                    "Invalid probability %d", prob_unit);
+                    "Invalid probability [%d, %d]",
+                    prob_unit.min, prob_unit.max);
 
       if (action_prob_is_signal(prob_all)) {
         /* Special values dominate regular values. */
@@ -2619,7 +2618,8 @@ action_probability action_prob_vs_units(const struct unit* actor_unit,
 
       /* Probability against all target units considered until this moment
        * and the probability against this target unit. */
-      prob_all = (prob_all * prob_unit) / 200;
+      prob_all.min = (prob_all.min * prob_unit.min) / 200;
+      prob_all.max = (prob_all.max * prob_unit.max) / 200;
       break;
     }
   } unit_list_iterate_end;
@@ -2632,9 +2632,9 @@ action_probability action_prob_vs_units(const struct unit* actor_unit,
   Get the actor unit's probability of successfully performing the chosen
   action on the target tile.
 **************************************************************************/
-action_probability action_prob_vs_tile(const struct unit* actor_unit,
-                                       const int action_id,
-                                       const struct tile* target_tile)
+struct act_prob action_prob_vs_tile(const struct unit* actor_unit,
+                                    const int action_id,
+                                    const struct tile* target_tile)
 {
   struct tile *actor_tile = unit_tile(actor_unit);
 
@@ -2676,8 +2676,8 @@ action_probability action_prob_vs_tile(const struct unit* actor_unit,
   Get the actor unit's probability of successfully performing the chosen
   action on itself.
 **************************************************************************/
-action_probability action_prob_self(const struct unit* actor_unit,
-                                    const int action_id)
+struct act_prob action_prob_self(const struct unit* actor_unit,
+                                 const int action_id)
 {
   struct tile *actor_tile = unit_tile(actor_unit);
 
@@ -2717,50 +2717,61 @@ action_probability action_prob_self(const struct unit* actor_unit,
 /**************************************************************************
   Returns the impossible action probability.
 **************************************************************************/
-action_probability action_prob_new_impossible(void)
+struct act_prob action_prob_new_impossible(void)
 {
-  return 0;
+  struct act_prob out = { 0, 0 };
+
+  return out;
 }
 
 /**************************************************************************
   Returns the certain action probability.
 **************************************************************************/
-action_probability action_prob_new_certain(void)
+struct act_prob action_prob_new_certain(void)
 {
-  return 200;
+  struct act_prob out = { 200, 200 };
+
+  return out;
 }
 
 /**************************************************************************
   Returns the n/a action probability.
 **************************************************************************/
-action_probability action_prob_new_not_relevant(void)
+struct act_prob action_prob_new_not_relevant(void)
 {
-  return 253;
+  struct act_prob out = { 253, 0};
+
+  return out;
 }
 
 /**************************************************************************
   Returns the "not implemented" action probability.
 **************************************************************************/
-action_probability action_prob_new_not_impl(void)
+struct act_prob action_prob_new_not_impl(void)
 {
-  return 254;
+  struct act_prob out = { 254, 0 };
+
+  return out;
 }
 
 /**************************************************************************
   Returns the "user don't know" action probability.
 **************************************************************************/
-action_probability action_prob_new_unknown(void)
+struct act_prob action_prob_new_unknown(void)
 {
-  return 255;
+  struct act_prob out = { 0, 200 };
+
+  return out;
 }
 
 /**************************************************************************
   Returns TRUE iff the given action probability belongs to an action that
   may be possible.
 **************************************************************************/
-bool action_prob_possible(const action_probability probability)
+bool action_prob_possible(const struct act_prob probability)
 {
-  return ACTPROB_IMPOSSIBLE != probability && ACTPROB_NA != probability;
+  return (0 < probability.max
+          || action_prob_not_impl(probability));
 }
 
 /**************************************************************************
@@ -2768,9 +2779,9 @@ bool action_prob_possible(const action_probability probability)
   an action probability.
 **************************************************************************/
 static inline bool
-action_prob_not_relevant(const action_probability probability)
+action_prob_not_relevant(const struct act_prob probability)
 {
-  return ACTPROB_NA == probability;
+  return probability.min == 253 && probability.max == 0;
 }
 
 /**************************************************************************
@@ -2778,9 +2789,9 @@ action_prob_not_relevant(const action_probability probability)
   for finding this action probability currently is missing from Freeciv.
 **************************************************************************/
 static inline bool
-action_prob_not_impl(const action_probability probability)
+action_prob_not_impl(const struct act_prob probability)
 {
-  return ACTPROB_NOT_IMPLEMENTED == probability;
+  return probability.min == 254 && probability.max == 0;
 }
 
 /**************************************************************************
@@ -2792,9 +2803,9 @@ action_prob_not_impl(const action_probability probability)
  to later gain access to this game state.
 **************************************************************************/
 static inline bool
-action_prob_unknown(const action_probability probability)
+action_prob_unknown(const struct act_prob probability)
 {
-  return ACTPROB_NOT_KNOWN == probability;
+  return probability.min == 0 && probability.max == 200;
 }
 
 /**************************************************************************
@@ -2802,9 +2813,18 @@ action_prob_unknown(const action_probability probability)
   signal value rather than a regular action probability value.
 **************************************************************************/
 static inline bool
-action_prob_is_signal(const action_probability probability)
+action_prob_is_signal(const struct act_prob probability)
+{
+  return probability.max < probability.min;
+}
+
+/**************************************************************************
+  Returns TRUE iff ap1 and ap2 are equal.
+**************************************************************************/
+bool are_action_probabilitys_equal(const struct act_prob *ap1,
+                                   const struct act_prob *ap2)
 {
-  return probability < 0 || probability > 200;
+  return ap1->min == ap2->min && ap1->max == ap2->max;
 }
 
 /**************************************************************************
diff --git a/common/actions.h b/common/actions.h
index b7fb882..2a792f9 100644
--- a/common/actions.h
+++ b/common/actions.h
@@ -314,10 +314,10 @@ const char *action_get_ui_name(int action_id);
 const char *action_get_ui_name_mnemonic(int action_id,
                                         const char* mnemonic);
 const char *action_prepare_ui_name(int action_id, const char* mnemonic,
-                                   const action_probability prob,
+                                   const struct act_prob prob,
                                    const char *custom);
 const char *action_get_tool_tip(const int action_id,
-                                const action_probability prob);
+                                const struct act_prob prob);
 
 struct action_enabler_list *
 action_enablers_for_action(enum gen_action action);
@@ -354,35 +354,38 @@ bool is_action_enabled_unit_on_tile(const enum gen_action wanted_action,
 bool is_action_enabled_unit_on_self(const enum gen_action wanted_action,
                                     const struct unit *actor_unit);
 
-action_probability action_prob_vs_city(const struct unit* actor,
-                                       const int action_id,
-                                       const struct city* victim);
+struct act_prob action_prob_vs_city(const struct unit* actor,
+                                    const int action_id,
+                                    const struct city* victim);
 
-action_probability action_prob_vs_unit(const struct unit* actor,
-                                       const int action_id,
-                                       const struct unit* victim);
+struct act_prob action_prob_vs_unit(const struct unit* actor,
+                                    const int action_id,
+                                    const struct unit* victim);
 
-action_probability action_prob_vs_units(const struct unit* actor,
-                                        const int action_id,
-                                        const struct tile* victims);
+struct act_prob action_prob_vs_units(const struct unit* actor,
+                                     const int action_id,
+                                     const struct tile* victims);
 
-action_probability action_prob_vs_tile(const struct unit *actor,
-                                       const int action_id,
-                                       const struct tile *victims);
+struct act_prob action_prob_vs_tile(const struct unit *actor,
+                                    const int action_id,
+                                    const struct tile *victims);
 
-action_probability action_prob_self(const struct unit *actor,
-                                    const int action_id);
+struct act_prob action_prob_self(const struct unit *actor,
+                                 const int action_id);
 
-bool action_prob_possible(const action_probability probability);
+bool action_prob_possible(const struct act_prob probability);
 
-action_probability action_prob_new_impossible(void);
-action_probability action_prob_new_not_relevant(void);
-action_probability action_prob_new_not_impl(void);
-action_probability action_prob_new_unknown(void);
-action_probability action_prob_new_certain(void);
+bool are_action_probabilitys_equal(const struct act_prob *ap1,
+                                   const struct act_prob *ap2);
+
+struct act_prob action_prob_new_impossible(void);
+struct act_prob action_prob_new_not_relevant(void);
+struct act_prob action_prob_new_not_impl(void);
+struct act_prob action_prob_new_unknown(void);
+struct act_prob action_prob_new_certain(void);
 
 /* Special action probability values. Documented in fc_types.h's
- * definition of action_probability. */
+ * definition of struct act_prob. */
 #define ACTPROB_IMPOSSIBLE action_prob_new_impossible()
 #define ACTPROB_CERTAIN action_prob_new_certain()
 #define ACTPROB_NA action_prob_new_not_relevant()
diff --git a/common/fc_types.h b/common/fc_types.h
index caee40a..cdd22d8 100644
--- a/common/fc_types.h
+++ b/common/fc_types.h
@@ -750,37 +750,46 @@ FC_STATIC_ASSERT(ERM_COUNT < 8, extra_rmcauses_over_limit);
  * Action probability
  *
  * An action probability is the probability that an action will be
- * successful under the given circumstances. It goes from 0% to 100%.
+ * successful under the given circumstances. It is an interval that
+ * includes the end points. An end point goes from 0% to 100%.
  * Alternatively it can signal a special case.
  *
- * Values from 0 up to and including 200 are to be understood as the chance
- * of success measured in half percentage points. The value 3 indicates that
- * the chance is 1.5%. The value 10 indicates that the chance is 5%. The
- * probability may have been rounded to the nearest half percentage point.
+ * End point values from 0 up to and including 200 should be understood as
+ * the chance of success measured in half percentage points. In other words:
+ * The value 3 indicates that the chance is 1.5%. The value 10 indicates
+ * that the chance is 5%. The probability of a minimum may be rounded down
+ * to the nearest half percentage point. The probability of a maximum may
+ * be rounded up to the nearest half percentage point.
  *
- * Values above 200 (100%) up to and including 255 are special cases. All
- * special cases should be declared and documented below. A value in this
- * range should be considered a bug if it isn't. If a special value for
+ * Values with a higher minimum than maximum are special case values. All
+ * special cases should be declared and documented below. An undocumented
+ * value in this range should be considered a bug. If a special value for
  * internal use is needed please avoid the range from and including 0 up
  * to and including 255.
  *
- * 0   ACTPROB_IMPOSSIBLE is another way of saying that the probability
- *     is 0%. It isn't really a special value since it is in range.
+ * [0, 0]     ACTPROB_IMPOSSIBLE is another way of saying that the
+ *            probability is 0%. It isn't really a special value since it
+ *            is in range.
  *
- * 200 ACTPROB_CERTAIN is another way of saying that the probability
- *     is 100%. It isn't really a special value since it is in range.
+ * [200, 200] ACTPROB_CERTAIN is another way of saying that the probability
+ *            is 100%. It isn't really a special value since it is in range.
  *
- * 253 ACTPROB_NA indicates that no probability should exist.
+ * [253, 0]   ACTPROB_NA indicates that no probability should exist.
  *
- * 254 ACTPROB_NOT_IMPLEMENTED indicates that support for finding this
- *     probability currently is missing.
+ * [254, 0]   ACTPROB_NOT_IMPLEMENTED indicates that support for finding
+ *            this probability currently is missing.
  *
- * 255 ACTPROB_NOT_KNOWN indicates that the player don't know enough to
- *     find out. It is caused by the probability depending on a rule that
- *     depends on game state the player don't have access to. It may be
- *     possible for the player to later gain access to this game state.
+ * [0, 200]   ACTPROB_NOT_KNOWN indicates that the player don't know enough
+ *            to find out. It is caused by the probability depending on a
+ *            rule that depends on game state the player don't have access
+ *            to. It may be possible for the player to later gain access to
+ *            this game state. It isn't really a special value since it is
+ *            in range.
  */
-typedef int action_probability;
+struct act_prob {
+  int min;
+  int max;
+};
 
 #ifdef __cplusplus
 }
diff --git a/common/networking/dataio_json.c b/common/networking/dataio_json.c
index 8891ec3..948b803 100644
--- a/common/networking/dataio_json.c
+++ b/common/networking/dataio_json.c
@@ -501,6 +501,44 @@ bool dio_get_requirement_json(json_t *json_packet,
 }
 
 /**************************************************************************
+  De-serialize an action probability.
+**************************************************************************/
+bool dio_get_action_probability_json(json_t *json_packet,
+                                     const struct plocation *location,
+                                     struct act_prob *prob)
+{
+  struct plocation ap_field;
+
+  /* Find the action probability object. */
+  json_t *action_probability = plocation_read_data(json_packet, location);
+  if (!action_probability) {
+    log_error("ERROR: Unable to get action probability from location: %s",
+              plocation_name(location));
+    return FALSE;
+  }
+
+  /* Find the action probability object fields and translate their
+   * values. */
+  ap_field = *plocation_field_new("min");
+  if (!dio_get_uint8_json(action_probability, &ap_field, &prob->min)) {
+    log_error("ERROR: Unable to get part of action probability "
+              "from location: %s",
+              plocation_name(location));
+    return FALSE;
+  }
+
+  ap_field.name = "max";
+  if (!dio_get_uint8_json(action_probability, &ap_field, &prob->max)) {
+    log_error("ERROR: Unable to get part of action probability "
+              "from location: %s",
+              plocation_name(location));
+    return FALSE;
+  }
+
+  return TRUE;
+}
+
+/**************************************************************************
   Create an empty field array.
 **************************************************************************/
 void dio_put_farray_json(struct json_data_out *dout,
@@ -680,6 +718,25 @@ void dio_put_requirement_json(struct json_data_out *dout,
 }
 
 /**************************************************************************
+  Serialize an action probability.
+**************************************************************************/
+void dio_put_action_probability_json(struct json_data_out *dout,
+                                     const struct plocation *location,
+                                     const struct act_prob *prob)
+{
+  /* Create the action probability object. */
+  json_t *action_probability = json_object();
+
+  /* Write the action probability values to the fields of the action
+   * probability object. */
+  json_object_set(action_probability, "min", json_integer(prob->min));
+  json_object_set(action_probability, "max", json_integer(prob->max));
+
+  /* Put the action probability object in the packet. */
+  plocation_write_data(dout->json, location, action_probability);
+}
+
+/**************************************************************************
   Receive bool value.
 **************************************************************************/
 bool dio_get_bool8_json(json_t *json_packet,
diff --git a/common/networking/dataio_json.h b/common/networking/dataio_json.h
index 369a952..bde6305 100644
--- a/common/networking/dataio_json.h
+++ b/common/networking/dataio_json.h
@@ -80,6 +80,9 @@ bool dio_get_worklist_json(json_t *json_packet,
 bool dio_get_requirement_json(json_t *json_packet,
                               const struct plocation *location,
                               struct requirement *preq);
+bool dio_get_action_probability_json(json_t *json_packet,
+                                     const struct plocation *location,
+                                     struct act_prob *prob);
 
 bool dio_get_uint8_vec8_json(json_t *json_packet,
                              const struct plocation *location,
@@ -153,6 +156,9 @@ void dio_put_worklist_json(struct json_data_out *dout,
 void dio_put_requirement_json(struct json_data_out *dout,
                               const struct plocation *location,
                               const struct requirement *preq);
+void dio_put_action_probability_json(struct json_data_out *dout,
+                                     const struct plocation *location,
+                                     const struct act_prob *prob);
 
 void dio_put_uint8_vec8_json(struct json_data_out *dout,
                              const struct plocation *location,
diff --git a/common/networking/dataio_raw.c b/common/networking/dataio_raw.c
index fb2d6c7..643b2eb 100644
--- a/common/networking/dataio_raw.c
+++ b/common/networking/dataio_raw.c
@@ -1005,6 +1005,36 @@ bool dio_get_uint16_vec8_raw(struct data_in *din, int **values, int stop_value)
 }
 
 /**************************************************************************
+  De-serialize an action probability.
+**************************************************************************/
+bool dio_get_action_probability_raw(struct data_in *din,
+                                    struct act_prob *aprob)
+{
+  int min, max;
+
+  if (!dio_get_uint8_raw(din, &min)
+      || !dio_get_uint8_raw(din, &max)) {
+    log_packet("Got a bad action probability");
+    return FALSE;
+  }
+
+  aprob->min = min;
+  aprob->max = max;
+
+  return TRUE;
+}
+
+/**************************************************************************
+  Serialize an action probability.
+**************************************************************************/
+void dio_put_action_probability_raw(struct raw_data_out *dout,
+                                    const struct act_prob *aprob)
+{
+  dio_put_uint8_raw(dout, aprob->min);
+  dio_put_uint8_raw(dout, aprob->max);
+}
+
+/**************************************************************************
   De-serialize a requirement.
 **************************************************************************/
 bool dio_get_requirement_raw(struct data_in *din, struct requirement *preq)
diff --git a/common/networking/dataio_raw.h b/common/networking/dataio_raw.h
index d350cdd..7acb7e9 100644
--- a/common/networking/dataio_raw.h
+++ b/common/networking/dataio_raw.h
@@ -23,6 +23,7 @@ extern "C" {
 
 struct worklist;
 struct requirement;
+struct act_prob;
 
 struct data_in {
   const void *src;
@@ -147,6 +148,9 @@ bool dio_get_worklist_raw(struct data_in *din, struct worklist *pwl)
     fc__attribute((nonnull (2)));
 bool dio_get_requirement_raw(struct data_in *din, struct requirement *preq)
     fc__attribute((nonnull (2)));
+bool dio_get_action_probability_raw(struct data_in *din,
+                                    struct act_prob *aprob)
+    fc__attribute((nonnull (2)));
 
 bool dio_get_uint8_vec8_raw(struct data_in *din, int **values, int stop_value)
     fc__attribute((nonnull (2)));
@@ -191,6 +195,8 @@ void dio_put_unit_list_raw(struct raw_data_out *dout, const int *value);
 void dio_put_building_list_raw(struct raw_data_out *dout, const int *value);
 void dio_put_worklist_raw(struct raw_data_out *dout, const struct worklist *pwl);
 void dio_put_requirement_raw(struct raw_data_out *dout, const struct requirement *preq);
+void dio_put_action_probability_raw(struct raw_data_out *dout,
+                                    const struct act_prob *aprob);
 
 void dio_put_uint8_vec8_raw(struct raw_data_out *dout, int *values, int stop_value);
 void dio_put_uint16_vec8_raw(struct raw_data_out *dout, int *values, int stop_value);
diff --git a/common/networking/packets.def b/common/networking/packets.def
index 10b46b6..6e04b15 100644
--- a/common/networking/packets.def
+++ b/common/networking/packets.def
@@ -197,6 +197,7 @@ type UINT32             = uint32(int)
 # typedefs for arrays/structs
 type MEMORY             = memory(unsigned char)
 type REQUIREMENT        = requirement(struct requirement)
+type ACT_PROB           = action_probability(struct act_prob)
 type STRING             = string(char)
 # A string vector encoded to a string outside the packet and field system.
 # Marking it this way is useful as documentation. The marking can also be
@@ -285,7 +286,6 @@ type EXTRA              = SINT8
 type ACTION_TGT         = SINT16
 type BASE               = sint8(Base_type_id)
 type ROAD               = sint8(Road_type_id)
-type ACT_PROB           = uint8(action_probability)
 type CITY               = UINT16
 # city id, with space for special values
 type CITYSPE            = SINT32
diff --git a/common/unit.h b/common/unit.h
index 25fe8a7..7c1bc41 100644
--- a/common/unit.h
+++ b/common/unit.h
@@ -194,7 +194,7 @@ struct unit {
       bool asking_city_name;
 
       /* Used in a follow up question about a selected action. */
-      action_probability *act_prob_cache;
+      struct act_prob *act_prob_cache;
     } client;
 
     struct {
diff --git a/server/unithand.c b/server/unithand.c
index 6666df9..8ed98fd 100644
--- a/server/unithand.c
+++ b/server/unithand.c
@@ -1197,7 +1197,7 @@ void handle_unit_get_actions(struct connection *pc,
   struct player *actor_player;
   struct unit *actor_unit;
   struct tile *target_tile;
-  action_probability probabilities[ACTION_COUNT];
+  struct act_prob probabilities[ACTION_COUNT];
 
   struct unit *target_unit;
   struct city *target_city;
diff --git a/server/unittools.c b/server/unittools.c
index 63aa05d..664ed77 100644
--- a/server/unittools.c
+++ b/server/unittools.c
@@ -3921,7 +3921,7 @@ bool execute_orders(struct unit *punit, const bool fresh)
   struct tile *dst_tile;
   struct city *tgt_city;
   struct unit *tgt_unit;
-  action_probability prob;
+  struct act_prob prob;
   int tgt_id;
   bool performed;
   const char *name;
