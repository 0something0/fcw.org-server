diff --git a/ai/default/aisettler.c b/ai/default/aisettler.c
index cf17674..371346b 100644
--- a/ai/default/aisettler.c
+++ b/ai/default/aisettler.c
@@ -1242,9 +1242,8 @@ static bool dai_do_build_city(struct ai_type *ait, struct player *pplayer,
               player_name(pplayer), TILE_XY(ptile));
     return FALSE;
   }
-  handle_unit_do_action(pplayer, punit->id, ptile->index,
-                        0, city_name_suggestion(pplayer, ptile),
-                        ACTION_FOUND_CITY);
+  ai_unit_build_city(pplayer, punit->id,
+                     city_name_suggestion(pplayer, ptile));
   pcity = tile_city(ptile);
   if (!pcity) {
     log_error("%s: Failed to build city at (%d, %d)",
diff --git a/configure.ac b/configure.ac
index 1597d67..e62315d 100644
--- a/configure.ac
+++ b/configure.ac
@@ -751,6 +751,11 @@ if test "x$thread_cond" != "xtrue" ; then
   feature_thr_cond=missing
 fi
 
+AM_PATH_GLIB_2_0(2.29.0,,
+AC_MSG_ERROR(Test for Glib failed. See the file 'INSTALL' for help))
+
+LIBS="$LIBS $GLIB_LIBS"
+
 dnl Check and choose clients
 if test "x$client" != "xno"; then
 
@@ -1357,7 +1362,7 @@ AC_CONFIG_COMMANDS([fc_default-5],[[if test x`uname -s` = xBeOS ; then
      fi
    fi]],[[]])
 
-CFLAGS="$EXTRA_DEBUG_CFLAGS $CFLAGS"
+CFLAGS="$EXTRA_DEBUG_CFLAGS $CFLAGS $GLIB_CFLAGS"
 CXXFLAGS="$EXTRA_DEBUG_CXXFLAGS $CXXFLAGS"
 LDFLAGS="$EXTRA_DEBUG_LDFLAGS $LDFLAGS"
 
diff --git a/server/unithand.c b/server/unithand.c
index e5e294c..0cda06c 100644
--- a/server/unithand.c
+++ b/server/unithand.c
@@ -19,9 +19,12 @@
 #include <stdlib.h>
 #include <string.h>
 
+#include <glib.h>
+
 /* utility */
 #include "astring.h"
 #include "fcintl.h"
+#include "fciconv.h"
 #include "mem.h"
 #include "rand.h"
 #include "shared.h"
@@ -1171,10 +1174,20 @@ void handle_unit_do_action(struct player *pplayer,
   case ACTION_FOUND_CITY:
     if (target_tile) {
       if (is_action_enabled_unit_on_tile(action_type,
                                           actor_unit, target_tile)) {
+        char* unescaped_text;
+
         ACTION_STARTED_UNIT_TILE(action_type, actor_unit, target_tile);
 
-        return city_build(pplayer, actor_unit, name);
+        /* Unescape city name, which has been escaped in Javascript. */
+        unescaped_text = g_uri_unescape_string(name, NULL);
+
+        if (unescaped_text) {
+          return city_build(pplayer, actor_unit, unescaped_text);
+          g_free(unescaped_text);
+        } else {
+          return FALSE;
+        }
       } else if (unit_can_do_action(actor_unit, ACTION_FOUND_CITY)
                  && !unit_can_build_city(actor_unit)) {
         /* Keep the rules like they was before action enabler control:
@@ -1561,6 +1572,36 @@ static void city_build(struct player *pplayer, struct unit *punit,
 }
 
 /**************************************************************************
+  City building function called from inside server itself - notably city
+  name has not been transfered over network so network encodings and such
+  do not apply.
+**************************************************************************/
+void ai_unit_build_city(struct player *pplayer, int unit_id, const char *name)
+{
+  struct unit *punit = player_unit_by_number(pplayer, unit_id);
+  char* escaped_text;
+
+  if (NULL == punit) {
+    /* Shouldn't happen */
+    log_error("ai_unit_build_city()"
+              " invalid unit %d",
+              unit_id);
+    return;
+  }
+
+  /* Escape city name so it can be treated like if it had been escaped in
+   * Javascript. */
+  escaped_text = g_uri_escape_string(name, NULL, TRUE);
+
+  if (escaped_text) {
+    handle_unit_do_action(pplayer, unit_id, unit_tile(punit)->index,
+                          0, name, ACTION_FOUND_CITY);
+    g_free(escaped_text);
+  }
+
+}
+
+/**************************************************************************
   Handle change in unit activity.
 **************************************************************************/
 static void handle_unit_change_activity_real(struct player *pplayer,
diff --git a/server/unithand.h b/server/unithand.h
index 52020c4..f2c452c 100644
--- a/server/unithand.h
+++ b/server/unithand.h
@@ -26,6 +26,7 @@ void unit_change_homecity_handling(struct unit *punit, struct city *new_pcity);
 
 bool unit_move_handling(struct unit *punit, struct tile *pdesttile,
                         bool igzoc, bool move_diplomat_city);
+void ai_unit_build_city(struct player *pplayer, int unit_id, const char *name);
 
 void city_add_or_build_error(struct player *pplayer, struct unit *punit,
                              enum unit_add_build_city_result res);
diff --git a/server/unittools.c b/server/unittools.c
index ca86109..858b279 100644
--- a/server/unittools.c
+++ b/server/unittools.c
@@ -19,6 +19,8 @@
 #include <stdlib.h>
 #include <string.h>
 
+#include <glib.h>
+
 /* utility */
 #include "bitvector.h"
 #include "fcintl.h"
@@ -3765,7 +3767,7 @@ bool execute_orders(struct unit *punit, const bool fresh)
   action_probability prob;
   int tgt_id;
   bool performed;
-  const char *name;
+  char *name;
   bool res, last_order;
   int unitid = punit->id;
   struct player *pplayer = unit_owner(punit);
@@ -4110,7 +4112,7 @@ bool execute_orders(struct unit *punit, const bool fresh)
 
       if (order.action == ACTION_FOUND_CITY) {
         /* This action needs a name. */
-        name = city_name_suggestion(pplayer, unit_tile(punit));
+        name = g_uri_escape_string(city_name_suggestion(pplayer, unit_tile(punit)), NULL, TRUE);
       } else {
         /* This action doesn't need a name. */
         name = "";
@@ -4122,6 +4124,10 @@ bool execute_orders(struct unit *punit, const bool fresh)
                                       0, name,
                                       order.action);
 
+      if (order.action == ACTION_FOUND_CITY) {
+        g_free(name);
+      }
+
       if (!player_unit_by_number(pplayer, unitid)) {
         /* The unit "died" while performing the action. */
         return FALSE;
