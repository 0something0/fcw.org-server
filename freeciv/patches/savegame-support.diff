diff -Nurd -X.diff_ignore freeciv/configure.ac freeciv/configure.ac
--- freeciv/configure.ac	2012-05-19 04:30:07.000000000 +0300
+++ freeciv/configure.ac	2012-05-19 05:17:20.000000000 +0300
@@ -826,7 +826,7 @@
   DEFAULT_SCENARIO_PATH=".;data/scenario;~/.freeciv/scenario;$datadir/freeciv/scenario"
 else
   DEFAULT_DATA_PATH=".:data:~/.freeciv/$DATASUBDIR:$datadir/freeciv"
-  DEFAULT_SAVE_PATH=".:~/.freeciv/saves"
+  DEFAULT_SAVE_PATH=".:~/.freeciv/saves:/mnt/savegames"
   DEFAULT_SCENARIO_PATH=".:data/scenario:~/.freeciv/scenarios:$datadir/freeciv/scenario"
 fi
 CPPFLAGS="$CPPFLAGS -DDEFAULT_DATA_PATH=\"\\\"$DEFAULT_DATA_PATH\\\"\""
diff -Nurd -X.diff_ignore freeciv/server/commands.c freeciv/server/commands.c
--- freeciv/server/commands.c	2012-05-19 03:14:33.000000000 +0300
+++ freeciv/server/commands.c	2012-05-19 04:53:00.000000000 +0300
@@ -414,7 +414,7 @@
       "all cities and units etc.  Use with care!"),
    VCF_NONE, 50
   },
-  {"save",	ALLOW_ADMIN,
+  {"save",	ALLOW_CTRL,
    /* TRANS: translate text between <> only */
    N_("save\n"
       "save <file-name>"),
diff -Nurd -X.diff_ignore freeciv/server/meta.h freeciv/server/meta.h
--- freeciv/server/meta.h	2012-05-19 04:44:47.000000000 +0300
+++ freeciv/server/meta.h	2012-05-19 04:56:43.000000000 +0300
@@ -17,7 +17,7 @@
 
 #define DEFAULT_META_SERVER_NO_SEND  TRUE
 #define DEFAULT_META_SERVER_ADDR     META_URL /* config.h */
-#define METASERVER_REFRESH_INTERVAL   (60)
+#define METASERVER_REFRESH_INTERVAL   (20)
 #define METASERVER_MIN_UPDATE_INTERVAL 7   /* not too short, not too long */
 
 enum meta_flag {
diff -Nurd -X.diff_ignore freeciv/server/report.c freeciv/server/report.c
--- freeciv/server/report.c	2012-05-19 03:14:33.000000000 +0300
+++ freeciv/server/report.c	2012-05-19 04:56:43.000000000 +0300
@@ -933,7 +933,9 @@
 **************************************************************************/
 void log_civ_score(void)
 {
-  static const char logname[] = "civscore.log";
+  char logname[600];
+  char tmpname[600];
+
   static FILE *fp = NULL;
   static bool disabled = FALSE;
   static char player_names[MAX_NUM_PLAYERS +
@@ -941,6 +943,21 @@
   static char *player_name_ptrs[MAX_NUM_PLAYERS + MAX_NUM_BARBARIANS];
   static int last_turn = -1;
 
+ /* put this file in the same place we put savegames */
+  my_snprintf(logname, sizeof(logname),
+              "civscore-%04d.log", srvarg.port);
+
+  /* Ensure the saves directory exists. */
+  make_dir(srvarg.saves_pathname);
+
+  sz_strlcpy(tmpname, srvarg.saves_pathname);
+  if (tmpname[0] != '\0') {
+    sz_strlcat(tmpname, "/");
+  }
+  sz_strlcat(tmpname, logname);
+  sz_strlcpy(logname, tmpname);
+
+
   /* 
    * Add new tags only at end of this list. Maintaining the order of
    * old tags is critical.
diff -Nurd -X.diff_ignore freeciv/server/savegame.c freeciv/server/savegame.c
--- freeciv/server/savegame.c	2012-05-19 03:14:33.000000000 +0300
+++ freeciv/server/savegame.c	2012-05-19 04:53:00.000000000 +0300
@@ -418,8 +418,9 @@
     break;
   }
 
-  assert(0);
-  return '?';
+  // FIXME: should not get here!
+  //assert(0);
+  return 'a';
 }
 
 /****************************************************************************
diff -Nurd -X.diff_ignore freeciv/server/score.c freeciv/server/score.c
--- freeciv/server/score.c	2012-05-19 03:14:33.000000000 +0300
+++ freeciv/server/score.c	2012-05-19 04:56:43.000000000 +0300
@@ -387,13 +387,13 @@
   int watercol[3] = {0,0,255}; /* blue */
   int landcol[3] =  {0,0,0};   /* black */
 
-  if (!srvarg.save_ppm) {
+  /*if (!srvarg.save_ppm) {
     return;
-  }
+  }*/
 
   /* put this file in the same place we put savegames */
   my_snprintf(filename, sizeof(filename),
-              "%s%+05d.int.ppm", game.server.save_name, game.info.year);
+              "overviewmap-%04d.ppm", srvarg.port);
 
   /* Ensure the saves directory exists. */
   make_dir(srvarg.saves_pathname);
diff -Nurd -X.diff_ignore freeciv/server/srv_main.c freeciv/server/srv_main.c
--- freeciv/server/srv_main.c	2012-05-19 04:30:40.000000000 +0300
+++ freeciv/server/srv_main.c	2012-05-19 05:11:06.000000000 +0300
@@ -1002,6 +1002,13 @@
 {
   int nb, year;
   const char *year_suffix;
+  time_t     now;
+  struct tm  *ts;
+  char buff[80];
+
+  now = time(0); 
+  ts = localtime(&now);
+  strftime(buff, sizeof(buff), "%Y-%m-%d-%H-%M-%S", ts);
 
   if (game.info.year < 0) {
     year = -game.info.year;
@@ -1014,13 +1021,14 @@
   /* NB: If you change the format here, be sure to update the above
    * function comment and the help text for the 'savename' setting. */
   if (reason == NULL) {
-    nb = my_snprintf(buf, buflen, "%s-T%03d-Y%d%s%s",
+    nb = my_snprintf(buf, buflen, "%s-T%03d-Y%d%s%s-%s",
                      game.server.save_name, game.info.turn, year,
-                     year_suffix, is_auto_save ? "" : "m");
+                     year_suffix, is_auto_save ? "" : "m",
+		     buff);
   } else {
-    nb = my_snprintf(buf, buflen, "%s-%s-T%03d-Y%d%s%s",
+    nb = my_snprintf(buf, buflen, "%s-%s-T%03d-Y%d%s%s-%s",
                      game.server.save_name, reason, game.info.turn, year,
-                     year_suffix, is_auto_save ? "" : "m");
+                     year_suffix, is_auto_save ? "" : "m", buff);
   }
 
   return nb;
@@ -1033,18 +1041,19 @@
 Note that if !HAVE_LIBZ, then game.info.save_compress_level should never
 become non-zero, so no need to check HAVE_LIBZ explicitly here as well.
 **************************************************************************/
-void save_game(char *orig_filename, const char *save_reason, bool scenario)
+void save_game(char *username, const char *save_reason, bool scenario)
 {
   char filepath[600];
+  char genname[600];
   char *dot, *filename;
   struct section_file *file;
   struct timer *timer_cpu, *timer_user;
 
-  if (!orig_filename) {
-    filepath[0] = '\0';
-    filename = filepath;
+  if (!username) {
+    con_write(C_FAIL, _("Failed saving game. Missing filename."));
+    return;
   } else {
-    sz_strlcpy(filepath, orig_filename);
+    sz_strlcpy(filepath, username);
     if ((filename = strrchr(filepath, '/'))) {
       filename++;
     } else {
@@ -1064,11 +1073,7 @@
     }
   }
 
-  /* If orig_filename is NULL or empty, use a generated default name. */
-  if (filename[0] == '\0'){
-    generate_save_name(filename, sizeof(filepath) + filepath - filename,
-                       FALSE, NULL);
-  }
+  generate_save_name(genname, sizeof(genname), FALSE, NULL);
 
   timer_cpu = new_timer_start(TIMER_CPU, TIMER_ACTIVE);
   timer_user = new_timer_start(TIMER_USER, TIMER_ACTIVE);
@@ -1077,20 +1082,20 @@
   game_save(file, save_reason, scenario);
 
   /* Append ".sav" to filename. */
-  sz_strlcat(filepath, ".sav");
+  sz_strlcat(genname, ".sav");
 
   if (game.info.save_compress_level > 0) {
     switch (game.info.save_compress_type) {
 #ifdef HAVE_LIBZ
     case FZ_ZLIB:
       /* Append ".gz" to filename. */
-      sz_strlcat(filepath, ".gz");
+      sz_strlcat(genname, ".gz");
       break;
 #endif
 #ifdef HAVE_LIBBZ2
     case FZ_BZIP2:
       /* Append ".bz2" to filename. */
-      sz_strlcat(filepath, ".bz2");
+      sz_strlcat(genname, ".bz2");
       break;
 #endif
     case FZ_PLAIN:
@@ -1110,24 +1115,28 @@
 
     if (!scenario) {
       /* Ensure the saves directory exists. */
-      make_dir(srvarg.saves_pathname);
+      //make_dir(srvarg.saves_pathname);
 
       sz_strlcpy(tmpname, srvarg.saves_pathname);
     } else {
       /* Make sure scenario directory exist */
-      make_dir(srvarg.scenarios_pathname);
+      //make_dir(srvarg.scenarios_pathname);
 
       sz_strlcpy(tmpname, srvarg.scenarios_pathname);
     }
 
-    if (tmpname[0] != '\0') {
-      sz_strlcat(tmpname, "/");
-    }
-    sz_strlcat(tmpname, filepath);
+    sz_strlcpy(tmpname, srvarg.saves_pathname);
+    sz_strlcat(tmpname, filename);
+    sz_strlcat(tmpname, "/");
+      
+    /* Ensure the saves directory exists. */
+    make_dir(tmpname);
+
+    sz_strlcat(tmpname, genname);
     sz_strlcpy(filepath, tmpname);
   }
 
-  if (!secfile_save(file, filepath, game.info.save_compress_level,
+  if (!secfile_save(&file, filename, game.info.save_compress_level,
                     game.info.save_compress_type)) {
     con_write(C_FAIL, _("Failed saving game as %s"), filepath);
   } else {
@@ -1148,11 +1157,11 @@
 **************************************************************************/
 void save_game_auto(const char *save_reason, const char *reason_filename)
 {
-  char filename[512];
+  //char filename[512];
 
   assert(strlen(game.server.save_name)<256);
 
-  generate_save_name(filename, sizeof(filename), TRUE, reason_filename);
+  //generate_save_name(filename, sizeof(filename), TRUE, reason_filename);
   //save_game(filename, save_reason, FALSE);
   //save_ppm();
 }
@@ -2056,6 +2065,8 @@
 	save_counter++;
       }
 
+      save_ppm();
+
       freelog(LOG_DEBUG, "sniffingpackets");
       check_for_full_turn_done(); /* HACK: don't wait during AI phases */
       while (server_sniff_all_input() == S_E_OTHERWISE) {
diff -Nurd -X.diff_ignore freeciv/server/stdinhand.c freeciv/server/stdinhand.c
--- freeciv/server/stdinhand.c	2012-05-19 03:14:33.000000000 +0300
+++ freeciv/server/stdinhand.c	2012-05-19 05:23:56.000000000 +0300
@@ -644,11 +644,6 @@
 **************************************************************************/
 static bool save_command(struct connection *caller, char *arg, bool check)
 {
-  if (is_restricted(caller)) {
-    cmd_reply(CMD_SAVE, caller, C_FAIL,
-              _("You cannot save games manually on this server."));
-    return FALSE;
-  }
   if (!check) {
     save_game(arg, "User request", FALSE);
   }
@@ -3270,15 +3265,17 @@
   {
     /* it is a normal savegame or maybe a scenario */
     char testfile[MAX_LEN_PATH];
-    const struct strvec *pathes[] = {
-      get_save_dirs(), get_scenario_dirs(), NULL
-    };
+    char usrdir[MAX_LEN_PATH];
+
+    my_snprintf(usrdir, sizeof(usrdir), "%s/", 
+		caller->username);
+
+    const char *pathes[] = { "", usrdir, "scenario/", NULL };
     const char *exts[] = {
       "sav", "gz", "bz2", "sav.gz", "sav.bz2", NULL
     };
-    const char **ext, *found = NULL;
-    const struct strvec **path;
-
+    const char **path, **ext, *found = NULL;
+ 
     for (path = pathes; !found && *path; path++) {
       for (ext = exts; !found && *ext; ext++) {
         my_snprintf(testfile, sizeof(testfile), "%s.%s", filename, *ext);
@@ -3578,6 +3575,11 @@
 
   level = command_level(command_by_number(cmd));
 
+  /* hack for web client: savegames are saved with username as proposed filename. */
+  if (cmd == CMD_SAVE && caller) {
+    sz_strlcpy(allargs, caller->username);
+  }
+
   if (conn_can_vote(caller, NULL) && level == ALLOW_CTRL
       && conn_get_access(caller) == ALLOW_BASIC && !check) {
     struct vote *vote;
