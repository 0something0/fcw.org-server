diff -Nurd -X.diff_ignore freeciv/configure.ac freeciv/configure.ac
--- freeciv/configure.ac	2012-05-16 22:11:36.000000000 +0300
+++ freeciv/configure.ac	2012-05-16 22:21:04.000000000 +0300
@@ -716,28 +716,6 @@
 fi
 
 
-dnl The following adds flags for libcurl
-    AC_MSG_CHECKING(for libcurl 7.11.0 or later)
-    set x `curl-config --version 2>&1`
-    shift
-    case "$1" in [[0-9]*]) ;; *) shift;; esac
-    jigdo_curlver="$1"
-    AC_MSG_RESULT($jigdo_curlver)
-    case "$jigdo_curlver" in
-        [[1-9][0-9].*|[8-9].*|7.1[1-9]*|7.[2-9][0-9]*])
-            CFLAGS="$CFLAGS `curl-config --cflags 2>/dev/null`"
-            SERVER_LIBS="$SERVER_LIBS `curl-config --libs 2>/dev/null`"
-            if test -n "$jigdo_libcurl"; then CURLLIBS="$jigdo_libcurl"; fi
-            ;;
-        *)
-        AC_MSG_RESULT([   * libcurl not installed, or the installed version])
-        AC_MSG_RESULT([   * is too old, or curl-config is not in \$PATH.])
-        AC_MSG_RESULT([   * Please install libcurl 7.11.0 or later, it is])
-        AC_MSG_RESULT([   * needed by the jigdo GUI application.])
-        installDevel "libcurl2" "libcurl2"
-    esac
-
-
 
 AC_SUBST(SERVER_LIBS)
 
@@ -841,7 +819,7 @@
 if test x"$MINGW32" = xyes; then
   DEFAULT_DATA_PATH=".;data;~/.freeciv/$DATASUBDIR;$datadir/freeciv"
 else
-  DEFAULT_DATA_PATH=".:data:~/.freeciv/$DATASUBDIR:$datadir/freeciv"
+  DEFAULT_DATA_PATH=".:data:~/.freeciv/$DATASUBDIR:$datadir/freeciv:/mnt/savegames"
 fi
 CPPFLAGS="$CPPFLAGS -DDEFAULT_DATA_PATH=\"\\\"$DEFAULT_DATA_PATH\\\"\""
 
diff -Nurd -X.diff_ignore freeciv/server/Makefile.am freeciv/server/Makefile.am
--- freeciv/server/Makefile.am	2012-05-16 22:11:36.000000000 +0300
+++ freeciv/server/Makefile.am	2012-05-16 22:22:13.000000000 +0300
@@ -23,8 +23,6 @@
 		aiiface.h	\
 		auth.c		\
 		auth.h		\
-		aws4c.c		\
-		aws4c.h		\
 		barbarian.c	\
 		barbarian.h	\
 		cityhand.c	\
@@ -61,8 +59,6 @@
 		meta.h		\
 		notify.c	\
 		notify.h	\
-		netsave.c	\
-		netsave.h	\
 		plrhand.c	\
 		plrhand.h	\
 		report.c	\
diff -Nurd -X.diff_ignore freeciv/server/meta.h freeciv/server/meta.h
--- freeciv/server/meta.h	2012-05-16 22:03:59.000000000 +0300
+++ freeciv/server/meta.h	2012-05-16 22:22:19.000000000 +0300
@@ -17,7 +17,7 @@
 
 #define DEFAULT_META_SERVER_NO_SEND  TRUE
 #define DEFAULT_META_SERVER_ADDR     META_URL /* config.h */
-#define METASERVER_REFRESH_INTERVAL   (60)
+#define METASERVER_REFRESH_INTERVAL   (20)
 #define METASERVER_MIN_UPDATE_INTERVAL 7   /* not too short, not too long */
 
 enum meta_flag {
diff -Nurd -X.diff_ignore freeciv/server/report.c freeciv/server/report.c
--- freeciv/server/report.c	2012-05-16 20:56:43.000000000 +0300
+++ freeciv/server/report.c	2012-05-16 22:22:19.000000000 +0300
@@ -933,7 +933,9 @@
 **************************************************************************/
 void log_civ_score(void)
 {
-  static const char logname[] = "civscore.log";
+  char logname[600];
+  char tmpname[600];
+
   static FILE *fp = NULL;
   static bool disabled = FALSE;
   static char player_names[MAX_NUM_PLAYERS +
@@ -941,6 +943,21 @@
   static char *player_name_ptrs[MAX_NUM_PLAYERS + MAX_NUM_BARBARIANS];
   static int last_turn = -1;
 
+ /* put this file in the same place we put savegames */
+  my_snprintf(logname, sizeof(logname),
+              "civscore-%04d.log", srvarg.port);
+
+  /* Ensure the saves directory exists. */
+  make_dir(srvarg.saves_pathname);
+
+  sz_strlcpy(tmpname, srvarg.saves_pathname);
+  if (tmpname[0] != '\0') {
+    sz_strlcat(tmpname, "/");
+  }
+  sz_strlcat(tmpname, logname);
+  sz_strlcpy(logname, tmpname);
+
+
   /* 
    * Add new tags only at end of this list. Maintaining the order of
    * old tags is critical.
diff -Nurd -X.diff_ignore freeciv/server/score.c freeciv/server/score.c
--- freeciv/server/score.c	2012-05-16 20:56:43.000000000 +0300
+++ freeciv/server/score.c	2012-05-16 22:22:19.000000000 +0300
@@ -387,13 +387,13 @@
   int watercol[3] = {0,0,255}; /* blue */
   int landcol[3] =  {0,0,0};   /* black */
 
-  if (!srvarg.save_ppm) {
+  /*if (!srvarg.save_ppm) {
     return;
-  }
+  }*/
 
   /* put this file in the same place we put savegames */
   my_snprintf(filename, sizeof(filename),
-              "%s%+05d.int.ppm", game.server.save_name, game.info.year);
+              "overviewmap-%04d.ppm", srvarg.port);
 
   /* Ensure the saves directory exists. */
   make_dir(srvarg.saves_pathname);
diff -Nurd -X.diff_ignore freeciv/server/srv_main.c freeciv/server/srv_main.c
--- freeciv/server/srv_main.c	2012-05-16 22:12:56.000000000 +0300
+++ freeciv/server/srv_main.c	2012-05-16 22:22:21.000000000 +0300
@@ -100,7 +100,6 @@
 #include "gamehand.h"
 #include "ggzserver.h"
 #include "handchat.h"
-#include "netsave.h"
 #include "maphand.h"
 #include "meta.h"
 #include "notify.h"
@@ -1007,6 +1006,13 @@
 {
   int nb, year;
   const char *year_suffix;
+  time_t     now;
+  struct tm  *ts;
+  char buff[80];
+
+  now = time(0); 
+  ts = localtime(&now);
+  strftime(buff, sizeof(buff), "%Y-%m-%d-%H-%M-%S", ts);
 
   if (game.info.year < 0) {
     year = -game.info.year;
@@ -1019,13 +1025,14 @@
   /* NB: If you change the format here, be sure to update the above
    * function comment and the help text for the 'savename' setting. */
   if (reason == NULL) {
-    nb = my_snprintf(buf, buflen, "%s-T%03d-Y%d%s%s",
+    nb = my_snprintf(buf, buflen, "%s-T%03d-Y%d%s%s-%s",
                      game.server.save_name, game.info.turn, year,
-                     year_suffix, is_auto_save ? "" : "m");
+                     year_suffix, is_auto_save ? "" : "m",
+		     buff);
   } else {
-    nb = my_snprintf(buf, buflen, "%s-%s-T%03d-Y%d%s%s",
+    nb = my_snprintf(buf, buflen, "%s-%s-T%03d-Y%d%s%s-%s",
                      game.server.save_name, reason, game.info.turn, year,
-                     year_suffix, is_auto_save ? "" : "m");
+                     year_suffix, is_auto_save ? "" : "m", buff);
   }
 
   return nb;
@@ -1038,18 +1045,16 @@
 Note that if !HAVE_LIBZ, then game.info.save_compress_level should never
 become non-zero, so no need to check HAVE_LIBZ explicitly here as well.
 **************************************************************************/
-void save_game(char *orig_filename, const char *save_reason, bool scenario)
+void save_game(char *username, const char *save_reason, bool scenario)
 {
   char filename[600];
   char *dot;
   struct section_file file;
   struct timer *timer_cpu, *timer_user;
 
-  if (!orig_filename) {
+  if (!username) {
     con_write(C_FAIL, _("Failed saving game. Missing filename."));
     return;
-  } else {
-    sz_strlcpy(filename, orig_filename);
   }
 
   /* Strip extension. */
@@ -1057,10 +1062,7 @@
     *dot = '\0';
   }
 
-  /* If orig_filename is NULL or empty, use a generated default name. */
-  if (filename[0] == '\0'){
-    generate_save_name(filename, sizeof(filename), FALSE, NULL);
-  }
+  generate_save_name(filename, sizeof(filename), FALSE, NULL);
   
   timer_cpu = new_timer_start(TIMER_CPU, TIMER_ACTIVE);
   timer_user = new_timer_start(TIMER_USER, TIMER_ACTIVE);
@@ -1100,40 +1102,24 @@
   if (!path_is_absolute(filename)) {
     char tmpname[600];
 
-    if (!scenario) {
-      /* Ensure the saves directory exists. */
-      //make_dir(srvarg.saves_pathname);
-
-      sz_strlcpy(tmpname, srvarg.saves_pathname);
-    } else {
-      /* Make sure scenario directory exist */
-      //make_dir(srvarg.scenarios_pathname);
-
-      sz_strlcpy(tmpname, srvarg.scenarios_pathname);
-    }
+    sz_strlcpy(tmpname, srvarg.saves_pathname);
+    sz_strlcat(tmpname, username);
+    sz_strlcat(tmpname, "/");
+      
+    /* Ensure the saves directory exists. */
+    make_dir(tmpname);
 
-    if (tmpname[0] != '\0') {
-      sz_strlcat(tmpname, "/");
-    }
     sz_strlcat(tmpname, filename);
     sz_strlcpy(filename, tmpname);
   }
 
-
-  if (!net_file_save(&file, filename))
+  if (!section_file_save(&file, filename, game.info.save_compress_level,
+                         game.info.save_compress_type))
     con_write(C_FAIL, _("Failed saving game as %s"), filename);
   else
     con_write(C_OK, _("Game saved as %s"), filename);
 
 
-  /* Don't save to disk. Webclient saves to Amazon S3.
-
-    if (!section_file_save(&file, filename, game.info.save_compress_level,
-                         game.info.save_compress_type))
-    con_write(C_FAIL, _("Failed saving game as %s"), filename);
-  else
-    con_write(C_OK, _("Game saved as %s"), filename);*/
-
   section_file_free(&file);
 
   freelog(LOG_VERBOSE, "Save time: %g seconds (%g apparent)",
@@ -1148,11 +1134,11 @@
 **************************************************************************/
 void save_game_auto(const char *save_reason, const char *reason_filename)
 {
-  char filename[512];
+  //char filename[512];
 
   assert(strlen(game.server.save_name)<256);
 
-  generate_save_name(filename, sizeof(filename), TRUE, reason_filename);
+  //generate_save_name(filename, sizeof(filename), TRUE, reason_filename);
   //save_game(filename, save_reason, FALSE);
   //save_ppm();
 }
@@ -2060,6 +2046,8 @@
 	save_counter++;
       }
 
+      save_ppm();
+
       freelog(LOG_DEBUG, "sniffingpackets");
       check_for_full_turn_done(); /* HACK: don't wait during AI phases */
       while (server_sniff_all_input() == S_E_OTHERWISE) {
diff -Nurd -X.diff_ignore freeciv/server/stdinhand.c freeciv/server/stdinhand.c
--- freeciv/server/stdinhand.c	2012-05-16 22:19:49.000000000 +0300
+++ freeciv/server/stdinhand.c	2012-05-16 22:22:21.000000000 +0300
@@ -65,7 +65,6 @@
 #include "mapgen.h"
 #include "maphand.h"
 #include "meta.h"
-#include "netsave.h"
 #include "notify.h"
 #include "plrhand.h"
 #include "report.h"
@@ -3444,11 +3443,45 @@
     return FALSE;
   }
 
-  sz_strlcpy(arg, filename);
+  {
+    /* it is a normal savegame or maybe a scenario */
+    char testfile[MAX_LEN_PATH];
+    char usrdir[MAX_LEN_PATH];
+
+    my_snprintf(usrdir, sizeof(usrdir), "%s/", 
+		caller->username);
+
+    const char *paths[] = { "", usrdir, "scenario/", NULL };
+    const char *exts[] = {
+      "sav", "gz", "bz2", "sav.gz", "sav.bz2", NULL
+    };
+    const char **path, **ext, *found = NULL;
+ 
+    for (path = paths; !found && *path; path++) {
+      for (ext = exts; !found && *ext; ext++) {
+        my_snprintf(testfile, sizeof(testfile), "%s%s.%s",
+                    *path, filename, *ext);
+        if ((found = datafilename(testfile))) {
+          sz_strlcpy(arg, found);
+        }
+      }
+    }
+
+    if (is_restricted(caller) && !found) {
+      cmd_reply(CMD_LOAD, caller, C_FAIL, _("Cannot find savegame or "
+                "scenario with the name \"%s\"."), filename);
+      return FALSE;
+    }
+
+    if (!found) {
+      sz_strlcpy(arg, filename);
+    }
+  }
+
 
   /* attempt to parse the file */
 
-  if (!net_file_load(&file, arg)) {
+  if (!section_file_load_nodup(&file, arg)) {
     cmd_reply(CMD_LOAD, caller, C_FAIL, _("Could not load savefile: %s"), arg);
     send_load_game_info(FALSE);
     return FALSE;
@@ -3723,6 +3756,11 @@
 
   level = command_level(command_by_number(cmd));
 
+  /* hack for web client: savegames are saved with username as proposed filename. */
+  if (cmd == CMD_SAVE && caller) {
+    sz_strlcpy(allargs, caller->username);
+  }
+
   if (conn_can_vote(caller, NULL) && level == ALLOW_CTRL
       && conn_get_access(caller) == ALLOW_BASIC && !check) {
     struct vote *vote;
