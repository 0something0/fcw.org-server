diff --git a/common/worklist.h b/common/worklist.h
index b148427..b4ced48 100644
--- a/common/worklist.h
+++ b/common/worklist.h
@@ -22,6 +22,8 @@ extern "C" {
 #include "fc_types.h"
 
 #define MAX_LEN_WORKLIST 64
+#define MAX_LEN_WORKLIST_ITEM 8
+#define MAX_LEN_WORKLIST_WEB 64*MAX_LEN_WORKLIST_ITEM
 #define MAX_NUM_WORKLISTS 16
 
 /* a worklist */
diff --git a/server/cityhand.c b/server/cityhand.c
index 3662501..c80aff5 100644
--- a/server/cityhand.c
+++ b/server/cityhand.c
@@ -395,8 +395,7 @@ void really_handle_city_buy(struct player *pplayer, struct city *pcity)
 /**************************************************************************
   Handle city worklist update request
 **************************************************************************/
-void handle_city_worklist(struct player *pplayer, int city_id,
-                          const struct worklist *worklist)
+void handle_city_worklist(struct player *pplayer, int city_id)
 {
   struct city *pcity = player_city_by_number(pplayer, city_id);
 
@@ -404,12 +403,44 @@ void handle_city_worklist(struct player *pplayer, int city_id,
     return;
   }
 
-  worklist_copy(&pcity->worklist, worklist);
+  // not in use by webclient.
+  //worklist_copy(&pcity->worklist, worklist);
+  //send_city_info(pplayer, pcity);
+}
+
+/**************************************************************************
+  Handle city worklist add request
+**************************************************************************/
+void handle_city_worklist_add(struct player *pplayer, int city_id,
+                          const char *kind, const char *value)
+{
+  struct city *pcity = player_city_by_number(pplayer, city_id);
+
+  if (!pcity) {
+    return;
+  }
+  struct universal addme = universal_by_rule_name(kind, value);
+  worklist_append(&pcity->worklist, addme);
 
   send_city_info(pplayer, pcity);
 }
 
 /**************************************************************************
+  Handle city worklist remove request
+**************************************************************************/
+void handle_city_worklist_remove(struct player *pplayer, int city_id,
+                          int index)
+{
+  struct city *pcity = player_city_by_number(pplayer, city_id);
+
+  if (!pcity) {
+    return;
+  }
+  worklist_remove(&pcity->worklist, index);
+
+  send_city_info(pplayer, pcity);
+}
+/**************************************************************************
   Handle buying request. This function does properly check its input as
   it may come from untrusted source over the network.
 **************************************************************************/
diff --git a/server/citytools.c b/server/citytools.c
index ba037e6..bd3251a 100644
--- a/server/citytools.c
+++ b/server/citytools.c
@@ -2162,6 +2162,7 @@ void package_city(struct city *pcity, struct packet_city_info *packet,
   char food_output_buf[MAX_NUM_ITEMS + 1];
   char shield_output_buf[MAX_NUM_ITEMS + 1];
   char trade_output_buf[MAX_NUM_ITEMS + 1];
+  char worklist_buf[MAX_LEN_WORKLIST_WEB];
   struct tile *pcenter = city_tile(pcity);
   int c = 0;
 
@@ -2284,7 +2285,20 @@ void package_city(struct city *pcity, struct packet_city_info *packet,
   packet->caravan_shields=pcity->caravan_shields;
   packet->last_turns_shield_surplus = pcity->last_turns_shield_surplus;
 
-  //worklist_copy(&packet->worklist, &pcity->worklist);
+  if (worklist_is_empty(&pcity->worklist)) {
+    sz_strlcpy(packet->worklist, "-");
+  } else {
+    worklist_buf[0] = '\0';
+    int w = 0;
+    for (w = 0; w < worklist_length(&pcity->worklist); w++) {
+      struct universal target;
+      char f[MAX_LEN_WORKLIST_ITEM];
+      worklist_peek_ith(&pcity->worklist, &target, w);
+      fc_snprintf(f, sizeof(f), "%d,%d;", target.kind, universal_number(&target));
+      strcat(worklist_buf, f);
+    }
+    sz_strlcpy(packet->worklist, worklist_buf);
+  }
   packet->diplomat_investigate=dipl_invest;
 
   packet->airlift = pcity->airlift;
