diff -Nurd -X.diff_ignore freeciv/common/generate_packets.py freeciv/common/generate_packets.py
--- freeciv/common/generate_packets.py	2016-02-18 16:49:58.485655189 +0200
+++ freeciv/common/generate_packets.py	2016-02-18 16:51:17.257507814 +0200
@@ -298,7 +298,7 @@
       }
     }'''%self.get_dict(vars())
 
-    # Returns a code fragement which updates the bit of the this field
+    # Returns a code fragment which updates the bit of the this field
     # in the "fields" bitvector. The bit is either a "content-differs"
     # bit or (for bools which gets folded in the header) the actual
     # value of the bool.
@@ -325,7 +325,7 @@
 
 '''%(cmp,i)
 
-    # Returns a code fragement which will put this field if the
+    # Returns a code fragment which will put this field if the
     # content has changed. Does nothing for bools-in-header.    
     def get_put_wrapper(self,packet,i):
         if fold_bool_into_header and self.struct_type=="bool" and \
@@ -543,7 +543,7 @@
       #endif /* FREECIV_JSON_CONNECTION */
     } '''%self.get_dict(vars())
 
-    # Returns a code fragement which will get the field if the
+    # Returns a code fragment which will get the field if the
     # "fields" bitvector says so.
     def get_get_wrapper(self,packet,i):
         get=self.get_get()
@@ -894,7 +894,7 @@
         result.update(vars)
         return result
 
-    # Returns a code fragement which contains the declarations of the
+    # Returns a code fragment which contains the declarations of the
     # statistical counters of this packet.
     def get_stats(self):
         names=map(lambda x:'"'+x.name+'"',self.other_fields)
@@ -907,13 +907,13 @@
 
 '''%self.get_dict(vars())
 
-    # Returns a code fragement which declares the packet specific
+    # Returns a code fragment which declares the packet specific
     # bitvector. Each bit in this bitvector represents one non-key
     # field.    
     def get_bitvector(self):
         return "BV_DEFINE(%(name)s_fields, %(bits)d);\n\n"%self.__dict__
 
-    # Returns a code fragement which is the packet specific part of
+    # Returns a code fragment which is the packet specific part of
     # the delta_stats_report() function.
     def get_report_part(self):
         return '''
@@ -932,7 +932,7 @@
   }
 '''%self.__dict__
 
-    # Returns a code fragement which is the packet specific part of
+    # Returns a code fragment which is the packet specific part of
     # the delta_stats_reset() function.
     def get_reset_part(self):
         return '''
@@ -942,7 +942,7 @@
          sizeof(stats_%(name)s_counters));
 '''%self.__dict__
 
-    # Returns a code fragement which is the implementation of the hash
+    # Returns a code fragment which is the implementation of the hash
     # function. The hash function is using all key fields.
     def get_hash(self):
         if len(self.key_fields)==0:
@@ -967,7 +967,7 @@
             extro="}\n\n"
             return intro+body+extro
 
-    # Returns a code fragement which is the implementation of the cmp
+    # Returns a code fragment which is the implementation of the cmp
     # function. The cmp function is using all key fields. The cmp
     # function is used for the hash table.    
     def get_cmp(self):
@@ -988,7 +988,7 @@
             extro="}\n\n"
             return intro+body+extro
 
-    # Returns a code fragement which is the implementation of the send
+    # Returns a code fragment which is the implementation of the send
     # function. This is one of the two real functions. So it is rather
     # complex to create.
     def get_send(self):
@@ -1148,7 +1148,7 @@
 
         return intro+body
 
-    # Returns a code fragement which is the implementation of the receive
+    # Returns a code fragment which is the implementation of the receive
     # function. This is one of the two real functions. So it is rather
     # complex to create.
     def get_receive(self):
@@ -1426,7 +1426,7 @@
             self.variants.append(Variant(poscaps,negcaps,"%s_%d"%(self.name,no),fields,self,no))
 
 
-    # Returns a code fragement which contains the struct for this packet.
+    # Returns a code fragment which contains the struct for this packet.
     def get_struct(self):
         intro="struct %(name)s {\n"%self.__dict__
         extro="};\n\n"
@@ -1439,7 +1439,7 @@
         return intro+body+extro
     # '''
 
-    # Returns a code fragement which represents the prototypes of the
+    # Returns a code fragment which represents the prototypes of the
     # send and receive functions for the header file.
     def get_prototypes(self):
         result=self.send_prototype+";\n"
@@ -1493,7 +1493,7 @@
             result=result+v.get_send()
         return result
 
-    # Returns a code fragement which is the implementation of the
+    # Returns a code fragment which is the implementation of the
     # lsend function.
     def get_lsend(self):
         if not self.want_lsend: return ""
@@ -1506,7 +1506,7 @@
 
 '''%self.__dict__
 
-    # Returns a code fragement which is the implementation of the
+    # Returns a code fragment which is the implementation of the
     # dsend function.
     def get_dsend(self):
         if not self.want_dsend: return ""
@@ -1522,7 +1522,7 @@
 
 '''%self.get_dict(vars())
 
-    # Returns a code fragement which is the implementation of the
+    # Returns a code fragment which is the implementation of the
     # dlsend function.
     def get_dlsend(self):
         if not (self.want_lsend and self.want_dsend): return ""
@@ -1538,7 +1538,7 @@
 
 '''%self.get_dict(vars())
 
-# Returns a code fragement which is the implementation of the
+# Returns a code fragment which is the implementation of the
 # packet_functional_capability string.
 def get_packet_functional_capability(packets):
     all_caps={}
@@ -1550,7 +1550,7 @@
 const char *const packet_functional_capability = "%s";
 '''%' '.join(all_caps.keys())
 
-# Returns a code fragement which is the implementation of the
+# Returns a code fragment which is the implementation of the
 # delta_stats_report() function.
 def get_report(packets):
     if not generate_stats: return 'void delta_stats_report(void) {}\n\n'
@@ -1567,7 +1567,7 @@
         body=body+p.get_report_part()
     return intro+body+extro
 
-# Returns a code fragement which is the implementation of the
+# Returns a code fragment which is the implementation of the
 # delta_stats_reset() function.
 def get_reset(packets):
     if not generate_stats: return 'void delta_stats_reset(void) {}\n\n'
@@ -1581,7 +1581,7 @@
         body=body+p.get_reset_part()
     return intro+body+extro
 
-# Returns a code fragement which is the implementation of the
+# Returns a code fragment which is the implementation of the
 # packet_name() function.
 def get_packet_name(packets):
     intro='''const char *packet_name(enum packet_type type)
@@ -1611,7 +1611,7 @@
 '''
     return intro+body+extro
 
-# Returns a code fragement which is the implementation of the
+# Returns a code fragment which is the implementation of the
 # packet_has_game_info_flag() function.
 def get_packet_has_game_info_flag(packets):
     intro='''bool packet_has_game_info_flag(enum packet_type type)
@@ -1644,7 +1644,7 @@
 '''
     return intro+body+extro
 
-# Returns a code fragement which is the implementation of the
+# Returns a code fragment which is the implementation of the
 # packet_handlers_fill_initial() function.
 def get_packet_handlers_fill_initial(packets):
     intro='''void packet_handlers_fill_initial(struct packet_handlers *phandlers)
@@ -1705,7 +1705,7 @@
 '''
     return intro+body+extro
 
-# Returns a code fragement which is the implementation of the
+# Returns a code fragment which is the implementation of the
 # packet_handlers_fill_capability() function.
 def get_packet_handlers_fill_capability(packets):
     intro='''void packet_handlers_fill_capability(struct packet_handlers *phandlers,
@@ -1794,7 +1794,7 @@
 '''
     return intro+body+extro
 
-# Returns a code fragement which is the declartion of
+# Returns a code fragment which is the declartion of
 # "enum packet_type".
 def get_enum_packet(packets):
     intro="enum packet_type {\n"
