From 7cb5d033e7912b9a33e61cc002940eac4564f4df Mon Sep 17 00:00:00 2001
From: Sveinung Kvilhaugsvik <sveinung84@users.sourceforge.net>
Date: Thu, 16 Apr 2015 23:11:00 +0200
Subject: [PATCH] Location inside a packet

---
 common/dataio.c            |  14 ++++
 common/dataio.h            |   2 +
 common/dataio_json.c       | 174 ++++++++++++++++++++++++++++++++++++++-------
 common/generate_packets.py | 126 ++++++++++++++++++++++----------
 common/packets_json.h      |   6 +-
 5 files changed, 256 insertions(+), 66 deletions(-)

diff --git a/common/dataio.c b/common/dataio.c
index 8405bbf..aacb208 100644
--- a/common/dataio.c
+++ b/common/dataio.c
@@ -1029,3 +1029,17 @@ void dio_put_requirement_raw(struct raw_data_out *dout,
   dio_put_bool8_raw(dout, survives);
   dio_put_bool8_raw(dout, present);
 }
+
+/**************************************************************************
+ Create a new address of the location of a field inside a packet.
+**************************************************************************/
+struct plocation *plocation_field_new(char *name)
+{
+  struct plocation *out = fc_malloc(sizeof(*out));
+
+  out->kind = PADR_FIELD;
+  out->name = name;
+  out->sub_location = NULL;
+
+  return out;
+}
diff --git a/common/dataio.h b/common/dataio.h
index 6808725..75c9b7e 100644
--- a/common/dataio.h
+++ b/common/dataio.h
@@ -74,6 +74,8 @@ struct plocation {
   struct plocation *sub_location;
 };
 
+struct plocation *plocation_field_new(char *name);
+
 #ifdef FREECIV_JSON_CONNECTION
 #include "dataio_json.h"
 #endif
diff --git a/common/dataio_json.c b/common/dataio_json.c
index 1c3d113..8d431d2 100644
--- a/common/dataio_json.c
+++ b/common/dataio_json.c
@@ -110,6 +110,109 @@ static bool get_conv(char *dst, size_t ndst, const char *src,
   return ret;
 }
 
+static void plocation_write_data(json_t *item,
+                                 const struct plocation *location,
+                                 json_t *data);
+
+/**************************************************************************
+  Helper for plocation_write_data(). Use it in stead of this.
+**************************************************************************/
+static void plocation_write_field(json_t *item,
+                                  const struct plocation *location,
+                                  json_t *data)
+{
+  if (location->sub_location == NULL) {
+    json_object_set_new(item, location->name, data);
+  } else {
+    plocation_write_data(json_object_get(item, location->name),
+                         location->sub_location, data);
+  }
+}
+
+/**************************************************************************
+  Helper for plocation_write_data(). Use it in stead of this.
+**************************************************************************/
+static void plocation_write_elem(json_t *item,
+                                 const struct plocation *location,
+                                 json_t *data)
+{
+  if (location->sub_location == NULL) {
+    json_array_set_new(item, location->number, data);
+  } else {
+    plocation_write_data(json_array_get(item, location->number),
+                         location->sub_location, data);
+  }
+}
+
+/**************************************************************************
+  Write the specified JSON data to the given location in the provided
+  JSON item.
+**************************************************************************/
+static void plocation_write_data(json_t *item,
+                                 const struct plocation *location,
+                                 json_t *data)
+{
+  switch (location->kind) {
+  case PADR_FIELD:
+    plocation_write_field(item, location, data);
+    return;
+  case PADR_ELEMENT:
+    plocation_write_elem(item, location, data);
+    return;
+  default:
+    log_error("Unknown packet part location kind.");
+    return;
+  }
+}
+
+static json_t *plocation_read_data(json_t *item,
+                                   const struct plocation *location);
+
+/**************************************************************************
+  Helper for plocation_read_data(). Use it in stead of this.
+**************************************************************************/
+static json_t *plocation_read_field(json_t *item,
+                                    const struct plocation *location)
+{
+  if (location->sub_location == NULL) {
+    return json_object_get(item, location->name);
+  } else {
+    return plocation_read_data(json_object_get(item, location->name),
+                               location->sub_location);
+  }
+}
+
+/**************************************************************************
+  Helper for plocation_read_data(). Use it in stead of this.
+**************************************************************************/
+static json_t *plocation_read_elem(json_t *item,
+                                   const struct plocation *location)
+{
+  if (location->sub_location == NULL) {
+    return json_array_get(item, location->number);
+  } else {
+    return plocation_read_data(json_array_get(item, location->number),
+                               location->sub_location);
+  }
+}
+
+/**************************************************************************
+  Read JSON data from the given location in the provided JSON item.
+**************************************************************************/
+static json_t *plocation_read_data(json_t *item,
+                                   const struct plocation *location)
+{
+  switch (location->kind) {
+  case PADR_FIELD:
+    return plocation_read_field(item, location);
+  case PADR_ELEMENT:
+    return plocation_read_elem(item, location);
+  default:
+    log_error("Unknown packet part location kind.");
+    return NULL;
+  }
+}
+
 /**************************************************************************
   Insert 8 bit value with json.
 **************************************************************************/
@@ -117,7 +220,7 @@ void dio_put_uint8_json(struct json_data_out *dout,
                         char *key, const struct plocation* location,
                         int value)
 {
-  json_object_set_new(dout->json, key, json_integer(value));
+  plocation_write_data(dout->json, location, json_integer(value));
 }
 
 /**************************************************************************
@@ -126,7 +229,7 @@ void dio_put_uint8_json(struct json_data_out *dout,
 void dio_put_uint16_json(struct json_data_out *dout, char *key,
                          const struct plocation* location, int value)
 {
-  json_object_set_new(dout->json, key, json_integer(value));
+  plocation_write_data(dout->json, location, json_integer(value));
 }
 
 /**************************************************************************
@@ -167,7 +270,7 @@ void dio_put_worklist_json(struct json_data_out *dout, char *key,
 bool dio_get_uint8_json(json_t *json_packet, char *key,
                         const struct plocation* location, int *dest)
 {
-  json_t *pint = json_object_get(json_packet, key);
+  json_t *pint = plocation_read_data(json_packet, location);
 
   if (!pint) {
     log_error("ERROR: Unable to get uint8 with key: %s", key);
@@ -189,7 +292,7 @@ bool dio_get_uint8_json(json_t *json_packet, char *key,
 bool dio_get_uint16_json(json_t *json_packet, char *key,
                          const struct plocation* location, int *dest)
 {
-  json_t *pint = json_object_get(json_packet, key);
+  json_t *pint = plocation_read_data(json_packet, location);
 
   if (!pint) {
     log_error("ERROR: Unable to get uint16 with key: %s", key);
@@ -211,7 +314,7 @@ bool dio_get_uint16_json(json_t *json_packet, char *key,
 bool dio_get_uint32_json(json_t *json_packet, char *key,
                          const struct plocation* location, int *dest)
 {
-  json_t *pint = json_object_get(json_packet, key);
+  json_t *pint = plocation_read_data(json_packet, location);
 
   if (!pint) {
     log_error("ERROR: Unable to get uint32 with key: %s", key);
@@ -302,39 +405,46 @@ bool dio_get_requirement_json(json_t *json_packet, char *key,
   int kind, range, value;
   bool survives, present;
 
+  struct plocation req_field;
+
   /* Find the requirement object. */
-  json_t *requirement = json_object_get(json_packet, key);
+  json_t *requirement = plocation_read_data(json_packet, location);
   if (!requirement) {
     log_error("ERROR: Unable to get requirement with key: %s", key);
     return FALSE;
   }
 
   /* Find the requirement object fields and translate their values. */
-  if (!dio_get_uint8_json(requirement, "kind", NULL, &kind)) {
+  req_field = *plocation_field_new("kind");
+  if (!dio_get_uint8_json(requirement, "kind", &req_field, &kind)) {
     log_error("ERROR: Unable to get part of requirement with key: %s",
               key);
     return FALSE;
   }
 
-  if (!dio_get_sint32_json(requirement, "value", NULL, &value)) {
+  req_field.name = "value";
+  if (!dio_get_sint32_json(requirement, "value", &req_field, &value)) {
     log_error("ERROR: Unable to get part of requirement with key: %s",
               key);
     return FALSE;
   }
 
-  if (!dio_get_uint8_json(requirement, "range", NULL, &range)) {
+  req_field.name = "range";
+  if (!dio_get_uint8_json(requirement, "range", &req_field, &range)) {
     log_error("ERROR: Unable to get part of requirement with key: %s",
               key);
     return FALSE;
   }
 
-  if (!dio_get_bool8_json(requirement, "survives", NULL, &survives)) {
+  req_field.name = "survives";
+  if (!dio_get_bool8_json(requirement, "survives", &req_field, &survives)) {
     log_error("ERROR: Unable to get part of requirement with key: %s",
               key);
     return FALSE;
   }
 
-  if (!dio_get_bool8_json(requirement, "present", NULL, &present)) {
+  req_field.name = "present";
+  if (!dio_get_bool8_json(requirement, "present", &req_field, &present)) {
     log_error("ERROR: Unable to get part of requirement with key: %s",
               key);
     return FALSE;
@@ -352,7 +462,7 @@ bool dio_get_requirement_json(json_t *json_packet, char *key,
 void dio_put_uint32_json(struct json_data_out *dout, char *key,
                          const struct plocation* location, int value)
 {
-  json_object_set_new(dout->json, key, json_integer(value));
+  plocation_write_data(dout->json, location, json_integer(value));
 }
 
 /**************************************************************************
@@ -361,7 +471,7 @@ void dio_put_uint32_json(struct json_data_out *dout, char *key,
 void dio_put_bool8_json(struct json_data_out *dout, char *key,
                         const struct plocation* location, bool value)
 {
-  json_object_set_new(dout->json, key, value ? json_true() : json_false());
+  plocation_write_data(dout->json, location, value ? json_true() : json_false());
 }
 
 /**************************************************************************
@@ -370,7 +480,7 @@ void dio_put_bool8_json(struct json_data_out *dout, char *key,
 void dio_put_bool32_json(struct json_data_out *dout, char *key,
                          const struct plocation* location, bool value)
 {
-  json_object_set_new(dout->json, key, value ? json_true() : json_false());
+  plocation_write_data(dout->json, location, value ? json_true() : json_false());
 }
 
 /**************************************************************************
@@ -380,7 +490,7 @@ void dio_put_ufloat_json(struct json_data_out *dout, char *key,
                          const struct plocation* location,
                          float value, int float_factor)
 {
-  json_object_set_new(dout->json, key, json_real(value));
+  plocation_write_data(dout->json, location, json_real(value));
 }
 
 /**************************************************************************
@@ -390,7 +500,7 @@ void dio_put_sfloat_json(struct json_data_out *dout, char *key,
                          const struct plocation* location,
                          float value, int float_factor)
 {
-  json_object_set_new(dout->json, key, json_real(value));
+  plocation_write_data(dout->json, location, json_real(value));
 }
 
 /**************************************************************************
@@ -423,11 +533,16 @@ void dio_put_memory_json(struct json_data_out *dout, char *key,
 {
   int i;
   char fullkey[512];
+  struct plocation ploc;
+
+  /* TODO: Should probably be a JSON array. */
+  ploc = *plocation_field_new(NULL);
 
   for (i = 0; i < size; i++) {
     fc_snprintf(fullkey, sizeof(fullkey), "%s_%d", key, i);
+    ploc.name = fullkey;
 
-    dio_put_uint8_json(dout, fullkey, NULL, ((unsigned char *)value)[i]);
+    dio_put_uint8_json(dout, fullkey, &ploc, ((unsigned char *)value)[i]);
   }
 }
 
@@ -438,7 +553,7 @@ void dio_put_string_json(struct json_data_out *dout, char *key,
                          const struct plocation* location,
                          const char *value)
 {
-  json_object_set_new(dout->json, key, json_string(value));
+  plocation_write_data(dout->json, location, json_string(value));
 }
 
 /**************************************************************************
@@ -478,7 +593,7 @@ void dio_put_requirement_json(struct json_data_out *dout, char *key,
   json_object_set(requirement, "present", json_boolean(present));
 
   /* Put the requirement object in the packet. */
-  json_object_set_new(dout->json, key, requirement);
+  plocation_write_data(dout->json, location, requirement);
 }
 
 /**************************************************************************
@@ -487,7 +602,7 @@ void dio_put_requirement_json(struct json_data_out *dout, char *key,
 bool dio_get_bool8_json(json_t *json_packet, char *key,
                         const struct plocation* location, bool *dest)
 {
-  json_t *pbool = json_object_get(json_packet, key);
+  json_t *pbool = plocation_read_data(json_packet, location);
 
   if (!pbool) {
     log_error("ERROR: Unable to get bool8 with key: %s", key);
@@ -509,7 +624,7 @@ bool dio_get_bool8_json(json_t *json_packet, char *key,
 bool dio_get_bool32_json(json_t *json_packet, char *key,
                          const struct plocation* location, bool *dest)
 {
-  json_t *pbool = json_object_get(json_packet, key);
+  json_t *pbool = plocation_read_data(json_packet, location);
 
   if (!pbool) {
     log_error("ERROR: Unable to get bool32 with key: %s", key);
@@ -532,7 +647,7 @@ bool dio_get_ufloat_json(json_t *json_packet, char *key,
                          const struct plocation* location,
                          float *dest, int float_factor)
 {
-  json_t *preal = json_object_get(json_packet, key);
+  json_t *preal = plocation_read_data(json_packet, location);
 
   if (!preal) {
     log_error("ERROR: Unable to get real with key: %s", key);
@@ -550,7 +665,7 @@ bool dio_get_sfloat_json(json_t *json_packet, char *key,
                          const struct plocation* location,
                          float *dest, int float_factor)
 {
-  json_t *preal = json_object_get(json_packet, key);
+  json_t *preal = plocation_read_data(json_packet, location);
 
   if (!preal) {
     log_error("ERROR: Unable to get real with key: %s", key);
@@ -567,7 +682,7 @@ bool dio_get_sfloat_json(json_t *json_packet, char *key,
 bool dio_get_sint8_json(json_t *json_packet, char *key,
                         const struct plocation* location, int *dest)
 {
-  json_t *pint = json_object_get(json_packet, key);
+  json_t *pint = plocation_read_data(json_packet, location);
 
   if (!pint) {
     log_error("ERROR: Unable to get sint8 with key: %s", key);
@@ -589,7 +704,7 @@ bool dio_get_sint8_json(json_t *json_packet, char *key,
 bool dio_get_sint16_json(json_t *json_packet, char *key,
                          const struct plocation* location, int *dest)
 {
-  json_t *pint = json_object_get(json_packet, key);
+  json_t *pint = plocation_read_data(json_packet, location);
 
   if (!pint) {
     log_error("ERROR: Unable to get sint16 with key: %s", key);
@@ -614,13 +729,18 @@ bool dio_get_memory_json(json_t *json_packet, char *key,
 {
    int i;
   char fullkey[512];
+  struct plocation ploc;
+
+  /* TODO: Should probably be a JSON array. */
+  ploc = *plocation_field_new(NULL);
 
   for (i = 0; i < dest_size; i++) {
     int val;
 
     fc_snprintf(fullkey, sizeof(fullkey), "%s_%d", key, i);
+    ploc.name = fullkey;
 
-    if (!dio_get_uint8_json(json_packet, fullkey, NULL, &val)) {
+    if (!dio_get_uint8_json(json_packet, fullkey, &ploc, &val)) {
       return FALSE;
     }
     ((unsigned char *)dest)[i] = val;
@@ -636,7 +756,7 @@ bool dio_get_string_json(json_t *json_packet, char *key,
                          const struct plocation* location,
                          char *dest, size_t max_dest_size)
 {
-  json_t *pstring = json_object_get(json_packet, key);
+  json_t *pstring = plocation_read_data(json_packet, location);
 
   if (!pstring) {
     log_error("ERROR: Unable to get string with key: %s", key);
diff --git a/common/generate_packets.py b/common/generate_packets.py
index 1962dcc..f53faed 100755
--- a/common/generate_packets.py
+++ b/common/generate_packets.py
@@ -347,42 +347,50 @@ class Field:
 
     # Returns code which put this field.
     def get_put(self):
+        return '''  #ifdef FREECIV_JSON_CONNECTION
+  field_addr.name = \"%(name)s\";
+  #endif /* FREECIV_JSON_CONNECTION */
+'''%self.__dict__ \
+               + self.get_put_real();
+
+    # The code which put this field before it is wrapped in address adding.
+    def get_put_real(self):
         if self.dataio_type=="bitvector":
-            return "DIO_BV_PUT(&dout, \"%(name)s\", NULL, packet->%(name)s);"%self.__dict__
+            return "DIO_BV_PUT(&dout, \"%(name)s\", &field_addr, packet->%(name)s);"%self.__dict__
 
         if self.struct_type=="float" and not self.is_array:
-            return "  DIO_PUT(%(dataio_type)s, &dout, \"%(name)s\", NULL, real_packet->%(name)s, %(float_factor)d);"%self.__dict__
+            return "  DIO_PUT(%(dataio_type)s, &dout, \"%(name)s\", &field_addr, real_packet->%(name)s, %(float_factor)d);"%self.__dict__
 
         if self.dataio_type in ["worklist"]:
-            return "  DIO_PUT(%(dataio_type)s, &dout, \"%(name)s\", NULL, &real_packet->%(name)s);"%self.__dict__
+            return "  DIO_PUT(%(dataio_type)s, &dout, \"%(name)s\", &field_addr, &real_packet->%(name)s);"%self.__dict__
 
         if self.dataio_type in ["memory"]:
-            return "  DIO_PUT(%(dataio_type)s, &dout, \"%(name)s\", NULL, &real_packet->%(name)s, %(array_size_u)s);"%self.__dict__
+            return "  DIO_PUT(%(dataio_type)s, &dout, \"%(name)s\", &field_addr, &real_packet->%(name)s, %(array_size_u)s);"%self.__dict__
 
         arr_types=["string","city_map","tech_list",
                    "unit_list","building_list"]
         if (self.dataio_type in arr_types and self.is_array==1) or \
            (self.dataio_type not in arr_types and self.is_array==0):
-            return "  DIO_PUT(%(dataio_type)s, &dout, \"%(name)s\", NULL, real_packet->%(name)s);"%self.__dict__
+            return "  DIO_PUT(%(dataio_type)s, &dout, \"%(name)s\", &field_addr, real_packet->%(name)s);"%self.__dict__
         if self.is_struct:
             if self.is_array==2:
-                c="DIO_PUT(%(dataio_type)s, &dout, namestr, NULL, &real_packet->%(name)s[i][j]);"%self.__dict__
+                c="DIO_PUT(%(dataio_type)s, &dout, namestr, &field_addr, &real_packet->%(name)s[i][j]);"%self.__dict__
             else:
-                c="DIO_PUT(%(dataio_type)s, &dout, namestr, NULL, &real_packet->%(name)s[i]);"%self.__dict__
+                c="DIO_PUT(%(dataio_type)s, &dout, namestr, &field_addr, &real_packet->%(name)s[i]);"%self.__dict__
         elif self.dataio_type=="string":
-            c="DIO_PUT(%(dataio_type)s, &dout, namestr, NULL, real_packet->%(name)s[i]);"%self.__dict__
+            c="DIO_PUT(%(dataio_type)s, &dout, namestr, &field_addr, real_packet->%(name)s[i]);"%self.__dict__
             array_size_u=self.array_size1_u
 
         elif self.struct_type=="float":
             if self.is_array==2:
-                c="  DIO_PUT(%(dataio_type)s, &dout, namestr, NULL, real_packet->%(name)s[i][j], %(float_factor)d);"%self.__dict__
+                c="  DIO_PUT(%(dataio_type)s, &dout, namestr, &field_addr, real_packet->%(name)s[i][j], %(float_factor)d);"%self.__dict__
             else:
-                c="  DIO_PUT(%(dataio_type)s, &dout, namestr, NULL, real_packet->%(name)s[i], %(float_factor)d);"%self.__dict__
+                c="  DIO_PUT(%(dataio_type)s, &dout, namestr, &field_addr, real_packet->%(name)s[i], %(float_factor)d);"%self.__dict__
         else:
             if self.is_array==2:
-                c="DIO_PUT(%(dataio_type)s, &dout, namestr, NULL, real_packet->%(name)s[i][j]);"%self.__dict__
+                c="DIO_PUT(%(dataio_type)s, &dout, namestr, &field_addr, real_packet->%(name)s[i][j]);"%self.__dict__
             else:
-                c="DIO_PUT(%(dataio_type)s, &dout, namestr, NULL, real_packet->%(name)s[i]);"%self.__dict__
+                c="DIO_PUT(%(dataio_type)s, &dout, namestr, &field_addr, real_packet->%(name)s[i]);"%self.__dict__
 
         if not self.diff:
             if self.is_array==2 and self.dataio_type!="string":
@@ -395,6 +403,9 @@ class Field:
           char namestr[512];
 
           fc_snprintf(namestr, sizeof(namestr), \"%(name)s_%%%%d_%%%%d\", i, j);
+          #ifdef FREECIV_JSON_CONNECTION
+          field_addr.name = namestr;
+          #endif /* FREECIV_JSON_CONNECTION */
           %(c)s
         }
       }
@@ -403,11 +414,13 @@ class Field:
                 return '''
     {
       int i;
-
       for (i = 0; i < %(array_size_u)s; i++) {
         char namestr[512];
 
         fc_snprintf(namestr, sizeof(namestr), \"%(name)s_%%%%d\", i);
+        #ifdef FREECIV_JSON_CONNECTION
+        field_addr.name = namestr;
+        #endif /* FREECIV_JSON_CONNECTION */
         %(c)s
       }
     } '''%self.get_dict(vars())
@@ -423,12 +436,18 @@ class Field:
       for (i = 0; i < %(array_size_u)s; i++) {
         if (old->%(name)s[i] != real_packet->%(name)s[i]) {
           fc_snprintf(namestr, sizeof(namestr), "index_%%%%d", count++);
-          DIO_PUT(uint8, &dout, namestr, NULL, i);
+          #ifdef FREECIV_JSON_CONNECTION
+          field_addr.name = namestr;
+          #endif /* FREECIV_JSON_CONNECTION */
+          DIO_PUT(uint8, &dout, namestr, &field_addr, i);
           %(c)s
         }
       }
       fc_snprintf(namestr, sizeof(namestr), "index_%%%%d", count++);
-      DIO_PUT(uint8, &dout, namestr, NULL, 255);
+      #ifdef FREECIV_JSON_CONNECTION
+      field_addr.name = namestr;
+      #endif /* FREECIV_JSON_CONNECTION */
+      DIO_PUT(uint8, &dout, namestr, &field_addr, 255);
     } '''%self.get_dict(vars())
 
     # Returns a code fragement which will get the field if the
@@ -451,37 +470,45 @@ class Field:
 
     # Returns code which get this field.
     def get_get(self):
+        return '''#ifdef FREECIV_JSON_CONNECTION
+field_addr.name = \"%(name)s\";
+#endif /* FREECIV_JSON_CONNECTION */
+'''%self.__dict__ \
+               + self.get_get_real();
+
+    # The code which get this field before it is wrapped in address adding.
+    def get_get_real(self):
         if self.struct_type=="float" and not self.is_array:
-            return '''if (!DIO_GET(%(dataio_type)s, &din, \"%(name)s\", NULL, &real_packet->%(name)s, %(float_factor)d)) {
+            return '''if (!DIO_GET(%(dataio_type)s, &din, \"%(name)s\", &field_addr, &real_packet->%(name)s, %(float_factor)d)) {
   RECEIVE_PACKET_FIELD_ERROR(%(name)s);
 }'''%self.__dict__
         if self.dataio_type=="bitvector":
-            return '''if (!DIO_BV_GET(&din, \"%(name)s\", NULL, real_packet->%(name)s)) {
+            return '''if (!DIO_BV_GET(&din, \"%(name)s\", &field_addr, real_packet->%(name)s)) {
   RECEIVE_PACKET_FIELD_ERROR(%(name)s);
 }'''%self.__dict__
         if self.dataio_type in ["string","city_map"] and \
            self.is_array!=2:
-            return '''if (!DIO_GET(%(dataio_type)s, &din, \"%(name)s\", NULL, real_packet->%(name)s, sizeof(real_packet->%(name)s))) {
+            return '''if (!DIO_GET(%(dataio_type)s, &din, \"%(name)s\", &field_addr, real_packet->%(name)s, sizeof(real_packet->%(name)s))) {
   RECEIVE_PACKET_FIELD_ERROR(%(name)s);
 }'''%self.__dict__
         if self.is_struct and self.is_array==0:
-            return '''if (!DIO_GET(%(dataio_type)s, &din, \"%(name)s\", NULL, &real_packet->%(name)s)) {
+            return '''if (!DIO_GET(%(dataio_type)s, &din, \"%(name)s\", &field_addr, &real_packet->%(name)s)) {
   RECEIVE_PACKET_FIELD_ERROR(%(name)s);
 }'''%self.__dict__
         if self.dataio_type in ["tech_list","unit_list","building_list"]:
-            return '''if (!DIO_GET(%(dataio_type)s, &din, \"%(name)s\", NULL, real_packet->%(name)s)) {
+            return '''if (!DIO_GET(%(dataio_type)s, &din, \"%(name)s\", &field_addr, real_packet->%(name)s)) {
   RECEIVE_PACKET_FIELD_ERROR(%(name)s);
 }'''%self.__dict__
         if not self.is_array:
             if self.struct_type in ["int","bool"]:
-                return '''if (!DIO_GET(%(dataio_type)s, &din, \"%(name)s\", NULL, &real_packet->%(name)s)) {
+                return '''if (!DIO_GET(%(dataio_type)s, &din, \"%(name)s\", &field_addr, &real_packet->%(name)s)) {
   RECEIVE_PACKET_FIELD_ERROR(%(name)s);
 }'''%self.__dict__
             else:
                 return '''{
   int readin;
   
-  if (!DIO_GET(%(dataio_type)s, &din, \"%(name)s\", NULL, &readin)) {
+  if (!DIO_GET(%(dataio_type)s, &din, \"%(name)s\", &field_addr, &readin)) {
     RECEIVE_PACKET_FIELD_ERROR(%(name)s);
   }
   real_packet->%(name)s = readin;
@@ -489,49 +516,49 @@ class Field:
 
         if self.is_struct:
             if self.is_array==2:
-                c='''if (!DIO_GET(%(dataio_type)s, &din, namestr, NULL, &real_packet->%(name)s[i][j])) {
+                c='''if (!DIO_GET(%(dataio_type)s, &din, namestr, &field_addr, &real_packet->%(name)s[i][j])) {
       RECEIVE_PACKET_FIELD_ERROR(%(name)s);
     }'''%self.__dict__
             else:
-                c='''if (!DIO_GET(%(dataio_type)s, &din, namestr, NULL, &real_packet->%(name)s[i])) {
+                c='''if (!DIO_GET(%(dataio_type)s, &din, namestr, &field_addr, &real_packet->%(name)s[i])) {
       RECEIVE_PACKET_FIELD_ERROR(%(name)s);
     }'''%self.__dict__
         elif self.dataio_type=="string":
-            c='''if (!DIO_GET(%(dataio_type)s, &din, namestr, NULL, real_packet->%(name)s[i], sizeof(real_packet->%(name)s[i]))) {
+            c='''if (!DIO_GET(%(dataio_type)s, &din, namestr, &field_addr, real_packet->%(name)s[i], sizeof(real_packet->%(name)s[i]))) {
       RECEIVE_PACKET_FIELD_ERROR(%(name)s);
     }'''%self.__dict__
         elif self.struct_type=="float":
             if self.is_array==2:
-                c='''if (!DIO_GET(%(dataio_type)s, &din, namestr, NULL, &real_packet->%(name)s[i][j], %(float_factor)d)) {
+                c='''if (!DIO_GET(%(dataio_type)s, &din, namestr, &field_addr, &real_packet->%(name)s[i][j], %(float_factor)d)) {
       RECEIVE_PACKET_FIELD_ERROR(%(name)s);
     }'''%self.__dict__
             else:
-                c='''if (!DIO_GET(%(dataio_type)s, &din, namestr, NULL, &real_packet->%(name)s[i], %(float_factor)d)) {
+                c='''if (!DIO_GET(%(dataio_type)s, &din, namestr, &field_addr, &real_packet->%(name)s[i], %(float_factor)d)) {
       RECEIVE_PACKET_FIELD_ERROR(%(name)s);
     }'''%self.__dict__
         elif self.is_array==2:
             if self.struct_type in ["int","bool"]:
-                c='''if (!DIO_GET(%(dataio_type)s, &din, namestr, NULL, &real_packet->%(name)s[i][j])) {
+                c='''if (!DIO_GET(%(dataio_type)s, &din, namestr, &field_addr, &real_packet->%(name)s[i][j])) {
       RECEIVE_PACKET_FIELD_ERROR(%(name)s);
     }'''%self.__dict__
             else:
                 c='''{
       int readin;
   
-      if (!DIO_GET(%(dataio_type)s, &din, \"%(name)s\", NULL, &readin)) {
+      if (!DIO_GET(%(dataio_type)s, &din, \"%(name)s\", &field_addr, &readin)) {
         RECEIVE_PACKET_FIELD_ERROR(%(name)s);
       }
       real_packet->%(name)s[i][j] = readin;
     }'''%self.__dict__
         elif self.struct_type in ["int","bool"]:
-            c='''if (!DIO_GET(%(dataio_type)s, &din, namestr, NULL, &real_packet->%(name)s[i])) {
+            c='''if (!DIO_GET(%(dataio_type)s, &din, namestr, &field_addr, &real_packet->%(name)s[i])) {
       RECEIVE_PACKET_FIELD_ERROR(%(name)s);
     }'''%self.__dict__
         else:
             c='''{
       int readin;
   
-      if (!DIO_GET(%(dataio_type)s, &din, namestr, NULL, &readin)) {
+      if (!DIO_GET(%(dataio_type)s, &din, namestr, &field_addr, &readin)) {
         RECEIVE_PACKET_FIELD_ERROR(%(name)s);
       }
       real_packet->%(name)s[i] = readin;
@@ -554,7 +581,7 @@ class Field:
                 extra=""
             if self.dataio_type=="memory":
                 return '''%(extra)s
-  if (!DIO_GET(%(dataio_type)s, &din, \"%(name)s\", NULL, real_packet->%(name)s, %(array_size_u)s)){
+  if (!DIO_GET(%(dataio_type)s, &din, \"%(name)s\", &field_addr, real_packet->%(name)s, %(array_size_u)s)){
     RECEIVE_PACKET_FIELD_ERROR(%(name)s);
   }'''%self.get_dict(vars())
             elif self.is_array==2 and self.dataio_type!="string":
@@ -567,6 +594,9 @@ class Field:
       char namestr[512];
 
       fc_snprintf(namestr, sizeof(namestr), \"%(name)s_%%%%d_%%%%d\", i, j);
+      #ifdef FREECIV_JSON_CONNECTION
+      field_addr.name = namestr;
+      #endif /* FREECIV_JSON_CONNECTION */
       %(c)s
     }
   }
@@ -580,6 +610,9 @@ class Field:
     char namestr[512];
 
     fc_snprintf(namestr, sizeof(namestr), \"%(name)s_%%%%d\", i);
+    #ifdef FREECIV_JSON_CONNECTION
+    field_addr.name = namestr;
+    #endif /* FREECIV_JSON_CONNECTION */
     %(c)s
   }
 }'''%self.get_dict(vars())
@@ -588,7 +621,7 @@ class Field:
 for (;;) {
   int i;
 
-  if (!DIO_GET(uint8, &din, \"%(name)s\", NULL, &i)) {
+  if (!DIO_GET(uint8, &din, \"%(name)s\", &field_addr, &i)) {
     RECEIVE_PACKET_FIELD_ERROR(%(name)s);
   }
   if (i == 255) {
@@ -603,6 +636,9 @@ for (;;) {
     char namestr[512];
 
     fc_snprintf(namestr, sizeof(namestr), \"%(name)s_%%%%d\", i);
+    #ifdef FREECIV_JSON_CONNECTION
+    field_addr.name = namestr;
+    #endif /* FREECIV_JSON_CONNECTION */
     %(c)s
   }
 }'''%self.get_dict(vars())
@@ -792,7 +828,7 @@ static char *stats_%(name)s_names[] = {%(names)s};
         temp='''%(send_prototype)s
 {
 <real_packet1><delta_header>  SEND_PACKET_START(%(type)s);
-<log><report><pre1><body><pre2><post>  SEND_PACKET_END(%(type)s);
+<faddr><log><report><pre1><body><pre2><post>  SEND_PACKET_END(%(type)s);
 }
 
 '''
@@ -862,6 +898,14 @@ static char *stats_%(name)s_names[] = {%(names)s};
         else:
             post=""
 
+        if len(self.fields) != 0:
+            faddr = '''  #ifdef FREECIV_JSON_CONNECTION
+  struct plocation field_addr = *plocation_field_new(NULL);
+  #endif /* FREECIV_JSON_CONNECTION */
+'''
+        else:
+            faddr = ""
+
         for i in range(2):
             for k,v in vars().items():
                 if type(v)==type(""):
@@ -909,7 +953,7 @@ static char *stats_%(name)s_names[] = {%(names)s};
 '''%self.get_dict(vars())
 
         body=body+'''
-  DIO_BV_PUT(&dout, \"fields\", NULL, fields);
+  DIO_BV_PUT(&dout, \"fields\", &field_addr, fields);
 '''
 
         for field in self.key_fields:
@@ -941,7 +985,7 @@ static char *stats_%(name)s_names[] = {%(names)s};
         temp='''%(receive_prototype)s
 {
 <delta_header>  RECEIVE_PACKET_START(%(packet_name)s, real_packet);
-<delta_body1><body1><log><body2><post>  RECEIVE_PACKET_END(real_packet);
+<faddr><delta_body1><body1><log><body2><post>  RECEIVE_PACKET_END(real_packet);
 }
 
 '''
@@ -950,7 +994,7 @@ static char *stats_%(name)s_names[] = {%(names)s};
   struct %(packet_name)s *old;
   struct genhash **hash = pc->phs.received + %(type)s;
 '''
-            delta_body1="\n  DIO_BV_GET(&din, \"fields\", NULL, fields);\n"
+            delta_body1="\n  DIO_BV_GET(&din, \"fields\", &field_addr, fields);\n"
             body1=""
             for field in self.key_fields:
                 body1=body1+prefix("  ",field.get_get())+"\n"
@@ -977,6 +1021,14 @@ static char *stats_%(name)s_names[] = {%(names)s};
         else:
             post=""
 
+        if len(self.fields) != 0:
+            faddr = '''  #ifdef FREECIV_JSON_CONNECTION
+  struct plocation field_addr = *plocation_field_new(NULL);
+  #endif /* FREECIV_JSON_CONNECTION */
+'''
+        else:
+            faddr = ""
+
         for i in range(2):
             for k,v in vars().items():
                 if type(v)==type(""):
diff --git a/common/packets_json.h b/common/packets_json.h
index be1b456..1cddcc3 100644
--- a/common/packets_json.h
+++ b/common/packets_json.h
@@ -26,13 +26,15 @@ void *get_packet_from_connection_json(struct connection *pc,
 
 #define SEND_PACKET_START(packet_type) \
   unsigned char buffer[MAX_LEN_PACKET * 5]; \
+  struct plocation pid_addr; \
   char *json_buffer = NULL; \
   struct json_data_out dout; \
   dout.json = json_object(); \
   \
   dio_output_init(&(dout.raw), buffer, sizeof(buffer)); \
   dio_put_uint16_raw(&(dout.raw), 0);                   \
-  dio_put_uint8_json(&dout, "pid", NULL, packet_type);
+  pid_addr = *plocation_field_new("pid");              \
+  dio_put_uint8_json(&dout, "pid", &pid_addr, packet_type);
 
 #define SEND_PACKET_END(packet_type) \
   { \
@@ -51,7 +53,7 @@ void *get_packet_from_connection_json(struct connection *pc,
     return send_packet_data(pc, buffer, size, packet_type); \
   }
 
-#define RECEIVE_PACKET_START(packet_type, result) \
+#define RECEIVE_PACKET_START(packet_type, result)       \
   struct packet_type packet_buf, *result = &packet_buf;
 
 #define RECEIVE_PACKET_END(result) \
-- 
2.1.4

