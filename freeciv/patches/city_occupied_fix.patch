From febce638ac7f913cdea34ecb785f60a40b46df45 Mon Sep 17 00:00:00 2001
From: Sveinung Kvilhaugsvik <sveinung84@users.sourceforge.net>
Date: Mon, 24 Aug 2015 20:31:59 +0200
Subject: [PATCH 5/7] Add a common check if a city is occupied

Where to look when checking if a city is occupied depends on who is doing
it. The server is supposed to check units at the tile. The client has the
occupied city property.

This can cause copy past errors.

Add the new common function city_is_occupied(). It will check its context
before looking in the correct place.

Use it in the popup info text generation so Freeciv-web won't start claiming
that occupied cities are unoccupied if it is copied again.

See bug #23813
---
 client/text.c |  2 +-
 common/city.c | 14 ++++++++++++++
 common/city.h |  1 +
 3 files changed, 16 insertions(+), 1 deletion(-)

diff --git a/client/text.c b/client/text.c
index e2520b4..aae5217 100644
--- a/client/text.c
+++ b/client/text.c
@@ -284,7 +284,7 @@ const char *popup_info_text(struct tile *ptile)
         astr_add(&str, _(" | Not occupied."));
       }
     } else {
-      if (pcity->client.occupied) {
+      if (city_is_occupied(pcity)) {
         astr_add(&str, _(" | Occupied."));
       } else {
         astr_add(&str, _(" | Not occupied."));
diff --git a/common/city.c b/common/city.c
index cabcbe5..6bc99b0 100644
--- a/common/city.c
+++ b/common/city.c
@@ -1583,6 +1583,20 @@ bool city_rapture_grow(const struct city *pcity)
 }
 
 /**************************************************************************
+  Returns TRUE iff the city is occupied.
+**************************************************************************/
+bool city_is_occupied(const struct city *pcity)
+{
+  if (is_server()) {
+    /* The server sees the units inside the city. */
+    return (unit_list_size(city_tile(pcity)->units) > 0);
+  } else {
+    /* The client gets the occupied property from the server. */
+    return pcity->client.occupied;
+  }
+}
+
+/**************************************************************************
   Find city with given id from list.
 **************************************************************************/
 struct city *city_list_find_number(struct city_list *This, int id)
diff --git a/common/city.h b/common/city.h
index 082c56b..189bbdf 100644
--- a/common/city.h
+++ b/common/city.h
@@ -541,6 +541,7 @@ bool city_unhappy(const struct city *pcity);                /* anarchy??? */
 bool base_city_celebrating(const struct city *pcity);
 bool city_celebrating(const struct city *pcity);            /* love the king ??? */
 bool city_rapture_grow(const struct city *pcity);
+bool city_is_occupied(const struct city *pcity);
 
 /* city related improvement and unit functions */
 
-- 
2.1.4

