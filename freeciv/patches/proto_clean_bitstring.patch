From 7fd5c9e5c4b035a8708f962845155ad34b6dca29 Mon Sep 17 00:00:00 2001
From: sveinung <sveinung@a0f10bec-cc02-0410-94fc-a9cfff90b4cd>
Date: Sun, 19 Apr 2015 14:21:07 +0000
Subject: [PATCH 2/3] Clean up the remains of the bit string protocol field
 type support.

Support for sending bit strings over the network was removed from the raw
protocol in patch #4181. (Transferring as a bit vector is more efficient)
Remove the remaining fossils of that support.

See patch #6009

git-svn-id: svn://svn.gna.org/svn/freeciv/trunk@28812 a0f10bec-cc02-0410-94fc-a9cfff90b4cd
---
 common/dataio_json.h       | 3 ---
 common/generate_packets.py | 6 +++---
 2 files changed, 3 insertions(+), 6 deletions(-)

diff --git a/common/dataio_json.h b/common/dataio_json.h
index f631fca..6584f49 100644
--- a/common/dataio_json.h
+++ b/common/dataio_json.h
@@ -62,8 +62,6 @@ bool dio_get_ufloat_json(json_t *json_packet, char *key, float *dest, int float_
 bool dio_get_sfloat_json(json_t *json_packet, char *key, float *dest, int float_factor);
 bool dio_get_memory_json(json_t *json_packet, char *key, void *dest, size_t dest_size);
 bool dio_get_string_json(json_t *json_packet, char *key, char *dest, size_t max_dest_size);
-bool dio_get_bit_string_json(json_t *json_packet, char *key, char *dest,
-                             size_t max_dest_size);
 bool dio_get_tech_list_json(json_t *json_packet, char *key, int *dest);
 bool dio_get_unit_list_json(json_t *json_packet, char *key, int *dest);
 bool dio_get_building_list_json(json_t *json_packet, char *key, int *dest);
@@ -104,7 +102,6 @@ void dio_put_sfloat_json(struct json_data_out *dout, char *key, float value, int
 
 void dio_put_memory_json(struct json_data_out *dout, char *key, const void *value, size_t size);
 void dio_put_string_json(struct json_data_out *dout, char *key, const char *value);
-void dio_put_bit_string_json(struct json_data_out *dout, char *key, const char *value);
 void dio_put_city_map_json(struct json_data_out *dout, char *key, const char *value);
 void dio_put_tech_list_json(struct json_data_out *dout, char *key, const int *value);
 void dio_put_unit_list_json(struct json_data_out *dout, char *key, const int *value);
diff --git a/common/generate_packets.py b/common/generate_packets.py
index b2fd4a8..536d77b 100755
--- a/common/generate_packets.py
+++ b/common/generate_packets.py
@@ -266,7 +266,7 @@ class Field:
             return "  differ = (memcmp(old->%(name)s, real_packet->%(name)s, %(array_size_d)s) != 0);"%self.__dict__
         if self.dataio_type=="bitvector":
             return "  differ = !BV_ARE_EQUAL(old->%(name)s, real_packet->%(name)s);"%self.__dict__
-        if self.dataio_type in ["string","bit_string"] and self.is_array==1:
+        if self.dataio_type in ["string"] and self.is_array==1:
             return "  differ = (strcmp(old->%(name)s, real_packet->%(name)s) != 0);"%self.__dict__
         if self.is_struct and self.is_array==0:
             return "  differ = !are_%(dataio_type)ss_equal(&old->%(name)s, &real_packet->%(name)s);"%self.__dict__
@@ -359,7 +359,7 @@ class Field:
         if self.dataio_type in ["memory"]:
             return "  DIO_PUT(%(dataio_type)s, &dout, \"%(name)s\", &real_packet->%(name)s, %(array_size_u)s);"%self.__dict__
 
-        arr_types=["string","bit_string","city_map","tech_list",
+        arr_types=["string","city_map","tech_list",
                    "unit_list","building_list"]
         if (self.dataio_type in arr_types and self.is_array==1) or \
            (self.dataio_type not in arr_types and self.is_array==0):
@@ -459,7 +459,7 @@ class Field:
             return '''if (!DIO_BV_GET(&din, \"%(name)s\", real_packet->%(name)s)) {
   RECEIVE_PACKET_FIELD_ERROR(%(name)s);
 }'''%self.__dict__
-        if self.dataio_type in ["string","bit_string","city_map"] and \
+        if self.dataio_type in ["string","city_map"] and \
            self.is_array!=2:
             return '''if (!DIO_GET(%(dataio_type)s, &din, \"%(name)s\", real_packet->%(name)s, sizeof(real_packet->%(name)s))) {
   RECEIVE_PACKET_FIELD_ERROR(%(name)s);
-- 
2.1.4

