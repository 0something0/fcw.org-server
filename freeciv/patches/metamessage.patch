From f8d400810eb41cb8c3bc678f7125cfecd3fdc69f Mon Sep 17 00:00:00 2001
From: sveinung <sveinung@a0f10bec-cc02-0410-94fc-a9cfff90b4cd>
Date: Sun, 31 Jan 2016 06:06:14 +0000
Subject: [PATCH] Make user meta server message a setting.

This gives it access to various setting features like the /show command and
the client side server setting GUI.

Freeciv-web has a GUI for setting the user meta server message. At the
moment it has to patch Freeciv to transfer the current metamessage value to
the client. The value of server settings are transfered to the client.

Don't remove the old metamessage command. Reasons:
* it can set a message with quotation marks
* consistency with the other meta server settings
* old scripts may rely on it
* server administrators are used to it

See patch #6876

git-svn-id: svn://svn.gna.org/svn/freeciv/trunk@31682 a0f10bec-cc02-0410-94fc-a9cfff90b4cd
---
 common/game.c       |  1 -
 common/game.h       |  3 ++-
 fc_version          |  2 +-
 server/legacysave.c |  6 +++---
 server/meta.c       |  5 ++---
 server/savecompat.c | 50 ++++++++++++++++++++++++++++++++++++++++++++++++++
 server/savegame2.c  |  9 ---------
 server/savegame3.c  | 16 ----------------
 server/settings.c   | 28 ++++++++++++++++++++++++++++
 9 files changed, 86 insertions(+), 34 deletions(-)

diff --git a/common/game.c b/common/game.c
index ee16948..1ff2c4d 100644
--- a/common/game.c
+++ b/common/game.c
@@ -391,7 +391,6 @@ static void game_defaults(void)
     game.server.last_ping         = 0;
     game.server.max_players       = GAME_DEFAULT_MAX_PLAYERS;
     game.server.meta_info.user_message[0] = '\0';
-    game.server.meta_info.user_message_set = FALSE;
     /* Do not clear meta_info.type here as it's already set to correct value */
     game.server.mgr_distance      = GAME_DEFAULT_MGR_DISTANCE;
     game.server.mgr_foodneeded    = GAME_DEFAULT_MGR_FOODNEEDED;
diff --git a/common/game.h b/common/game.h
index 1731f32..cd52012 100644
--- a/common/game.h
+++ b/common/game.h
@@ -245,7 +245,6 @@ struct civ_game {
       } save_options;
 
       struct {
-        bool user_message_set;
         char user_message[256];
         char type[20];
       } meta_info;
@@ -594,6 +593,8 @@ extern struct civ_game game;
 
 #define GAME_DEFAULT_THREADED_SAVE   FALSE
 
+#define GAME_DEFAULT_USER_META_MESSAGE ""
+
 #define GAME_DEFAULT_SKILL_LEVEL     AI_LEVEL_EASY
 #define GAME_HARDCODED_DEFAULT_SKILL_LEVEL 3 /* that was 'easy' in old saves */
 #define GAME_OLD_DEFAULT_SKILL_LEVEL 5  /* normal; for oldest save games */
diff --git a/server/savegame.c b/server/savegame.c
index 683e708..4d0ddf5 100644
--- a/server/savegame.c
+++ b/server/savegame.c
@@ -3289,9 +3289,9 @@ static void game_load_internal(struct section_file *file)
     set_meta_patches_string(secfile_lookup_str_default(file, 
                                                 default_meta_patches_string(),
                                                 "game.metapatches"));
-    game.server.meta_info.user_message_set =
-      secfile_lookup_bool_default(file, FALSE, "game.user_metamessage");
-    if (game.server.meta_info.user_message_set) {
+
+    if (secfile_lookup_bool_default(file, FALSE,
+                                    "game.user_metamessage")) {
       set_user_meta_message_string(secfile_lookup_str_default(file, 
                                                 default_meta_message_string(),
                                                 "game.metamessage"));
diff --git a/server/meta.c b/server/meta.c
index 16ee0be..884be8d 100644
--- a/server/meta.c
+++ b/server/meta.c
@@ -134,7 +134,8 @@ static const char *get_meta_type_string(void)
 *************************************************************************/
 const char *get_user_meta_message_string(void)
 {
-  if (game.server.meta_info.user_message_set) {
+  if (game.server.meta_info.user_message
+      && game.server.meta_info.user_message[0] != '\0') {
     return game.server.meta_info.user_message;
   }
 
@@ -187,12 +188,10 @@ void set_user_meta_message_string(const char *string)
 {
   if (string != NULL && string[0] != '\0') {
     sz_strlcpy(game.server.meta_info.user_message, string);
-    game.server.meta_info.user_message_set = TRUE;
     set_meta_message_string(string);
   } else {
     /* Remove user meta message. We will use automatic messages instead */
     game.server.meta_info.user_message[0] = '\0';
-    game.server.meta_info.user_message_set = FALSE;
     set_meta_message_string(default_meta_message_string());    
   }
 }
diff --git a/server/savecompat.c b/server/savecompat.c
index 2f68c90..1447ab6 100644
--- a/server/savecompat.c
+++ b/server/savecompat.c
@@ -1149,4 +1149,5 @@ static void compat_load_030000(struct loaddata *loading)
   bool randsaved;
+  int num_settings;
   
   /* Check status and return if not OK (sg_success != TRUE). */
   sg_check_ret();
@@ -1175,6 +1176,30 @@ static void compat_load_030000(struct loaddata *loading)
                              "player%d.flags", plrno);
     }
   }
+
+  /* Settings */
+  num_settings = secfile_lookup_int_default(loading->file, 0,
+                                            "settings.set_count");
+
+  /* User meta server message is now a setting. */
+  if (secfile_lookup_bool_default(loading->file, FALSE,
+                                  "game.meta_usermessage")) {
+    const char *metamessage;
+
+    metamessage = secfile_lookup_str_default(loading->file, "",
+                                             "game.meta_message");
+
+    /* Insert the meta message as a setting */
+    secfile_insert_str(loading->file, "metamessage",
+                       "settings.set%d.name", num_settings);
+    secfile_insert_str(loading->file, metamessage,
+                       "settings.set%d.value", num_settings);
+    secfile_insert_str(loading->file, "",
+                       "settings.set%d.gamestart", num_settings);
+    num_settings++;
+  }
+
+  secfile_replace_int(loading->file, num_settings, "settings.set_count");
 }
 
 #ifdef FREECIV_DEV_SAVE_COMPAT
@@ -1213,6 +1238,7 @@ static void compat_load_dev(struct loaddata *loading)
   int plrno;
   int nplayers;
   size_t diplstate_type_size;
+  int num_settings;
 
   /* Check status and return if not OK (sg_success != TRUE). */
   sg_check_ret();
@@ -1443,6 +1469,30 @@ static void compat_load_dev(struct loaddata *loading)
       }
     }
   }
+
+  /* Settings */
+  num_settings = secfile_lookup_int_default(loading->file, 0,
+                                            "settings.set_count");
+
+  /* User meta server message is now a setting. */
+  if (secfile_lookup_bool_default(loading->file, FALSE,
+                                  "game.meta_usermessage")) {
+    const char *metamessage;
+
+    metamessage = secfile_lookup_str_default(loading->file, "",
+                                             "game.meta_message");
+
+    /* Insert the meta message as a setting */
+    secfile_insert_str(loading->file, "metamessage",
+                       "settings.set%d.name", num_settings);
+    secfile_insert_str(loading->file, metamessage,
+                       "settings.set%d.value", num_settings);
+    secfile_insert_str(loading->file, "",
+                       "settings.set%d.gamestart", num_settings);
+    num_settings++;
+  }
+
+  secfile_replace_int(loading->file, num_settings, "settings.set_count");
 }
 #endif /* FREECIV_DEV_SAVE_COMPAT */
 
diff --git a/server/savegame2.c b/server/savegame2.c
index 58daea4..da2dbd7 100644
--- a/server/savegame2.c
+++ b/server/savegame2.c
@@ -1464,15 +1464,6 @@ static void sg_load_game(struct loaddata *loading)
                                       default_meta_patches_string(),
                                       "game.meta_patches");
   set_meta_patches_string(string);
-  game.server.meta_info.user_message_set
-    = secfile_lookup_bool_default(loading->file, FALSE,
-                                  "game.meta_usermessage");
-  if (game.server.meta_info.user_message_set) {
-    string = secfile_lookup_str_default(loading->file,
-                                        default_meta_message_string(),
-                                        "game.meta_message");
-    set_user_meta_message_string(string);
-  }
 
   if (0 == strcmp(DEFAULT_META_SERVER_ADDR, srvarg.metaserver_addr)) {
     /* Do not overwrite this if the user requested a specific metaserver
diff --git a/server/savegame3.c b/server/savegame3.c
index fc47a57..e7d299e 100644
--- a/server/savegame3.c
+++ b/server/savegame3.c
@@ -1780,15 +1780,6 @@ static void sg_load_game(struct loaddata *loading)
                                       default_meta_patches_string(),
                                       "game.meta_patches");
   set_meta_patches_string(string);
-  game.server.meta_info.user_message_set
-    = secfile_lookup_bool_default(loading->file, FALSE,
-                                  "game.meta_usermessage");
-  if (game.server.meta_info.user_message_set) {
-    string = secfile_lookup_str_default(loading->file,
-                                        default_meta_message_string(),
-                                        "game.meta_message");
-    set_user_meta_message_string(string);
-  }
 
   if (0 == strcmp(DEFAULT_META_SERVER_ADDR, srvarg.metaserver_addr)) {
     /* Do not overwrite this if the user requested a specific metaserver
@@ -1954,12 +1944,6 @@ static void sg_save_game(struct savedata *saving)
 
   secfile_insert_str(saving->file, get_meta_patches_string(),
                      "game.meta_patches");
-  secfile_insert_bool(saving->file, game.server.meta_info.user_message_set,
-                      "game.meta_usermessage");
-  user_message = get_user_meta_message_string();
-  if (user_message != NULL) {
-    secfile_insert_str(saving->file, user_message, "game.meta_message");
-  }
   secfile_insert_str(saving->file, meta_addr_port(), "game.meta_server");
 
   secfile_insert_str(saving->file, server.game_identifier, "game.id");
diff --git a/server/settings.c b/server/settings.c
index a2789e3..d4832a6 100644
--- a/server/settings.c
+++ b/server/settings.c
@@ -31,6 +31,7 @@
 /* server */
 #include "gamehand.h"
 #include "maphand.h"
+#include "meta.h"
 #include "notify.h"
 #include "plrhand.h"
 #include "report.h"
@@ -744,6 +745,23 @@ static void topology_action(const struct setting *pset)
 }
 
 /*************************************************************************
+  Update metaserver message string from changed user meta server message
+  string.
+*************************************************************************/
+static void metamessage_action(const struct setting *pset)
+{
+  /* Set the metaserver message based on the new meta server user message.
+   * An empty user metaserver message results in an automatic meta message.
+   * A non empty user meta message results in the user meta message. */
+  set_user_meta_message_string(pset->string.value);
+
+  if (is_metaserver_open()) {
+    /* Update the meta server. */
+    send_server_info_to_metaserver(META_INFO);
+  }
+}
+
+/*************************************************************************
   Validation callback functions.
 *************************************************************************/
 
@@ -2754,6 +2772,16 @@ static struct setting settings[] = {
              "\"kick\" command may reconnect. Changing this setting will "
              "affect users kicked in the past."), NULL, NULL, NULL,
           GAME_MIN_KICK_TIME, GAME_MAX_KICK_TIME, GAME_DEFAULT_KICK_TIME)
+
+  GEN_STRING("metamessage", game.server.meta_info.user_message,
+             SSET_META, SSET_INTERNAL, SSET_RARE, SSET_SERVER_ONLY,
+             N_("Metaserver info line"),
+             N_("User defined metaserver info line. For most of the time "
+                "a user defined metamessage will be used instead of an "
+                "automatically generated message. "
+                "Set to empty (\"\", not \"empty\") to always use an "
+                "automatically generated meta server message."),
+             NULL, metamessage_action, GAME_DEFAULT_USER_META_MESSAGE)
 };
 
 #undef GEN_BOOL
-- 
2.7.0.rc3

