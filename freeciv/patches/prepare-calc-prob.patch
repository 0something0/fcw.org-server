From f0e9e71abb9f48daef13d91d1f65f324dbd364c1 Mon Sep 17 00:00:00 2001
From: Sveinung Kvilhaugsvik <sveinung84@users.sourceforge.net>
Date: Fri, 21 Feb 2014 12:18:40 +0100
Subject: [PATCH 2/2] Preapare for calulating the probability of success for
 actions

---
 common/actions.c | 163 ++++++++++++++++++++++++++++++++++---------------------
 1 file changed, 100 insertions(+), 63 deletions(-)

diff --git a/common/actions.c b/common/actions.c
index fea37fc..71921d3 100644
--- a/common/actions.c
+++ b/common/actions.c
@@ -345,58 +345,74 @@ action_enabled_local(const enum gen_action wanted_action,
 }
 
 /**************************************************************************
-  Find out if the action is enabled, may be enabled or isn't enabled given
-  what the actor units owner knowns when done by actor_unit on target_city.
-**************************************************************************/
-static enum fc_tristate
-action_enabled_unit_on_city_local(const enum gen_action wanted_action,
-                                  const struct unit *actor_unit,
-                                  const struct city *target_city)
-{
-  fc_assert_ret_val_msg(ATK_CITY == action_get_target_kind(wanted_action),
-                        FALSE, "Action %s is against %s not cities",
-                        gen_action_name(wanted_action),
-                        action_target_kind_name(
-                          action_get_target_kind(wanted_action)));
-
-  return action_enabled_local(wanted_action,
-                              unit_owner(actor_unit), NULL, NULL,
-                              unit_tile(actor_unit), actor_unit,
-                              NULL, NULL,
-                              city_owner(target_city), target_city, NULL,
-                              city_tile(target_city), NULL, NULL, NULL);
-}
-
-/**************************************************************************
-  Find out if the action is enabled, may be enabled or isn't enabled given
-  what the actor units owner knowns when done by actor_unit on target_unit.
+  An action's probability of success.
 **************************************************************************/
-static enum fc_tristate
-action_enabled_unit_on_unit_local(const enum gen_action wanted_action,
-                                  const struct unit *actor_unit,
-                                  const struct unit *target_unit)
+static action_probability
+action_prob(const enum gen_action wanted_action,
+            const struct player *actor_player,
+            const struct city *actor_city,
+            const struct impr_type *actor_building,
+            const struct tile *actor_tile,
+            const struct unit *actor_unit,
+            const struct output_type *actor_output,
+            const struct specialist *actor_specialist,
+            const struct player *target_player,
+            const struct city *target_city,
+            const struct impr_type *target_building,
+            const struct tile *target_tile,
+            const struct unit *target_unit,
+            const struct output_type *target_output,
+            const struct specialist *target_specialist)
 {
-  fc_assert_ret_val_msg(ATK_UNIT == action_get_target_kind(wanted_action),
-                        FALSE, "Action %s is against %s not units",
-                        gen_action_name(wanted_action),
-                        action_target_kind_name(
-                          action_get_target_kind(wanted_action)));
-
-  return action_enabled_local(wanted_action,
-                              unit_owner(actor_unit), NULL, NULL,
-                              unit_tile(actor_unit), actor_unit,
-                              NULL, NULL,
-                              unit_owner(target_unit),
-                              tile_city(unit_tile(target_unit)), NULL,
-                              unit_tile(target_unit),
-                              target_unit, NULL, NULL);
-}
+  int known;
+  int chance;
+
+  chance = ACTPROB_NOT_IMPLEMENTED;
+
+  known = action_enabled_local(wanted_action,
+                               actor_player, actor_city,
+                               actor_building, actor_tile, actor_unit,
+                               actor_output, actor_specialist,
+                               target_player, target_city,
+                               target_building, target_tile, target_unit,
+                               target_output, target_specialist);
+
+  switch (wanted_action) {
+  case ACTION_SPY_POISON:
+    /* TODO */
+    break;
+  case ACTION_SPY_SABOTAGE_UNIT:
+    /* TODO */
+    break;
+  case ACTION_SPY_BRIBE_UNIT:
+    /* TODO */
+    break;
+  case ACTION_SPY_SABOTAGE_CITY:
+    /* TODO */
+    break;
+  case ACTION_SPY_TARGETED_SABOTAGE_CITY:
+    /* TODO */
+    break;
+  case ACTION_SPY_INCITE_CITY:
+    /* TODO */
+    break;
+  case ACTION_ESTABLISH_EMBASSY:
+    /* TODO */
+    break;
+  case ACTION_SPY_STEAL_TECH:
+    /* TODO */
+    break;
+  case ACTION_SPY_TARGETED_STEAL_TECH:
+    /* TODO */
+    break;
+  case ACTION_SPY_INVESTIGATE_CITY:
+    /* TODO */
+    break;
+  case ACTION_COUNT:
+    fc_assert(FALSE);
+    break;
+  }
 
-/**************************************************************************
-  Get an action's probability of success
-**************************************************************************/
-static action_probability action_prob(enum fc_tristate known)
-{
   switch (known) {
   case TRI_NO:
     return ACTPROB_IMPOSSIBLE;
@@ -405,37 +421,58 @@ static action_probability action_prob(enum fc_tristate known)
     return ACTPROB_NOT_KNOWN;
     break;
   case TRI_YES:
-    /* TODO: Probabilities for each action. */
-    return ACTPROB_NOT_IMPLEMENTED;
+    return chance;
     break;
   };
 
   fc_assert_ret_val_msg(FALSE, ACTPROB_NOT_IMPLEMENTED,
-                        "Unknown knowledge analysis");
+                        "Should be yes, mabe or no");
 }
 
 /**************************************************************************
   Get the actor unit's probability of successfully performing the chosen
   action on the target city.
 **************************************************************************/
-action_probability action_prob_vs_city(struct unit* actor, int action_id,
-                                       struct city* victim)
+action_probability action_prob_vs_city(struct unit* actor_unit,
+                                       int action_id,
+                                       struct city* target_city)
 {
-  enum fc_tristate known;
+  fc_assert_ret_val_msg(ATK_CITY == action_get_target_kind(action_id),
+                        FALSE, "Action %s is against %s not cities",
+                        gen_action_name(action_id),
+                        action_target_kind_name(
+                          action_get_target_kind(action_id)));
+
+  return action_prob(action_id,
+                     unit_owner(actor_unit), NULL, NULL,
+                     unit_tile(actor_unit), actor_unit,
+                     NULL, NULL,
+                     city_owner(target_city), target_city, NULL,
+                     city_tile(target_city), NULL, NULL, NULL);
+
 
-  known = action_enabled_unit_on_city_local(action_id, actor, victim);
-  return action_prob(known);
 }
 
 /**************************************************************************
   Get the actor unit's probability of successfully performing the chosen
   action on the target unit.
 **************************************************************************/
-action_probability action_prob_vs_unit(struct unit* actor, int action_id,
-                                       struct unit* victim)
+action_probability action_prob_vs_unit(struct unit* actor_unit,
+                                       int action_id,
+                                       struct unit* target_unit)
 {
-  enum fc_tristate known;
-
-  known = action_enabled_unit_on_unit_local(action_id, actor, victim);
-  return action_prob(known);
+  fc_assert_ret_val_msg(ATK_UNIT == action_get_target_kind(action_id),
+                        FALSE, "Action %s is against %s not units",
+                        gen_action_name(action_id),
+                        action_target_kind_name(
+                          action_get_target_kind(action_id)));
+
+  return action_prob(action_id,
+                     unit_owner(actor_unit), NULL, NULL,
+                     unit_tile(actor_unit), actor_unit,
+                     NULL, NULL,
+                     unit_owner(target_unit),
+                     tile_city(unit_tile(target_unit)), NULL,
+                     unit_tile(target_unit),
+                     target_unit, NULL, NULL);
 }
-- 
1.8.5.3

