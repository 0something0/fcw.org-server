diff -Nurd -X.diff_ignore freeciv/common/tile.c freeciv/common/tile.c
--- freeciv/common/tile.c	2016-04-19 02:05:17.625507394 +0300
+++ freeciv/common/tile.c	2016-04-21 09:07:05.075073296 +0300
@@ -153,19 +153,27 @@
 }
 
 /****************************************************************************
-  Returns a bit vector of the extras present at the tile.
+  Returns a bit vector of the extras present at NULL tile.
 ****************************************************************************/
-const bv_extras *tile_extras(const struct tile *ptile)
+const bv_extras *tile_extras_null(void)
 {
-  if (!ptile) {
-    static bool empty_cleared = FALSE;
+  static bool empty_cleared = FALSE;
 
-    if (!empty_cleared) {
-      BV_CLR_ALL(empty_extras);
-      empty_cleared = TRUE;
-    }
+  if (!empty_cleared) {
+    BV_CLR_ALL(empty_extras);
+    empty_cleared = TRUE;
+  }
 
-    return &(empty_extras);
+  return &(empty_extras);  
+}
+
+/****************************************************************************
+  Returns a bit vector of the extras present at the tile.
+****************************************************************************/
+const bv_extras *tile_extras_safe(const struct tile *ptile)
+{
+  if (!ptile) {
+    return tile_extras_null();
   }
 
   return &(ptile->extras);
diff -Nurd -X.diff_ignore freeciv/common/tile.h freeciv/common/tile.h
--- freeciv/common/tile.h	2016-02-28 00:42:44.774910008 +0200
+++ freeciv/common/tile.h	2016-04-21 09:10:09.490660832 +0300
@@ -108,7 +108,18 @@
 /* struct city *tile_worked(const struct tile *ptile); */
 void tile_set_worked(struct tile *ptile, struct city *pcity);
 
-const bv_extras *tile_extras(const struct tile *ptile);
+const bv_extras *tile_extras_safe(const struct tile *ptile);
+const bv_extras *tile_extras_null(void);
+static inline const bv_extras *tile_extras(const struct tile *ptile)
+{
+  /* With this NULL check this function is actually same as tile_extras_safe().
+   * We may remove the check later when callers that need _safe(), do so. */
+  if (ptile == NULL) {
+    return tile_extras_null();
+  }
+  return &(ptile->extras);
+}
+
 void tile_set_bases(struct tile *ptile, bv_bases bases);
 bool tile_has_base(const struct tile *ptile, const struct base_type *pbase);
 void tile_add_base(struct tile *ptile, const struct base_type *pbase);
