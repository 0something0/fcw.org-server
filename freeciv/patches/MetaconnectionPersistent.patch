diff -Nurd -X.diff_ignore freeciv/server/civserver.c freeciv/server/civserver.c
--- freeciv/server/civserver.c	2016-06-18 14:47:37.637947184 +0300
+++ freeciv/server/civserver.c	2016-06-22 13:06:58.553208845 +0300
@@ -1,4 +1,4 @@
-/**********************************************************************
+/***********************************************************************
  Freeciv - Copyright (C) 1996 - A Kjeldberg, L Gregersen, P Unold
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
@@ -225,12 +225,12 @@
       srvarg.ranklog_filename = option; /* Never freed. */
     } else if (is_option("--nometa", argv[inx])) {
       fc_fprintf(stderr, _("Warning: the %s option is obsolete.  "
-			   "Use -m to enable the metaserver.\n"), argv[inx]);
+                           "Use -m to enable the metaserver.\n"), argv[inx]);
       showhelp = TRUE;
     } else if (is_option("--meta", argv[inx])) {
       srvarg.metaserver_no_send = FALSE;
     } else if ((option = get_option_malloc("--Metaserver",
-					 argv, &inx, argc))) {
+                                           argv, &inx, argc))) {
       sz_strlcpy(srvarg.metaserver_addr, option);
       free(option);
       srvarg.metaserver_no_send = FALSE;      /* --Metaserver implies --meta */
diff -Nurd -X.diff_ignore freeciv/server/commands.c freeciv/server/commands.c
--- freeciv/server/commands.c	2015-12-17 08:22:27.372460409 +0200
+++ freeciv/server/commands.c	2016-06-22 13:06:00.377308340 +0300
@@ -1,4 +1,4 @@
-/********************************************************************** 
+/***********************************************************************
  Freeciv - Copyright (C) 1996-2004 - The Freeciv Project
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
@@ -266,7 +266,8 @@
    N_("Control metaserver connection."),
    N_("'metaconnection ?' reports on the status of the connection to metaserver. "
       "'metaconnection down' or 'metac d' brings the metaserver connection down. "
-      "'metaconnection up' or 'metac u' brings the metaserver connection up."),
+      "'metaconnection up' or 'metac u' brings the metaserver connection up. "
+      "'metaconnection persistent' or 'metac p' is like 'up', but keeps trying after failures. "),
    NULL,
    CMD_ECHO_ADMINS, VCF_NONE, 0
   },
diff -Nurd -X.diff_ignore freeciv/server/meta.c freeciv/server/meta.c
--- freeciv/server/meta.c	2016-06-18 14:47:37.569947330 +0300
+++ freeciv/server/meta.c	2016-06-22 13:00:40.865831084 +0300
@@ -66,6 +66,8 @@
 #include "meta.h"
 
 static bool server_is_open = FALSE;
+static bool persistent_meta_connection = FALSE;
+static int meta_retry_wait = 0;
 
 static char meta_patches[256] = "";
 static char meta_message[256] = "";
@@ -203,10 +205,15 @@
 *************************************************************************/
 static void metaserver_failed(void)
 {
-  con_puts(C_METAERROR, _("Not reporting to the metaserver in this game."));
-  con_flush();
+  if (!persistent_meta_connection) {
+    con_puts(C_METAERROR, _("Not reporting to the metaserver in this game."));
+    con_flush();
 
-  server_close_meta();
+    server_close_meta();
+  } else {
+    con_puts(C_METAERROR, _("Metaserver connection currently failing."));
+    meta_retry_wait = 1;
+  }
 }
 
 /****************************************************************************
@@ -441,12 +448,13 @@
 void server_close_meta(void)
 {
   server_is_open = FALSE;
+  persistent_meta_connection = FALSE;
 }
 
 /*************************************************************************
- lookup the correct address for the metaserver.
+  Lookup the correct address for the metaserver.
 *************************************************************************/
-bool server_open_meta(void)
+bool server_open_meta(bool persistent)
 {
   if (meta_patches[0] == '\0') {
     set_meta_patches_string(default_meta_patches_string());
@@ -456,12 +464,14 @@
   }
 
   server_is_open = TRUE;
+  persistent_meta_connection = persistent;
+  meta_retry_wait = 0;
 
   return TRUE;
 }
 
 /**************************************************************************
- are we sending info to the metaserver?
+  Are we sending info to the metaserver?
 **************************************************************************/
 bool is_metaserver_open(void)
 {
@@ -480,6 +490,15 @@
     return FALSE;
   }
 
+  /* Persistent connection temporary failures handling */
+  if (meta_retry_wait > 0) {
+    if (meta_retry_wait++ > 5) {
+      meta_retry_wait = 0;
+    } else {
+      return FALSE;
+    }
+  }
+
   /* if we're bidding farewell, ignore all timers */
   if (flag == META_GOODBYE) { 
     if (last_send_timer) {
diff -Nurd -X.diff_ignore freeciv/server/meta.h freeciv/server/meta.h
--- freeciv/server/meta.h	2015-09-13 09:24:27.162967801 +0300
+++ freeciv/server/meta.h	2016-06-22 13:07:59.649103293 +0300
@@ -1,4 +1,4 @@
-/********************************************************************** 
+/***********************************************************************
  Freeciv - Copyright (C) 1996 - A Kjeldberg, L Gregersen, P Unold
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
@@ -44,7 +44,7 @@
 char *meta_addr_port(void);
 
 void server_close_meta(void);
-bool server_open_meta(void);
+bool server_open_meta(bool persistent);
 bool is_metaserver_open(void);
 
 bool send_server_info_to_metaserver(enum meta_flag flag);
diff -Nurd -X.diff_ignore freeciv/server/srv_main.c freeciv/server/srv_main.c
--- freeciv/server/srv_main.c	2016-06-22 09:41:59.081475232 +0300
+++ freeciv/server/srv_main.c	2016-06-22 13:01:13.989779214 +0300
@@ -2735,7 +2735,7 @@
   if (!(srvarg.metaserver_no_send)) {
     log_normal(_("Sending info to metaserver <%s>."), meta_addr_port());
     /* Open socket for meta server */
-    if (!server_open_meta()
+    if (!server_open_meta(FALSE)
         || !send_server_info_to_metaserver(META_INFO)) {
       con_write(C_FAIL, _("Not starting without explicitly requested metaserver connection."));
       exit(EXIT_FAILURE);
diff -Nurd -X.diff_ignore freeciv/server/stdinhand.c freeciv/server/stdinhand.c
--- freeciv/server/stdinhand.c	2016-06-20 12:07:22.214642611 +0300
+++ freeciv/server/stdinhand.c	2016-06-22 13:00:40.869831078 +0300
@@ -484,9 +484,10 @@
 /**************************************************************************
   Start sending game info to metaserver.
 **************************************************************************/
-static void open_metaserver_connection(struct connection *caller)
+static void open_metaserver_connection(struct connection *caller,
+                                       bool persistent)
 {
-  server_open_meta();
+  server_open_meta(persistent);
   if (send_server_info_to_metaserver(META_INFO)) {
     cmd_reply(CMD_METACONN, caller, C_OK,
               _("Open metaserver connection to [%s]."),
@@ -513,8 +514,10 @@
 static bool metaconnection_command(struct connection *caller, char *arg, 
                                    bool check)
 {
-  if ((*arg == '\0') ||
-      (0 == strcmp (arg, "?"))) {
+  bool persistent = FALSE;
+
+  if ((*arg == '\0')
+      || (!strcmp(arg, "?"))) {
     if (is_metaserver_open()) {
       cmd_reply(CMD_METACONN, caller, C_COMMENT,
                 _("Metaserver connection is open."));
@@ -522,31 +525,40 @@
       cmd_reply(CMD_METACONN, caller, C_COMMENT,
                 _("Metaserver connection is closed."));
     }
-  } else if (0 == fc_strcasecmp(arg, "u")
-             || 0 == fc_strcasecmp(arg, "up")) {
+    return TRUE;
+  }
+
+  if (!fc_strcasecmp(arg, "p")
+      || !fc_strcasecmp(arg, "persistent")) {
+    persistent = TRUE;
+  }
+
+  if (persistent
+      || !fc_strcasecmp(arg, "u")
+      || !fc_strcasecmp(arg, "up")) {
     if (!is_metaserver_open()) {
       if (!check) {
-        open_metaserver_connection(caller);
+        open_metaserver_connection(caller, persistent);
       }
     } else {
       cmd_reply(CMD_METACONN, caller, C_METAERROR,
-		_("Metaserver connection is already open."));
+                _("Metaserver connection is already open."));
       return FALSE;
     }
-  } else if (0 == fc_strcasecmp(arg, "d")
-             || 0 == fc_strcasecmp(arg, "down")) {
+  } else if (!fc_strcasecmp(arg, "d")
+             || !fc_strcasecmp(arg, "down")) {
     if (is_metaserver_open()) {
       if (!check) {
         close_metaserver_connection(caller);
       }
     } else {
       cmd_reply(CMD_METACONN, caller, C_METAERROR,
-		_("Metaserver connection is already closed."));
+                _("Metaserver connection is already closed."));
       return FALSE;
     }
   } else {
     cmd_reply(CMD_METACONN, caller, C_METAERROR,
-	      _("Argument must be 'u', 'up', 'd', 'down', or '?'."));
+              _("Argument must be 'u', 'up', 'd', 'down', 'p', 'persistent', or '?'."));
     return FALSE;
   }
   return TRUE;
