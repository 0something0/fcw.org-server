diff --git a/freeciv/client/packhand_gen.c b/freeciv/client/packhand_gen.c
index 8b6b3cc..49e2409 100644
--- a/freeciv/client/packhand_gen.c
+++ b/freeciv/client/packhand_gen.c
@@ -389,6 +389,11 @@ bool client_handle_packet(enum packet_type type, void *packet)
       ((struct packet_edit_object_created *)packet)->id);
     return TRUE;
 
+  case PACKET_INFO_TEXT_MESSAGE:
+    handle_info_text_message(
+      ((struct packet_info_text_message *)packet)->message);
+    return TRUE;
+
   default:
     return FALSE;
   }
diff --git a/freeciv/client/packhand_gen.h b/freeciv/client/packhand_gen.h
index 412dffd..92dd841 100644
--- a/freeciv/client/packhand_gen.h
+++ b/freeciv/client/packhand_gen.h
@@ -124,5 +124,6 @@ void handle_vote_update(int vote_no, int yes, int no, int abstain, int num_voter
 void handle_vote_remove(int vote_no);
 void handle_vote_resolve(int vote_no, bool passed);
 void handle_edit_object_created(int tag, int id);
+void handle_info_text_message(char *message);
 
 #endif /* FC__PACKHAND_GEN_H */
diff --git a/freeciv/common/packets.def b/freeciv/common/packets.def
index 246266c..ab841af 100644
--- a/freeciv/common/packets.def
+++ b/freeciv/common/packets.def
@@ -1748,3 +1748,14 @@ PACKET_EDIT_OBJECT_CREATED=181;sc,dsend
   SINT32 tag;
   SINT32 id;
 end
+
+/*************** Webclient specific packets ****************/
+PACKET_INFO_TEXT_REQ=186;cs,dsend
+  COORD x, y;
+  UNIT visible_unit; 
+end
+
+PACKET_INFO_TEXT_MESSAGE=187;sc,dsend
+  STRING message[MAX_LEN_MSG];
+end
+
diff --git a/freeciv/common/packets_gen.c b/freeciv/common/packets_gen.c
index 5caa5a9..8ff7825 100644
--- a/freeciv/common/packets_gen.c
+++ b/freeciv/common/packets_gen.c
@@ -503,6 +503,12 @@ void *get_packet_from_connection_helper(struct connection *pc,
   case PACKET_EDIT_OBJECT_CREATED:
     return receive_packet_edit_object_created(pc, type);
 
+  case PACKET_INFO_TEXT_REQ:
+    return receive_packet_info_text_req(pc, type);
+
+  case PACKET_INFO_TEXT_MESSAGE:
+    return receive_packet_info_text_message(pc, type);
+
   default:
     freelog(LOG_ERROR, "unknown packet type %d received from %s",
 	    type, conn_description(pc));
@@ -974,6 +980,12 @@ const char *get_packet_name(enum packet_type type)
   case PACKET_EDIT_OBJECT_CREATED:
     return "PACKET_EDIT_OBJECT_CREATED";
 
+  case PACKET_INFO_TEXT_REQ:
+    return "PACKET_INFO_TEXT_REQ";
+
+  case PACKET_INFO_TEXT_MESSAGE:
+    return "PACKET_INFO_TEXT_MESSAGE";
+
   default:
     return "unknown";
   }
@@ -19922,3 +19934,192 @@ int dsend_packet_edit_object_created(struct connection *pc, int tag, int id)
   return send_packet_edit_object_created(pc, real_packet);
 }
 
+static struct packet_info_text_req *receive_packet_info_text_req_100(struct connection *pc, enum packet_type type)
+{
+  RECEIVE_PACKET_START(packet_info_text_req, real_packet);
+  {
+    int readin;
+  
+    dio_get_uint32(&din, &readin);
+    real_packet->x = readin;
+  }
+  {
+    int readin;
+  
+    dio_get_uint32(&din, &readin);
+    real_packet->y = readin;
+  }
+  {
+    int readin;
+  
+    dio_get_uint32(&din, &readin);
+    real_packet->visible_unit = readin;
+  }
+
+  RECEIVE_PACKET_END(real_packet);
+}
+
+static int send_packet_info_text_req_100(struct connection *pc, const struct packet_info_text_req *packet)
+{
+  const struct packet_info_text_req *real_packet = packet;
+  SEND_PACKET_START(PACKET_INFO_TEXT_REQ);
+
+  dio_put_uint32(&dout, real_packet->x);
+  dio_put_uint32(&dout, real_packet->y);
+  dio_put_uint32(&dout, real_packet->visible_unit);
+
+  SEND_PACKET_END;
+}
+
+static void ensure_valid_variant_packet_info_text_req(struct connection *pc)
+{
+  int variant = -1;
+
+  if(pc->phs.variant[PACKET_INFO_TEXT_REQ] != -1) {
+    return;
+  }
+
+  if(FALSE) {
+  } else if(TRUE) {
+    variant = 100;
+  } else {
+    die("unknown variant");
+  }
+  pc->phs.variant[PACKET_INFO_TEXT_REQ] = variant;
+}
+
+struct packet_info_text_req *receive_packet_info_text_req(struct connection *pc, enum packet_type type)
+{
+  if(!pc->used) {
+    freelog(LOG_ERROR,
+	    "WARNING: trying to read data from the closed connection %s",
+	    conn_description(pc));
+    return NULL;
+  }
+  assert(pc->phs.variant != NULL);
+  if (!pc->is_server) {
+    freelog(LOG_ERROR, "Receiving packet_info_text_req at the client.");
+  }
+  ensure_valid_variant_packet_info_text_req(pc);
+
+  switch(pc->phs.variant[PACKET_INFO_TEXT_REQ]) {
+    case 100: return receive_packet_info_text_req_100(pc, type);
+    default: die("unknown variant"); return NULL;
+  }
+}
+
+int send_packet_info_text_req(struct connection *pc, const struct packet_info_text_req *packet)
+{
+  if(!pc->used) {
+    freelog(LOG_ERROR,
+	    "WARNING: trying to send data to the closed connection %s",
+	    conn_description(pc));
+    return -1;
+  }
+  assert(pc->phs.variant != NULL);
+  if (pc->is_server) {
+    freelog(LOG_ERROR, "Sending packet_info_text_req from the server.");
+  }
+  ensure_valid_variant_packet_info_text_req(pc);
+
+  switch(pc->phs.variant[PACKET_INFO_TEXT_REQ]) {
+    case 100: return send_packet_info_text_req_100(pc, packet);
+    default: die("unknown variant"); return -1;
+  }
+}
+
+int dsend_packet_info_text_req(struct connection *pc, int x, int y, int visible_unit)
+{
+  struct packet_info_text_req packet, *real_packet = &packet;
+
+  real_packet->x = x;
+  real_packet->y = y;
+  real_packet->visible_unit = visible_unit;
+  
+  return send_packet_info_text_req(pc, real_packet);
+}
+
+static struct packet_info_text_message *receive_packet_info_text_message_100(struct connection *pc, enum packet_type type)
+{
+  RECEIVE_PACKET_START(packet_info_text_message, real_packet);
+  dio_get_string(&din, real_packet->message, sizeof(real_packet->message));
+
+  RECEIVE_PACKET_END(real_packet);
+}
+
+static int send_packet_info_text_message_100(struct connection *pc, const struct packet_info_text_message *packet)
+{
+  const struct packet_info_text_message *real_packet = packet;
+  SEND_PACKET_START(PACKET_INFO_TEXT_MESSAGE);
+
+  dio_put_string(&dout, real_packet->message);
+
+  SEND_PACKET_END;
+}
+
+static void ensure_valid_variant_packet_info_text_message(struct connection *pc)
+{
+  int variant = -1;
+
+  if(pc->phs.variant[PACKET_INFO_TEXT_MESSAGE] != -1) {
+    return;
+  }
+
+  if(FALSE) {
+  } else if(TRUE) {
+    variant = 100;
+  } else {
+    die("unknown variant");
+  }
+  pc->phs.variant[PACKET_INFO_TEXT_MESSAGE] = variant;
+}
+
+struct packet_info_text_message *receive_packet_info_text_message(struct connection *pc, enum packet_type type)
+{
+  if(!pc->used) {
+    freelog(LOG_ERROR,
+	    "WARNING: trying to read data from the closed connection %s",
+	    conn_description(pc));
+    return NULL;
+  }
+  assert(pc->phs.variant != NULL);
+  if (pc->is_server) {
+    freelog(LOG_ERROR, "Receiving packet_info_text_message at the server.");
+  }
+  ensure_valid_variant_packet_info_text_message(pc);
+
+  switch(pc->phs.variant[PACKET_INFO_TEXT_MESSAGE]) {
+    case 100: return receive_packet_info_text_message_100(pc, type);
+    default: die("unknown variant"); return NULL;
+  }
+}
+
+int send_packet_info_text_message(struct connection *pc, const struct packet_info_text_message *packet)
+{
+  if(!pc->used) {
+    freelog(LOG_ERROR,
+	    "WARNING: trying to send data to the closed connection %s",
+	    conn_description(pc));
+    return -1;
+  }
+  assert(pc->phs.variant != NULL);
+  if (!pc->is_server) {
+    freelog(LOG_ERROR, "Sending packet_info_text_message from the client.");
+  }
+  ensure_valid_variant_packet_info_text_message(pc);
+
+  switch(pc->phs.variant[PACKET_INFO_TEXT_MESSAGE]) {
+    case 100: return send_packet_info_text_message_100(pc, packet);
+    default: die("unknown variant"); return -1;
+  }
+}
+
+int dsend_packet_info_text_message(struct connection *pc, const char *message)
+{
+  struct packet_info_text_message packet, *real_packet = &packet;
+
+  sz_strlcpy(real_packet->message, message);
+  
+  return send_packet_info_text_message(pc, real_packet);
+}
+
diff --git a/freeciv/common/packets_gen.h b/freeciv/common/packets_gen.h
index 24a2c56..fad53b0 100644
--- a/freeciv/common/packets_gen.h
+++ b/freeciv/common/packets_gen.h
@@ -1376,6 +1376,16 @@ struct packet_edit_object_created {
   int id;
 };
 
+struct packet_info_text_req {
+  int x;
+  int y;
+  int visible_unit;
+};
+
+struct packet_info_text_message {
+  char message[MAX_LEN_MSG];
+};
+
 enum packet_type {
   PACKET_PROCESSING_STARTED,             /* 0 */
   PACKET_PROCESSING_FINISHED,
@@ -1530,6 +1540,8 @@ enum packet_type {
   PACKET_UNIT_TRANSFORM,
   PACKET_GOTO_PATH_REQ,
   PACKET_GOTO_PATH,
+  PACKET_INFO_TEXT_REQ,
+  PACKET_INFO_TEXT_MESSAGE,
 
   PACKET_LAST  /* leave this last */
 };
@@ -2141,6 +2153,14 @@ struct packet_edit_object_created *receive_packet_edit_object_created(struct con
 int send_packet_edit_object_created(struct connection *pc, const struct packet_edit_object_created *packet);
 int dsend_packet_edit_object_created(struct connection *pc, int tag, int id);
 
+struct packet_info_text_req *receive_packet_info_text_req(struct connection *pc, enum packet_type type);
+int send_packet_info_text_req(struct connection *pc, const struct packet_info_text_req *packet);
+int dsend_packet_info_text_req(struct connection *pc, int x, int y, int visible_unit);
+
+struct packet_info_text_message *receive_packet_info_text_message(struct connection *pc, enum packet_type type);
+int send_packet_info_text_message(struct connection *pc, const struct packet_info_text_message *packet);
+int dsend_packet_info_text_message(struct connection *pc, const char *message);
+
 
 void delta_stats_report(void);
 void delta_stats_reset(void);
diff --git a/freeciv/server/hand_gen.c b/freeciv/server/hand_gen.c
index e0f68d5..cfee86a 100644
--- a/freeciv/server/hand_gen.c
+++ b/freeciv/server/hand_gen.c
@@ -477,6 +477,13 @@ bool server_handle_packet(enum packet_type type, void *packet,
     handle_edit_game(pconn, packet);
     return TRUE;
 
+  case PACKET_INFO_TEXT_REQ:
+    handle_info_text_req(pplayer,
+      ((struct packet_info_text_req *)packet)->x,
+      ((struct packet_info_text_req *)packet)->y,
+      ((struct packet_info_text_req *)packet)->visible_unit);
+    return TRUE;
+
   default:
     return FALSE;
   }
diff --git a/freeciv/server/hand_gen.h b/freeciv/server/hand_gen.h
index ca85f77..c9cf05c 100644
--- a/freeciv/server/hand_gen.h
+++ b/freeciv/server/hand_gen.h
@@ -109,5 +109,6 @@ void handle_edit_player(struct connection *pc, struct packet_edit_player *packet
 void handle_edit_player_vision(struct connection *pc, int player, int x, int y, bool known, int size);
 struct packet_edit_game;
 void handle_edit_game(struct connection *pc, struct packet_edit_game *packet);
+void handle_info_text_req(struct player *pplayer, int x, int y, int visible_unit);
 
 #endif /* FC__HAND_GEN_H */
diff --git a/freeciv/server/maphand.c b/freeciv/server/maphand.c
index e4e057a..71cbb8e 100644
--- a/freeciv/server/maphand.c
+++ b/freeciv/server/maphand.c
@@ -36,6 +36,7 @@
 #include "unit.h"
 #include "unitlist.h"
 #include "vision.h"
+#include "astring.h"
 
 /* generator */
 #include "utilities.h"
@@ -1753,3 +1754,403 @@ void create_base(struct tile *ptile, struct base_type *pbase,
     }
   }
 }
+
+/****************************************************************************
+  Return a (static) string with a tile's food/prod/trade
+****************************************************************************/
+static const char *get_tile_output_text(const struct tile *ptile, 
+		                        struct player *pplayer)
+{
+  static struct astring str = ASTRING_INIT;
+  int i;
+  char output_text[O_LAST][16];
+
+  for (i = 0; i < O_LAST; i++) {
+    int before_penalty = 0;
+    int x = city_tile_output(NULL, ptile, FALSE, i);
+
+    if (NULL != pplayer) {
+      before_penalty = get_player_output_bonus(pplayer,
+                                               get_output_type(i),
+                                               EFT_OUTPUT_PENALTY_TILE);
+    }
+
+    if (before_penalty > 0 && x > before_penalty) {
+      my_snprintf(output_text[i], sizeof(output_text[i]), "%d(-1)", x);
+    } else {
+      my_snprintf(output_text[i], sizeof(output_text[i]), "%d", x);
+    }
+  }
+  
+  astr_clear(&str);
+  astr_add_line(&str, "%s/%s/%s",
+                output_text[O_FOOD],
+		output_text[O_SHIELD],
+		output_text[O_TRADE]);
+
+  return str.str;
+}
+
+
+
+/****************************************************************************
+  Creates the activity progress text for the given tile.
+
+  This should only be used inside popup_info_text and should eventually be
+  made static.
+****************************************************************************/
+static const char *concat_tile_activity_text(struct tile *ptile)
+{
+  int activity_total[ACTIVITY_LAST];
+  int activity_units[ACTIVITY_LAST];
+  int base_total[MAX_BASE_TYPES];
+  int base_units[MAX_BASE_TYPES];
+  int num_activities = 0;
+  int remains, turns, i;
+  static struct astring str = ASTRING_INIT;
+
+  astr_clear(&str);
+
+  memset(activity_total, 0, sizeof(activity_total));
+  memset(activity_units, 0, sizeof(activity_units));
+  memset(base_total, 0, sizeof(base_total));
+  memset(base_units, 0, sizeof(base_units));
+
+  unit_list_iterate(ptile->units, punit) {
+    if (punit->activity == ACTIVITY_BASE) {
+      base_total[punit->activity_base] += punit->activity_count;
+      base_total[punit->activity_base] += get_activity_rate_this_turn(punit);
+      base_units[punit->activity_base] += get_activity_rate(punit);
+    } else {
+      activity_total[punit->activity] += punit->activity_count;
+      activity_total[punit->activity] += get_activity_rate_this_turn(punit);
+      activity_units[punit->activity] += get_activity_rate(punit);
+    }
+  } unit_list_iterate_end;
+
+  for (i = 0; i < ACTIVITY_LAST; i++) {
+    if (i == ACTIVITY_BASE) {
+      base_type_iterate(bp) {
+        Base_type_id b = base_index(bp);
+	if (base_units[b] > 0) {
+	  remains = tile_activity_base_time(ptile, b) - base_total[b];
+	  if (remains > 0) {
+	    turns = 1 + (remains + base_units[b] - 1) / base_units[b];
+	  } else {
+	    /* base will be finished this turn */
+	    turns = 1;
+	  }
+	  if (num_activities > 0) {
+	    astr_add(&str, "/");
+	  }
+	  astr_add(&str, "%s(%d)", base_name_translation(bp), turns);
+	  num_activities++;
+	}
+      } base_type_iterate_end;
+    } else if (is_build_or_clean_activity(i) && activity_units[i] > 0) {
+      if (num_activities > 0) {
+	astr_add(&str, "/");
+      }
+      remains = tile_activity_time(i, ptile) - activity_total[i];
+      if (remains > 0) {
+	turns = 1 + (remains + activity_units[i] - 1) / activity_units[i];
+      } else {
+	/* activity will be finished this turn */
+	turns = 1;
+      }
+      astr_add(&str, "%s(%d)", get_activity_text(i), turns);
+      num_activities++;
+    }
+  }
+
+  return str.str;
+}
+
+
+/****************************************************************************
+  Fill the buffer with the player's nation name (in adjective form) and
+  optionally add the player's team name.
+****************************************************************************/
+static inline void get_full_nation(char *buf, int buflen,
+                                   const struct player *pplayer)
+{
+  if (!buf || buflen < 1) {
+    return;
+  }
+
+  if (!pplayer) {
+    buf[0] = '\0';
+    return;
+  }
+
+  if (pplayer->team) {
+    /* TRANS: "<nation adjective>, team <team name>" */
+    my_snprintf(buf, buflen, _("%s, team %s"),
+                nation_adjective_for_player(pplayer),
+                team_name_translation(pplayer->team));
+  } else {
+    mystrlcpy(buf, nation_adjective_for_player(pplayer), buflen);
+  }
+}
+
+
+/****************************************************************************
+  For AIs, fill the buffer with their player name prefixed with "AI". For
+  humans, just fill it with their username.
+****************************************************************************/
+static inline void get_full_username(char *buf, int buflen,
+                                     const struct player *pplayer)
+{
+  if (!buf || buflen < 1) {
+    return;
+  }
+
+  if (!pplayer) {
+    buf[0] = '\0';
+    return;
+  }
+
+  if (pplayer->ai_data.control) {
+    /* TRANS: "AI <player name>" */
+    my_snprintf(buf, buflen, _("AI %s"), pplayer->name);
+  } else {
+    mystrlcpy(buf, pplayer->username, buflen);
+  }
+}
+
+
+/****************************************************************************
+  Text to popup on a middle-click in the mapview.
+  - copied from /client/text.c
+****************************************************************************/
+static const char *popup_info_text(struct tile *ptile, struct player *pplayer,
+  	 	                   struct unit *punit)
+{
+  const char *activity_text;
+  struct city *pcity = tile_city(ptile);
+  const char *diplo_nation_plural_adjectives[DS_LAST] =
+    {Q_("?nation:Neutral"), Q_("?nation:Hostile"),
+     Q_("?nation:Neutral"),
+     Q_("?nation:Peaceful"), Q_("?nation:Friendly"), 
+     Q_("?nation:Mysterious"), Q_("?nation:Friendly(team)")};
+  const char *diplo_city_adjectives[DS_LAST] =
+    {Q_("?city:Neutral"), Q_("?city:Hostile"),
+     Q_("?nation:Neutral"),
+     Q_("?city:Peaceful"), Q_("?city:Friendly"), Q_("?city:Mysterious"),
+     Q_("?city:Friendly(team)")};
+  int infracount;
+  bv_special infra;
+  static struct astring str = ASTRING_INIT;
+  char username[MAX_LEN_NAME + 32];
+  char nation[2 * MAX_LEN_NAME + 32];
+
+  astr_clear(&str);
+  astr_add_line(&str, _("Location: (%d, %d)"),
+                ptile->x, ptile->y);
+
+  if (tile_get_known(ptile, pplayer) == TILE_UNKNOWN) {
+    astr_add(&str, _("Unknown"));
+    return str.str;
+  }
+  astr_add_line(&str, _("Terrain: %s"),  tile_get_info_text(ptile, 0));
+  astr_add_line(&str, _("Food/Prod/Trade: %s"),
+		get_tile_output_text(ptile, pplayer));
+  if (tile_has_special(ptile, S_HUT)) {
+    astr_add_line(&str, _("Minor Tribe Village"));
+  }
+  if (game.info.borders > 0 && !pcity) {
+    struct player *owner = tile_owner(ptile);
+
+    get_full_username(username, sizeof(username), owner);
+    get_full_nation(nation, sizeof(nation), owner);
+
+    if (NULL != pplayer && owner == pplayer) {
+      astr_add_line(&str, _("Our territory"));
+    } else if (NULL != owner && NULL == pplayer) {
+      /* TRANS: "Territory of <username> (<nation + team>)" */
+      astr_add_line(&str, _("Territory of %s (%s)"), username, nation);
+    } else if (NULL != owner) {
+      struct player_diplstate *ds = pplayer->diplstates;
+
+      if (ds[player_index(owner)].type == DS_CEASEFIRE) {
+	int turns = ds[player_index(owner)].turns_left;
+
+        /* TRANS: "Territory of <username> (<nation + team>)
+         * (<number> turn cease-fire)" */
+        astr_add_line(&str,
+                      PL_("Territory of %s (%s) (%d turn cease-fire)",
+                          "Territory of %s (%s) (%d turn cease-fire)",
+                          turns),
+                      username, nation, turns);
+      } else {
+	int type = ds[player_index(owner)].type;
+
+        /* TRANS: "Territory of <username>
+         * (<nation + team> | <diplomatic state>)" */
+        astr_add_line(&str, _("Territory of %s (%s | %s)"),
+                      username, nation,
+                      diplo_nation_plural_adjectives[type]);
+      }
+    } else {
+      astr_add_line(&str, _("Unclaimed territory"));
+    }
+  }
+  if (pcity) {
+    /* Look at city owner, not tile owner (the two should be the same, if
+     * borders are in use). */
+    struct player *owner = city_owner(pcity);
+    int has_improvements = 0;
+    struct impr_type *prev_impr = NULL;
+
+    get_full_username(username, sizeof(username), owner);
+    get_full_nation(nation, sizeof(nation), owner);
+
+    if (NULL == pplayer || owner == pplayer) {
+      /* TRANS: "City: <city name> | <username> (<nation + team>)" */
+      astr_add_line(&str, _("City: %s | %s (%s)"),
+                    city_name(pcity), username, nation);
+    } else {
+      struct player_diplstate *ds = pplayer->diplstates;
+
+      if (ds[player_index(owner)].type == DS_CEASEFIRE) {
+	int turns = ds[player_index(owner)].turns_left;
+
+        /* TRANS:  "City: <city name> | <username>
+         * (<nation + team>, <number> turn cease-fire)" */
+        astr_add_line(&str, PL_("City: %s | %s (%s, %d turn cease-fire)",
+                                "City: %s | %s (%s, %d turn cease-fire)",
+                                turns),
+                      city_name(pcity), username, nation, turns);
+      } else {
+        /* TRANS: "City: <city name> | <username>
+         * (<nation + team>, <diplomatic state>)" */
+        astr_add_line(&str, _("City: %s | %s (%s, %s)"),
+                      city_name(pcity), username, nation,
+                      diplo_city_adjectives[ds[player_index(owner)].type]);
+      }
+    }
+    improvement_iterate(pimprove) {
+      if (is_improvement_visible(pimprove)
+          && city_has_building(pcity, pimprove)) {
+        if (has_improvements++ > 1) {
+          /* TRANS: continue list, in case comma is not the separator of choice. */
+          astr_add(&str, Q_("?clistmore:, %s"),
+                   improvement_name_translation(prev_impr));
+        } else if (has_improvements == 1) {
+          astr_add_line(&str, "  ");
+          /* TRANS: previous lines gave other information about the city. */
+          astr_add(&str, Q_("?clistbegin: with %s"),
+                   improvement_name_translation(pimprove));
+        }
+        prev_impr = pimprove;
+      }
+    } improvement_iterate_end;
+
+    if (NULL != prev_impr) {
+      if (has_improvements > 2) {
+        /* TRANS: This appears with two or more previous entries in the list */
+        astr_add(&str, Q_("?clistlast:, and %s"),
+		 improvement_name_translation(prev_impr));
+      } else if (has_improvements > 1) {
+        /* TRANS: This appears with only one previous entry in the list */
+        astr_add(&str, Q_("?clistlast: and %s"),
+		 improvement_name_translation(prev_impr));
+      }
+      astr_add(&str, "%s", Q_("?clistend:."));
+    }
+
+  }
+  infra = get_tile_infrastructure_set(ptile, &infracount);
+  if (infracount == 0) {
+    base_type_iterate(pbase) {
+      if (BV_ISSET(ptile->bases, base_index(pbase))) {
+        infracount = 1;
+        break;
+      }
+    } base_type_iterate_end;
+  }
+  if (infracount > 0) {
+    astr_add_line(&str, _("Infrastructure: %s"),
+		  get_infrastructure_text(ptile->special, ptile->bases));
+  }
+  activity_text = concat_tile_activity_text(ptile);
+  if (strlen(activity_text) > 0) {
+    astr_add_line(&str, _("Activity: %s"), activity_text);
+  }
+  if (punit && !pcity) {
+    struct player *owner = unit_owner(punit);
+    struct unit_type *ptype = unit_type(punit);
+
+    get_full_username(username, sizeof(username), owner);
+    get_full_nation(nation, sizeof(nation), owner);
+
+    if (NULL == pplayer || owner == pplayer) {
+      struct city *pcity = player_find_city_by_id(owner, punit->homecity);
+
+      if (pcity) {
+        /* TRANS: "Unit: <unit type> | <username>
+         * (<nation + team>, <homecity>)" */
+        astr_add_line(&str, _("Unit: %s | %s (%s, %s)"),
+                      utype_name_translation(ptype), username,
+                      nation, city_name(pcity));
+      } else {
+        /* TRANS: "Unit: <unit type> | <username> (<nation + team>)" */
+        astr_add_line(&str, _("Unit: %s | %s (%s)"),
+                      utype_name_translation(ptype), username, nation);
+      }
+    } else if (NULL != owner) {
+      struct player_diplstate *ds = pplayer->diplstates;
+
+      if (ds[player_index(owner)].type == DS_CEASEFIRE) {
+	int turns = ds[player_index(owner)].turns_left;
+
+        /* TRANS:  "Unit: <unit type> | <username> (<nation + team>,
+         * <number> turn cease-fire)" */
+        astr_add_line(&str, PL_("Unit: %s | %s (%s, %d turn cease-fire)",
+                                "Unit: %s | %s (%s, %d turn cease-fire)",
+                                turns),
+                      utype_name_translation(ptype),
+                      username, nation, turns);
+      } else {
+        /* TRANS: "Unit: <unit type> | <username> (<nation + team>,
+         * <diplomatic state>)" */
+        astr_add_line(&str, _("Unit: %s | %s (%s, %s)"),
+                      utype_name_translation(ptype), username, nation,
+                      diplo_city_adjectives[ds[player_index(owner)].type]);
+      }
+    }
+
+    /* TRANS: A is attack power, D is defense power, FP is firepower,
+     * HP is hitpoints (current and max). */
+    astr_add_line(&str, _("A:%d D:%d FP:%d HP:%d/%d (%s)"),
+		  ptype->attack_strength, 
+		  ptype->defense_strength, ptype->firepower, punit->hp, 
+		  ptype->hp,
+		  _(ptype->veteran[punit->veteran].name));
+
+    if ((NULL == pplayer || owner == pplayer)
+	&& unit_list_size(ptile->units) >= 2) {
+      /* TRANS: "5 more" units on this tile */
+      astr_add(&str, _("  (%d more)"), unit_list_size(ptile->units) - 1);
+    }
+  } 
+  return str.str;
+}
+
+
+
+/****************************************************************************
+...
+****************************************************************************/
+void handle_info_text_req(struct player *pplayer, int x, int y, int visible_unit_id)
+{
+  struct tile *ptile = map_pos_to_tile(x, y);
+  struct unit *punit = (visible_unit_id == 0) ? NULL : game_find_unit_by_number(visible_unit_id);
+  const char *info_text = popup_info_text(ptile, pplayer, punit);
+
+  conn_list_iterate(pplayer->connections, pconn) {
+    dsend_packet_info_text_message(pconn, info_text);
+  } conn_list_iterate_end;
+
+}
+
diff --git a/freeciv/server/maphand.h b/freeciv/server/maphand.h
index 27a120f..f074668 100644
--- a/freeciv/server/maphand.h
+++ b/freeciv/server/maphand.h
@@ -121,5 +121,7 @@ void change_playertile_site(struct player_tile *ptile,
 
 void create_base(struct tile *ptile, struct base_type *pbase,
                  struct player *pplayer);
+void handle_info_text_req(struct player *pplayer, int x, int y, int visible_unit_id);
+
 
 #endif  /* FC__MAPHAND_H */
