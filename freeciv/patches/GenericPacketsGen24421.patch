diff -Nurd -X.diff_ignore freeciv/common/generate_packets.py freeciv/common/generate_packets.py
--- freeciv/common/generate_packets.py	2016-02-24 03:21:23.846311767 +0200
+++ freeciv/common/generate_packets.py	2016-02-24 03:23:21.990172575 +0200
@@ -38,9 +38,6 @@
 
 lazy_overwrite=0
 
-def is_delta_disabled():
-    return "--disable-delta" in sys.argv
-
 def verbose(s):
     if "-v" in sys.argv:
         print(s)
@@ -171,8 +168,6 @@
     if flaginfo["is_key"]: arr.remove("key")
     flaginfo["diff"]=("diff" in arr)
     if flaginfo["diff"]: arr.remove("diff")
-    if is_delta_disabled():
-        flaginfo["diff"] = 0
     adds=[]
     removes=[]
     remaining=[]
@@ -287,7 +282,7 @@
         return '''
     {
       differ = (%(array_size_o)s != %(array_size_u)s);
-      if(!differ) {
+      if (!differ) {
         int i;
         for (i = 0; i < %(array_size_u)s; i++) {
           if (%(c)s) {
@@ -308,7 +303,7 @@
            not self.is_array:
             b="packet->%(name)s"%self.get_dict(vars())
             return '''%s
-  if(differ) {
+  if (differ) {
     different++;
   }
   if (%s) {
@@ -327,11 +322,11 @@
 
     # Returns a code fragment which will put this field if the
     # content has changed. Does nothing for bools-in-header.    
-    def get_put_wrapper(self,packet,i):
+    def get_put_wrapper(self,packet,i,deltafragment):
         if fold_bool_into_header and self.struct_type=="bool" and \
            not self.is_array:
             return "  /* field %(i)d is folded into the header */\n"%vars()
-        put=self.get_put()
+        put=self.get_put(deltafragment)
         packet_name=packet.name
         log_macro=packet.log_macro
         if packet.gen_log:
@@ -348,15 +343,15 @@
 '''%self.get_dict(vars())
 
     # Returns code which put this field.
-    def get_put(self):
-        return '''  #ifdef FREECIV_JSON_CONNECTION
+    def get_put(self,deltafragment):
+        return '''#ifdef FREECIV_JSON_CONNECTION
   field_addr.name = \"%(name)s\";
-  #endif /* FREECIV_JSON_CONNECTION */
+#endif /* FREECIV_JSON_CONNECTION */
 '''%self.__dict__ \
-               + self.get_put_real();
+               + self.get_put_real(deltafragment);
 
     # The code which put this field before it is wrapped in address adding.
-    def get_put_real(self):
+    def get_put_real(self,deltafragment):
         if self.dataio_type=="bitvector":
             return "DIO_BV_PUT(&dout, \"%(name)s\", &field_addr, packet->%(name)s);"%self.__dict__
 
@@ -394,23 +389,89 @@
             else:
                 c="DIO_PUT(%(dataio_type)s, &dout, namestr, &field_addr, real_packet->%(name)s[i]);"%self.__dict__
 
-        if not self.diff:
-            if self.is_array==2 and self.dataio_type!="string" \
-               and self.dataio_type!="estring":
-                return '''
+        if deltafragment and self.diff:
+            return '''
+    {
+      int i, count;
+      char namestr[512];
+
+#ifdef FREECIV_JSON_CONNECTION
+      /* Create the array. */
+      DIO_PUT(farray, &dout, \"%(name)s\", &field_addr, %(array_size_u)s);
+
+      /* Enter array. */
+      field_addr.sub_location = plocation_elem_new(0);
+#endif /* FREECIV_JSON_CONNECTION */
+
+      fc_assert(%(array_size_u)s < 255);
+
+      count = 0;
+      for (i = 0; i < %(array_size_u)s; i++) {
+        if (old->%(name)s[i] != real_packet->%(name)s[i]) {
+          fc_snprintf(namestr, sizeof(namestr), "index_%%%%d", count++);
+#ifdef FREECIV_JSON_CONNECTION
+          /* Next diff array element. */
+          field_addr.sub_location->number = count - 1;
+
+          /* Create the diff array element. */
+          DIO_PUT(farray, &dout, \"%(name)s\", &field_addr, %(array_size_u)s);
+
+          /* Enter diff array element (start at the index address). */
+          field_addr.sub_location->sub_location = plocation_elem_new(0);
+#endif /* FREECIV_JSON_CONNECTION */
+          DIO_PUT(uint8, &dout, namestr, &field_addr, i);
+
+#ifdef FREECIV_JSON_CONNECTION
+          /* Content address. */
+          field_addr.sub_location->sub_location->number = 1;
+#endif /* FREECIV_JSON_CONNECTION */
+          %(c)s
+
+#ifdef FREECIV_JSON_CONNECTION
+          /* Exit diff array element. */
+          free(field_addr.sub_location->sub_location);
+          field_addr.sub_location->sub_location = NULL;
+#endif /* FREECIV_JSON_CONNECTION */
+        }
+      }
+      fc_snprintf(namestr, sizeof(namestr), "index_%%%%d", count++);
+#ifdef FREECIV_JSON_CONNECTION
+      field_addr.sub_location->number = count - 1;
+
+      /* Create the diff array element. */
+      DIO_PUT(farray, &dout, \"%(name)s\", &field_addr, %(array_size_u)s);
+
+      /* Enter diff array element. Point to index address. */
+      field_addr.sub_location->sub_location = plocation_elem_new(0);
+#endif /* FREECIV_JSON_CONNECTION */
+      DIO_PUT(uint8, &dout, namestr, &field_addr, 255);
+
+#ifdef FREECIV_JSON_CONNECTION
+      /* Exit diff array element. */
+      free(field_addr.sub_location->sub_location);
+      field_addr.sub_location->sub_location = NULL;
+
+      /* Exit array. */
+      free(field_addr.sub_location);
+      field_addr.sub_location = NULL;
+#endif /* FREECIV_JSON_CONNECTION */
+    }'''%self.get_dict(vars())
+        if self.is_array == 2 and self.dataio_type != "string" \
+           and self.dataio_type != "estring":
+            return '''
     {
       int i, j;
 
-      #ifdef FREECIV_JSON_CONNECTION
+#ifdef FREECIV_JSON_CONNECTION
       /* Create the outer array. */
       DIO_PUT(farray, &dout, \"%(name)s\", &field_addr, %(array_size_u)s);
 
       /* Enter the outer array. */
       field_addr.sub_location = plocation_elem_new(0);
-      #endif /* FREECIV_JSON_CONNECTION */
+#endif /* FREECIV_JSON_CONNECTION */
 
       for (i = 0; i < %(array_size1_u)s; i++) {
-        #ifdef FREECIV_JSON_CONNECTION
+#ifdef FREECIV_JSON_CONNECTION
         /* Next inner array (an element in the outer array). */
         field_addr.sub_location->number = i;
 
@@ -419,134 +480,67 @@
 
         /* Enter the inner array. */
         field_addr.sub_location->sub_location = plocation_elem_new(0);
-        #endif /* FREECIV_JSON_CONNECTION */
+#endif /* FREECIV_JSON_CONNECTION */
 
         for (j = 0; j < %(array_size2_u)s; j++) {
           char namestr[512];
 
           fc_snprintf(namestr, sizeof(namestr), \"%(name)s_%%%%d_%%%%d\", i, j);
-          #ifdef FREECIV_JSON_CONNECTION
+#ifdef FREECIV_JSON_CONNECTION
           /* Next element (in the inner array). */
           field_addr.sub_location->sub_location->number = j;
-          #endif /* FREECIV_JSON_CONNECTION */
+#endif /* FREECIV_JSON_CONNECTION */
           %(c)s
         }
 
-        #ifdef FREECIV_JSON_CONNECTION
+#ifdef FREECIV_JSON_CONNECTION
         /* Exit the inner array. */
         free(field_addr.sub_location->sub_location);
         field_addr.sub_location->sub_location = NULL;
-        #endif /* FREECIV_JSON_CONNECTION */
+#endif /* FREECIV_JSON_CONNECTION */
       }
 
-      #ifdef FREECIV_JSON_CONNECTION
+#ifdef FREECIV_JSON_CONNECTION
       /* Exit the outer array. */
       free(field_addr.sub_location);
       field_addr.sub_location = NULL;
-      #endif /* FREECIV_JSON_CONNECTION */
-    } '''%self.get_dict(vars())
-            else:
-                return '''
+#endif /* FREECIV_JSON_CONNECTION */
+    }'''%self.get_dict(vars())
+        else:
+            return '''
     {
       int i;
 
-      #ifdef FREECIV_JSON_CONNECTION
+#ifdef FREECIV_JSON_CONNECTION
       /* Create the array. */
       DIO_PUT(farray, &dout, \"%(name)s\", &field_addr, %(array_size_u)s);
 
       /* Enter the array. */
       field_addr.sub_location = plocation_elem_new(0);
-      #endif /* FREECIV_JSON_CONNECTION */
+#endif /* FREECIV_JSON_CONNECTION */
 
       for (i = 0; i < %(array_size_u)s; i++) {
         char namestr[512];
 
         fc_snprintf(namestr, sizeof(namestr), \"%(name)s_%%%%d\", i);
-        #ifdef FREECIV_JSON_CONNECTION
+#ifdef FREECIV_JSON_CONNECTION
         /* Next array element. */
         field_addr.sub_location->number = i;
-        #endif /* FREECIV_JSON_CONNECTION */
+#endif /* FREECIV_JSON_CONNECTION */
         %(c)s
       }
 
-      #ifdef FREECIV_JSON_CONNECTION
-      /* Exit array. */
-      free(field_addr.sub_location);
-      field_addr.sub_location = NULL;
-      #endif /* FREECIV_JSON_CONNECTION */
-    } '''%self.get_dict(vars())
-        else:
-            return '''
-    {
-      int i, count;
-      char namestr[512];
-
-      #ifdef FREECIV_JSON_CONNECTION
-      /* Create the array. */
-      DIO_PUT(farray, &dout, \"%(name)s\", &field_addr, %(array_size_u)s);
-
-      /* Enter array. */
-      field_addr.sub_location = plocation_elem_new(0);
-      #endif /* FREECIV_JSON_CONNECTION */
-
-      fc_assert(%(array_size_u)s < 255);
-
-      count = 0;
-      for (i = 0; i < %(array_size_u)s; i++) {
-        if (old->%(name)s[i] != real_packet->%(name)s[i]) {
-          fc_snprintf(namestr, sizeof(namestr), "index_%%%%d", count++);
-          #ifdef FREECIV_JSON_CONNECTION
-          /* Next diff array element. */
-          field_addr.sub_location->number = count - 1;
-
-          /* Create the diff array element. */
-          DIO_PUT(farray, &dout, \"%(name)s\", &field_addr, %(array_size_u)s);
-
-          /* Enter diff array element (start at the index address). */
-          field_addr.sub_location->sub_location = plocation_elem_new(0);
-          #endif /* FREECIV_JSON_CONNECTION */
-          DIO_PUT(uint8, &dout, namestr, &field_addr, i);
-
-          #ifdef FREECIV_JSON_CONNECTION
-          /* Content address. */
-          field_addr.sub_location->sub_location->number = 1;
-          #endif /* FREECIV_JSON_CONNECTION */
-          %(c)s
-
-          #ifdef FREECIV_JSON_CONNECTION
-          /* Exit diff array element. */
-          free(field_addr.sub_location->sub_location);
-          field_addr.sub_location->sub_location = NULL;
-          #endif /* FREECIV_JSON_CONNECTION */
-        }
-      }
-      fc_snprintf(namestr, sizeof(namestr), "index_%%%%d", count++);
-      #ifdef FREECIV_JSON_CONNECTION
-      field_addr.sub_location->number = count - 1;
-
-      /* Create the diff array element. */
-      DIO_PUT(farray, &dout, \"%(name)s\", &field_addr, %(array_size_u)s);
-
-      /* Enter diff array element. Point to index address. */
-      field_addr.sub_location->sub_location = plocation_elem_new(0);
-      #endif /* FREECIV_JSON_CONNECTION */
-      DIO_PUT(uint8, &dout, namestr, &field_addr, 255);
-
-      #ifdef FREECIV_JSON_CONNECTION
-      /* Exit diff array element. */
-      free(field_addr.sub_location->sub_location);
-      field_addr.sub_location->sub_location = NULL;
-
+#ifdef FREECIV_JSON_CONNECTION
       /* Exit array. */
       free(field_addr.sub_location);
       field_addr.sub_location = NULL;
-      #endif /* FREECIV_JSON_CONNECTION */
-    } '''%self.get_dict(vars())
+#endif /* FREECIV_JSON_CONNECTION */
+    }'''%self.get_dict(vars())
 
     # Returns a code fragment which will get the field if the
     # "fields" bitvector says so.
-    def get_get_wrapper(self,packet,i):
-        get=self.get_get()
+    def get_get_wrapper(self,packet,i,deltafragment):
+        get=self.get_get(deltafragment)
         if fold_bool_into_header and self.struct_type=="bool" and \
            not self.is_array:
             return  "  real_packet->%(name)s = BV_ISSET(fields, %(i)d);\n"%self.get_dict(vars())
@@ -562,15 +556,15 @@
 '''%self.get_dict(vars())
 
     # Returns code which get this field.
-    def get_get(self):
+    def get_get(self,deltafragment):
         return '''#ifdef FREECIV_JSON_CONNECTION
 field_addr.name = \"%(name)s\";
 #endif /* FREECIV_JSON_CONNECTION */
 '''%self.__dict__ \
-               + self.get_get_real();
+               + self.get_get_real(deltafragment);
 
     # The code which get this field before it is wrapped in address adding.
-    def get_get_real(self):
+    def get_get_real(self,deltafragment):
         if self.struct_type=="float" and not self.is_array:
             return '''if (!DIO_GET(%(dataio_type)s, &din, \"%(name)s\", &field_addr, &real_packet->%(name)s, %(float_factor)d)) {
   RECEIVE_PACKET_FIELD_ERROR(%(name)s);
@@ -600,7 +594,7 @@
             else:
                 return '''{
   int readin;
-  
+
   if (!DIO_GET(%(dataio_type)s, &din, \"%(name)s\", &field_addr, &readin)) {
     RECEIVE_PACKET_FIELD_ERROR(%(name)s);
   }
@@ -637,7 +631,7 @@
             else:
                 c='''{
       int readin;
-  
+
       if (!DIO_GET(%(dataio_type)s, &din, \"%(name)s\", &field_addr, &readin)) {
         RECEIVE_PACKET_FIELD_ERROR(%(name)s);
       }
@@ -650,7 +644,7 @@
         else:
             c='''{
       int readin;
-  
+
       if (!DIO_GET(%(dataio_type)s, &din, namestr, &field_addr, &readin)) {
         RECEIVE_PACKET_FIELD_ERROR(%(name)s);
       }
@@ -683,71 +677,72 @@
 {
   int i, j;
 
-  #ifdef FREECIV_JSON_CONNECTION
+#ifdef FREECIV_JSON_CONNECTION
   /* Enter outer array. */
   field_addr.sub_location = plocation_elem_new(0);
-  #endif /* FREECIV_JSON_CONNECTION */
+#endif /* FREECIV_JSON_CONNECTION */
 %(extra)s
   for (i = 0; i < %(array_size1_u)s; i++) {
-    #ifdef FREECIV_JSON_CONNECTION
+#ifdef FREECIV_JSON_CONNECTION
     /* Update address of outer array element (inner array). */
     field_addr.sub_location->number = i;
 
     /* Enter inner array. */
     field_addr.sub_location->sub_location = plocation_elem_new(0);
-    #endif /* FREECIV_JSON_CONNECTION */
+#endif /* FREECIV_JSON_CONNECTION */
     for (j = 0; j < %(array_size2_u)s; j++) {
       char namestr[512];
 
       fc_snprintf(namestr, sizeof(namestr), \"%(name)s_%%%%d_%%%%d\", i, j);
-      #ifdef FREECIV_JSON_CONNECTION
+#ifdef FREECIV_JSON_CONNECTION
       /* Update address of element in inner array. */
       field_addr.sub_location->sub_location->number = j;
-      #endif /* FREECIV_JSON_CONNECTION */
+#endif /* FREECIV_JSON_CONNECTION */
       %(c)s
     }
 
-    #ifdef FREECIV_JSON_CONNECTION
+#ifdef FREECIV_JSON_CONNECTION
     /* Exit inner array. */
     free(field_addr.sub_location->sub_location);
     field_addr.sub_location->sub_location = NULL;
-    #endif /* FREECIV_JSON_CONNECTION */
+#endif /* FREECIV_JSON_CONNECTION */
   }
 
-  #ifdef FREECIV_JSON_CONNECTION
+#ifdef FREECIV_JSON_CONNECTION
   /* Exit outer array. */
   free(field_addr.sub_location);
   field_addr.sub_location = NULL;
-  #endif /* FREECIV_JSON_CONNECTION */
+#endif /* FREECIV_JSON_CONNECTION */
 }'''%self.get_dict(vars())
             else:
                 return '''
 {
   int i;
 
-  #ifdef FREECIV_JSON_CONNECTION
+#ifdef FREECIV_JSON_CONNECTION
   /* Enter array. */
   field_addr.sub_location = plocation_elem_new(0);
-  #endif /* FREECIV_JSON_CONNECTION */
+#endif /* FREECIV_JSON_CONNECTION */
 %(extra)s
   for (i = 0; i < %(array_size_u)s; i++) {
     char namestr[512];
 
     fc_snprintf(namestr, sizeof(namestr), \"%(name)s_%%%%d\", i);
-    #ifdef FREECIV_JSON_CONNECTION
+#ifdef FREECIV_JSON_CONNECTION
     field_addr.sub_location->number = i;
-    #endif /* FREECIV_JSON_CONNECTION */
+#endif /* FREECIV_JSON_CONNECTION */
     %(c)s
   }
 
-  #ifdef FREECIV_JSON_CONNECTION
+#ifdef FREECIV_JSON_CONNECTION
   /* Exit array. */
   free(field_addr.sub_location);
   field_addr.sub_location = NULL;
-  #endif /* FREECIV_JSON_CONNECTION */
+#endif /* FREECIV_JSON_CONNECTION */
 }'''%self.get_dict(vars())
-        else:
+        elif deltafragment and self.diff:
             return '''
+{
 int count;
 
 #ifdef FREECIV_JSON_CONNECTION
@@ -758,18 +753,18 @@
 for (count = 0;; count++) {
   int i;
 
-  #ifdef FREECIV_JSON_CONNECTION
+#ifdef FREECIV_JSON_CONNECTION
   field_addr.sub_location->number = count;
 
   /* Enter diff array element (start at the index address). */
   field_addr.sub_location->sub_location = plocation_elem_new(0);
-  #endif /* FREECIV_JSON_CONNECTION */
+#endif /* FREECIV_JSON_CONNECTION */
 
   if (!DIO_GET(uint8, &din, \"%(name)s\", &field_addr, &i)) {
     RECEIVE_PACKET_FIELD_ERROR(%(name)s);
   }
   if (i == 255) {
-    #ifdef FREECIV_JSON_CONNECTION
+#ifdef FREECIV_JSON_CONNECTION
     /* Exit diff array element. */
     free(field_addr.sub_location->sub_location);
     field_addr.sub_location->sub_location = NULL;
@@ -777,7 +772,7 @@
     /* Exit diff array. */
     free(field_addr.sub_location);
     field_addr.sub_location = NULL;
-    #endif /* FREECIV_JSON_CONNECTION */
+#endif /* FREECIV_JSON_CONNECTION */
 
     break;
   }
@@ -790,27 +785,38 @@
     char namestr[512];
 
     fc_snprintf(namestr, sizeof(namestr), \"%(name)s_%%%%d\", i);
-    #ifdef FREECIV_JSON_CONNECTION
+#ifdef FREECIV_JSON_CONNECTION
     /* Content address. */
     field_addr.sub_location->sub_location->number = 1;
-    #endif /* FREECIV_JSON_CONNECTION */
+#endif /* FREECIV_JSON_CONNECTION */
     %(c)s
   }
 
-  #ifdef FREECIV_JSON_CONNECTION
+#ifdef FREECIV_JSON_CONNECTION
   /* Exit diff array element. */
   free(field_addr.sub_location->sub_location);
   field_addr.sub_location->sub_location = NULL;
-  #endif /* FREECIV_JSON_CONNECTION */
+#endif /* FREECIV_JSON_CONNECTION */
 }
 
 #ifdef FREECIV_JSON_CONNECTION
 /* Exit array. */
 free(field_addr.sub_location);
 field_addr.sub_location = NULL;
-#endif /* FREECIV_JSON_CONNECTION */'''%self.get_dict(vars())
+#endif /* FREECIV_JSON_CONNECTION */
+}'''%self.get_dict(vars())
+        else:
+            return '''
+{
+  int i;
+  char namestr[512];
+
+  for (i = 0; i < %(array_size_u)s; i++) {
+    fc_snprintf(namestr, sizeof(namestr), \"%(name)s_%%%%d\", i);
+    %(c)s
+  }
+}'''%self.get_dict(vars())
 
-#'''
 
 # Class which represents a capability variant.
 class Variant:
@@ -911,7 +917,7 @@
     # bitvector. Each bit in this bitvector represents one non-key
     # field.    
     def get_bitvector(self):
-        return "BV_DEFINE(%(name)s_fields, %(bits)d);\n\n"%self.__dict__
+        return "BV_DEFINE(%(name)s_fields, %(bits)d);\n"%self.__dict__
 
     # Returns a code fragment which is the packet specific part of
     # the delta_stats_report() function.
@@ -922,7 +928,7 @@
     log_test(\"%(name)s %%d out of %%d got discarded\",
       stats_%(name)s_discarded, stats_%(name)s_sent);
     for (i = 0; i < %(bits)d; i++) {
-      if(stats_%(name)s_counters[i] > 0) {
+      if (stats_%(name)s_counters[i] > 0) {
         log_test(\"  %%4d / %%4d: %%2d = %%s\",
           stats_%(name)s_counters[i],
           (stats_%(name)s_sent - stats_%(name)s_discarded),
@@ -985,7 +991,7 @@
             for field in self.key_fields:
                 body=body+'''  return key1->%s == key2->%s;
 '''%(field.name,field.name)
-            extro="}\n\n"
+            extro="}\n"
             return intro+body+extro
 
     # Returns a code fragment which is the implementation of the send
@@ -1040,19 +1046,22 @@
                     diff='force_to_send'
                 else:
                     diff='0'
-                body=self.get_delta_send_body()
-                delta_header='''  %(name)s_fields fields;
+                delta_header='''#ifdef FREECIV_DELTA_PROTOCOL
+  %(name)s_fields fields;
   struct %(packet_name)s *old;
   bool differ;
   struct genhash **hash = pc->phs.sent + %(type)s;
   int different = %(diff)s;
+#endif /* FREECIV_DELTA_PROTOCOL */
 '''
+                body=self.get_delta_send_body()+"\n#ifndef FREECIV_DELTA_PROTOCOL"
             else:
-                body="\n"
-                for field in self.fields:
-                    body=body+field.get_put()+"\n"
-                body=body+"\n"
                 delta_header=""
+                body="#if 1 /* To match endif */"
+            body=body+"\n"
+            for field in self.fields:
+                body=body+field.get_put(0)+"\n"
+            body=body+"\n#endif\n"
         else:
             body=""
             delta_header=""
@@ -1066,9 +1075,9 @@
             post=""
 
         if len(self.fields) != 0:
-            faddr = '''  #ifdef FREECIV_JSON_CONNECTION
+            faddr = '''#ifdef FREECIV_JSON_CONNECTION
   struct plocation field_addr = *plocation_field_new(NULL);
-  #endif /* FREECIV_JSON_CONNECTION */
+#endif /* FREECIV_JSON_CONNECTION */
 '''
         else:
             faddr = ""
@@ -1084,6 +1093,7 @@
     # Helper for get_send()
     def get_delta_send_body(self):
         intro='''
+#ifdef FREECIV_DELTA_PROTOCOL
   if (NULL == *hash) {
     *hash = genhash_new_full(hash_%(name)s, cmp_%(name)s,
                              NULL, NULL, NULL, free);
@@ -1097,7 +1107,6 @@
     memset(old, 0, sizeof(*old));
     different = 1;      /* Force to send. */
   }
-
 '''
         body=""
         for i in range(len(self.other_fields)):
@@ -1120,19 +1129,19 @@
 '''%self.get_dict(vars())
 
         body=body+'''
-  #ifdef FREECIV_JSON_CONNECTION
+#ifdef FREECIV_JSON_CONNECTION
   field_addr.name = "fields";
-  #endif /* FREECIV_JSON_CONNECTION */
+#endif /* FREECIV_JSON_CONNECTION */
   DIO_BV_PUT(&dout, \"fields\", &field_addr, fields);
 '''
 
         for field in self.key_fields:
-            body=body+field.get_put()+"\n"
+            body=body+field.get_put(1)+"\n"
         body=body+"\n"
 
         for i in range(len(self.other_fields)):
             field=self.other_fields[i]
-            body=body+field.get_put_wrapper(self,i)
+            body=body+field.get_put_wrapper(self,i,1)
         body=body+'''
   *old = *real_packet;
 '''
@@ -1145,6 +1154,7 @@
     genhash_remove(*hash, real_packet);
   }
 '''%i
+        body=body+'''#endif /* FREECIV_DELTA_PROTOCOL */'''
 
         return intro+body
 
@@ -1160,31 +1170,35 @@
 
 '''
         if self.delta:
-            delta_header='''  %(name)s_fields fields;
+            delta_header='''#ifdef FREECIV_DELTA_PROTOCOL
+  %(name)s_fields fields;
   struct %(packet_name)s *old;
   struct genhash **hash = pc->phs.received + %(type)s;
+#endif /* FREECIV_DELTA_PROTOCOL */
 '''
             delta_body1='''
-  #ifdef FREECIV_JSON_CONNECTION
+#ifdef FREECIV_DELTA_PROTOCOL
+#ifdef FREECIV_JSON_CONNECTION
   field_addr.name = "fields";
-  #endif /* FREECIV_JSON_CONNECTION */
+#endif /* FREECIV_JSON_CONNECTION */
   DIO_BV_GET(&din, \"fields\", &field_addr, fields);
   '''
             body1=""
             for field in self.key_fields:
-                body1=body1+prefix("  ",field.get_get())+"\n"
-            body1=body1+"\n"
+                body1=body1+prefix("  ",field.get_get(1))+"\n"
+            body1=body1+"\n#else /* FREECIV_DELTA_PROTOCOL */\n"
             body2=self.get_delta_receive_body()
         else:
             delta_header=""
             delta_body1=""
-            body1=""
-            for field in self.fields:
-                body1=body1+prefix("  ",field.get_get())+"\n"
-            if not body1:
-                body1="  real_packet->__dummy = 0xff;"
-            body1=body1+"\n"
+            body1="#if 1 /* To match endif */\n"
             body2=""
+        nondelta=""
+        for field in self.fields:
+            nondelta=nondelta+prefix("  ",field.get_get(0))+"\n"
+        if not nondelta:
+            nondelta="  real_packet->__dummy = 0xff;"
+        body1=body1+nondelta+"\n#endif\n"
 
         if self.gen_log:
             log='  %(log_macro)s("%(name)s: got info about (%(keys_format)s)"%(keys_arg)s);\n'
@@ -1197,9 +1211,9 @@
             post=""
 
         if len(self.fields) != 0:
-            faddr = '''  #ifdef FREECIV_JSON_CONNECTION
+            faddr = '''#ifdef FREECIV_JSON_CONNECTION
   struct plocation field_addr = *plocation_field_new(NULL);
-  #endif /* FREECIV_JSON_CONNECTION */
+#endif /* FREECIV_JSON_CONNECTION */
 '''
         else:
             faddr = ""
@@ -1223,6 +1237,7 @@
         else:
             fl=""
         body='''
+#ifdef FREECIV_DELTA_PROTOCOL
   if (NULL == *hash) {
     *hash = genhash_new_full(hash_%(name)s, cmp_%(name)s,
                              NULL, NULL, NULL, free);
@@ -1237,7 +1252,7 @@
 '''%self.get_dict(vars())
         for i in range(len(self.other_fields)):
             field=self.other_fields[i]
-            body=body+field.get_get_wrapper(self,i)
+            body=body+field.get_get_wrapper(self,i,1)
 
         extro='''
   if (NULL == old) {
@@ -1258,7 +1273,9 @@
   }
 '''%i
 
-        return body+extro
+        return body+extro+'''
+#endif /* FREECIV_DELTA_PROTOCOL */
+'''
 
 # Class which represents a packet. A packet contains a list of fields.
 class Packet:
@@ -1350,9 +1367,6 @@
 
         assert len(arr)==0,repr(arr)
 
-        if is_delta_disabled():
-            self.delta=0
-
         self.fields=[]
         for i in lines:
             self.fields=self.fields+parse_fields(i,types)
@@ -1470,7 +1484,7 @@
 
         return '''%(send_prototype)s
 {
-  if(!pc->used) {
+  if (!pc->used) {
     log_error("WARNING: trying to send data to the closed connection %%s",
               conn_description(pc));
     return -1;
@@ -1486,9 +1500,11 @@
         result=""
         for v in self.variants:
             if v.delta:
+                result=result+"#ifdef FREECIV_DELTA_PROTOCOL\n"
                 result=result+v.get_hash()
                 result=result+v.get_cmp()
                 result=result+v.get_bitvector()
+                result=result+"#endif /* FREECIV_DELTA_PROTOCOL */\n\n"
             result=result+v.get_receive()
             result=result+v.get_send()
         return result
@@ -1947,8 +1963,8 @@
 #include "packets.h"
 ''')
     output_c.write(get_packet_functional_capability(packets))
-    if not is_delta_disabled():
-        output_c.write('''
+    output_c.write('''
+#ifdef FREECIV_DELTA_PROTOCOL
 static genhash_val_t hash_const(const void *vkey)
 {
   return 0;
@@ -1958,7 +1974,7 @@
 {
   return TRUE;
 }
-
+#endif /* FREECIV_DELTA_PROTOCOL */
 ''')
 
     if generate_stats:
diff -Nurd -X.diff_ignore freeciv/common/Makefile.am freeciv/common/Makefile.am
--- freeciv/common/Makefile.am	2016-02-24 02:40:28.870661317 +0200
+++ freeciv/common/Makefile.am	2016-02-24 03:23:21.990172575 +0200
@@ -159,7 +159,7 @@
 packets_gen.h packets_gen.c: packets_generate
 .INTERMEDIATE: packets_generate
 packets_generate: packets.def generate_packets.py
-	cd $(srcdir) && ./generate_packets.py ${GENERATE_PACKETS_ARGS}
+	cd $(srcdir) && ./generate_packets.py
 	touch packets_generate
 
 # These files are not generated to builddir, but to srcdir */
diff -Nurd -X.diff_ignore freeciv/configure.ac freeciv/configure.ac
--- freeciv/configure.ac	2016-02-24 03:05:51.914190447 +0200
+++ freeciv/configure.ac	2016-02-24 03:23:21.990172575 +0200
@@ -268,9 +268,6 @@
 dnl sets MAPIMG_WAND_CFLAGS, MAPIMG_WAND_LIBS
 FC_MAPIMG_MAGICKWAND
 
-dnl set arguments for the packet generator
-GENERATE_PACKETS_ARGS=""
-
 dnl make it possible to disable the delta network protocol
 AC_ARG_ENABLE([delta-protocol],
   AS_HELP_STRING([--disable-delta-protocol],
@@ -286,8 +283,8 @@
 AS_IF([test "x$enable_delta_protocol" = "xno"], [
   AC_MSG_WARN([delta network protocol is off])
   AC_MSG_WARN([no network compatibility with regular Freeciv])
-  AC_MSG_WARN([won't be able to play with regular Freeciv])
-  GENERATE_PACKETS_ARGS="$GENERATE_PACKETS_ARGS --disable-delta"])
+  AC_MSG_WARN([won't be able to play with regular Freeciv])],[
+  AC_DEFINE([FREECIV_DELTA_PROTOCOL], [1], [Delta protocol enabled])])
 
 dnl done setting arguments for the packet generator
 AC_SUBST([GENERATE_PACKETS_ARGS])
diff -Nurd -X.diff_ignore freeciv/gen_headers/freeciv_config.h.in freeciv/gen_headers/freeciv_config.h.in
--- freeciv/gen_headers/freeciv_config.h.in	2016-02-24 02:40:28.878661281 +0200
+++ freeciv/gen_headers/freeciv_config.h.in	2016-02-24 03:23:21.990172575 +0200
@@ -83,6 +83,9 @@
 /* jansson network protocol in use */
 #undef FREECIV_JSON_CONNECTION
 
+/* Delta protocol enabled */
+#undef FREECIV_DELTA_PROTOCOL
+
 /* uses some winsock version */
 #undef FREECIV_HAVE_WINSOCK
 
