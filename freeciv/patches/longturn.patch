diff --git a/server/connecthand.c b/server/connecthand.c
index d74f178..d76f8c3 100644
--- a/server/connecthand.c
+++ b/server/connecthand.c
@@ -251,6 +251,20 @@ void establish_new_connection(struct connection *pconn)
     notify_conn(dest, NULL, E_CONNECTION, ftc_server,
 		_("You are logged in as '%s' connected to no player."),
                 pconn->username);
+
+    if (is_longturn()) {
+      pplayer = find_uncontrolled_player();
+      if (pplayer) {
+        /* Make it human! */
+        set_as_human(pplayer);
+        pplayer->economic.gold += game.info.turn * 5;
+        connection_attach(pconn, pplayer, FALSE);
+      } else {
+        notify_conn(dest, NULL, E_CONNECTION, ftc_server,
+           _("Unable to join LongTurn game. The game is probably full."));
+      }
+    }
+
   } else {
     notify_conn(dest, NULL, E_CONNECTION, ftc_server,
 		_("You are logged in as '%s' connected to %s."),
@@ -540,8 +554,15 @@ void send_conn_info_remove(struct conn_list *src, struct conn_list *dest)
 struct player *find_uncontrolled_player(void)
 {
   players_iterate(played) {
-    if (!played->is_connected && !played->was_created) {
-      return played;
+    if (!is_longturn()) {
+      if (!played->is_connected && !played->was_created) {
+        return played;
+      }
+    } else {
+      if ((!played->is_connected && !played->was_created && played->unassigned_user && played->is_alive) 
+          || (played->is_alive && played->nturns_idle > 12 )) {
+        return played;
+      }
     }
   } players_iterate_end;
 
@@ -615,6 +636,9 @@ static bool connection_attach_real(struct connection *pconn,
       }
       (void) aifill(game.info.aifill);
     }
+    if (is_longturn()) {
+      server_player_set_name(pplayer, pconn->username);
+    }
 
     if (game.server.auto_ai_toggle && !is_human(pplayer)) {
       toggle_ai_player_direct(NULL, pplayer);
diff --git a/server/srv_main.c b/server/srv_main.c
index d2fbf65..18af896 100644
--- a/server/srv_main.c
+++ b/server/srv_main.c
@@ -3095,6 +3095,15 @@ static void srv_ready(void)
         map_show_all(pplayer);
       } players_iterate_end;
     }
+
+    if (is_longturn()) {
+      players_iterate(pplayer) {
+        if (is_ai(pplayer)) {
+          set_as_human(pplayer);
+	  server_player_set_name(pplayer, "New Available Player ");
+	}
+      } players_iterate_end;	    
+    }
   }
 
   if (game.scenario.is_scenario && game.scenario.players) {
@@ -3443,3 +3452,11 @@ static struct rgbcolor *mapimg_server_plrcolor_get(int i)
 {
   return playercolor_get(i);
 }
+
+/**************************************************************************
+ Is this a LongTurn game? 
+**************************************************************************/
+bool is_longturn(void)
+{
+  return (srvarg.port == 6003 || srvarg.port == 6004);
+}
diff --git a/server/srv_main.h b/server/srv_main.h
index 559bc8d..d2701e2 100644
--- a/server/srv_main.h
+++ b/server/srv_main.h
@@ -93,6 +93,7 @@ void srv_init(void);
 void srv_main(void);
 void server_quit(void);
 void save_game_auto(const char *save_reason, enum autosave_type type);
+bool is_longturn(void);
 
 enum server_states server_state(void);
 void set_server_state(enum server_states newstate);
