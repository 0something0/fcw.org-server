diff -Nurd -X.diff_ignore freeciv/common/generate_packets.py freeciv/common/generate_packets.py
--- freeciv/common/generate_packets.py	2015-03-20 19:10:42.396549824 +0200
+++ freeciv/common/generate_packets.py	2015-03-20 19:11:19.584549008 +0200
@@ -250,7 +250,7 @@
         if self.is_array==1:
             tmp="real_packet->%(name)s[i] = %(name)s[i]"%self.__dict__
             return '''  {
-    int i;
+    int i; /* this is for put. */
 
     for (i = 0; i < %(array_size_u) s; i++) {
       %(tmp)s;
@@ -553,10 +553,10 @@
             else:
                 extra=""
             if self.dataio_type=="memory":
-                return '''%(extra)s
-  if (!DIO_GET(%(dataio_type)s, &din, \"%(name)s\", NULL, real_packet->%(name)s, %(array_size_u)s)){
+                return ''' /* not supported yet. %(extra)s
+  if (!dio_get_%(dataio_type)s(pc->json_packet, \"%(name)s\", NULL, real_packet->%(name)s, %(array_size_u)s)){
     RECEIVE_PACKET_FIELD_ERROR(%(name)s);
-  }'''%self.get_dict(vars())
+  } */'''%self.get_dict(vars())
             elif self.is_array==2 and self.dataio_type!="string":
                 return '''
 {
@@ -950,7 +950,7 @@
   struct %(packet_name)s *old;
   struct genhash **hash = pc->phs.received + %(type)s;
 '''
-            delta_body1="\n  DIO_BV_GET(&din, \"fields\", NULL, fields);\n"
+            delta_body1="\n  DIO_BV_GET(pc->json_packet, \"fields\", NULL, fields);\n"
             body1=""
             for field in self.key_fields:
                 body1=body1+prefix("  ",field.get_get())+"\n"
diff -Nurd -X.diff_ignore freeciv/server/handchat.c freeciv/server/handchat.c
--- freeciv/server/handchat.c	2015-03-20 19:10:42.932549812 +0200
+++ freeciv/server/handchat.c	2015-03-20 19:11:19.584549008 +0200
@@ -19,7 +19,10 @@
 #include <stdio.h>
 #include <string.h>
 
+#include <glib.h>
+
 /* utility */
+#include "fciconv.h"
 #include "fcintl.h"
 #include "log.h"
 #include "shared.h"
@@ -319,14 +322,17 @@
 void handle_chat_msg_req(struct connection *pconn, const char *message)
 {
   char real_message[MAX_LEN_MSG], *cp;
+  char* unesc_message;
   bool double_colon;
 
-  sz_strlcpy(real_message, message);
+  unesc_message = g_uri_unescape_string(message, NULL);
+  sz_strlcpy(real_message, unesc_message);
+  g_free(unesc_message);
 
   /* This loop to prevent players from sending multiple lines which can
    * be abused */
   for (cp = real_message; *cp != '\0'; cp++) {
-    if (*cp == '\n' || *cp == '\r') {
+    if (*cp == '\n' || *cp == '\r' || *cp == '<' || *cp == '>' || *cp == '"' || *cp == '\'') {
       *cp = '\0';
       break;
     }
diff -Nurd -X.diff_ignore freeciv/server/plrhand.c freeciv/server/plrhand.c
--- freeciv/server/plrhand.c	2015-03-20 19:10:43.052549809 +0200
+++ freeciv/server/plrhand.c	2015-03-20 19:11:19.584549008 +0200
@@ -1243,12 +1243,12 @@
       || (receiver
           && player_diplstate_get(receiver, plr1)->contact_turns_left > 0)
       || (receiver && receiver == plr2)) {
-    packet_ds->type                 = ds->type;
+    packet_ds->ds_type              = ds->type;
     packet_ds->turns_left           = ds->turns_left;
     packet_ds->has_reason_to_cancel = ds->has_reason_to_cancel;
     packet_ds->contact_turns_left   = ds->contact_turns_left;
   } else {
-    packet_ds->type                 = DS_WAR;
+    packet_ds->ds_type              = DS_WAR;
     packet_ds->turns_left           = 0;
     packet_ds->has_reason_to_cancel = 0;
     packet_ds->contact_turns_left   = 0;
diff -Nurd -X.diff_ignore freeciv/server/ruleset.c freeciv/server/ruleset.c
--- freeciv/server/ruleset.c	2015-03-20 19:10:42.796549815 +0200
+++ freeciv/server/ruleset.c	2015-03-20 19:11:19.584549008 +0200
@@ -6380,6 +6380,8 @@
     packet.ngroups = i;
 
     packet.init_government_id = government_number(n->init_government);
+
+#if 0
     fc_assert(ARRAY_SIZE(packet.init_techs) == ARRAY_SIZE(n->init_techs));
     for (i = 0; i < MAX_NUM_TECH_LIST; i++) {
       packet.init_techs[i] = n->init_techs[i];
@@ -6395,6 +6397,7 @@
       /* Impr_type_id to int */
       packet.init_buildings[i] = n->init_buildings[i];
     }
+#endif
 
     lsend_packet_ruleset_nation(dest, &packet);
   } nations_iterate_end;
