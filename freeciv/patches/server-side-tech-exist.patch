From 6267c3d75fa6df5b2d82717ef0d73c9e75a64495 Mon Sep 17 00:00:00 2001
From: Sveinung Kvilhaugsvik <sveinung84@users.sourceforge.net>
Date: Mon, 24 Feb 2014 07:23:34 +0100
Subject: [PATCH 6/6] Take into account if the target player has any techs that
 can be stolen when calculating the action probability of the spy actions
 steal tect and targetted steal tech.

Idea stolen from Freeciv-web
---
 common/actions.c       | 42 ++++++++++++++++++++++++++++++++++++++++--
 common/metaknowledge.c | 13 +++++++++++--
 common/metaknowledge.h |  4 ++++
 3 files changed, 55 insertions(+), 4 deletions(-)

diff --git a/common/actions.c b/common/actions.c
index 297445f..5ad019a 100644
--- a/common/actions.c
+++ b/common/actions.c
@@ -18,6 +18,7 @@
 /* common */
 #include "actions.h"
 #include "city.h"
+#include "game.h"
 #include "unit.h"
 #include "tile.h"
 
@@ -345,6 +346,33 @@ action_enabled_local(const enum gen_action wanted_action,
 }
 
 /**************************************************************************
+  Does the target has any techs the actor don't?
+**************************************************************************/
+static enum fc_tristate
+tech_can_be_stolen(const struct player *actor_player,
+                   const struct player *target_player)
+{
+  if (can_see_techs_of_target(actor_player, target_player)) {
+    advance_iterate(A_FIRST, padvance) {
+      Tech_type_id i = advance_number(padvance);
+
+      if (player_invention_state(target_player, i) == TECH_KNOWN
+          && player_invention_gettable(actor_player, i,
+                                       game.info.tech_steal_allow_holes)
+          && (player_invention_state(actor_player, i) == TECH_UNKNOWN
+              || (player_invention_state(actor_player, i)
+                  == TECH_PREREQS_KNOWN))) {
+        return TRI_YES;
+      }
+    } advance_iterate_end;
+  } else {
+    return TRI_MAYBE;
+  }
+
+  return TRI_NO;
+}
+
+/**************************************************************************
   An action's probability of success.
 **************************************************************************/
 static action_probability
@@ -400,10 +428,20 @@ action_prob(const enum gen_action wanted_action,
     chance = 200;
     break;
   case ACTION_SPY_STEAL_TECH:
-    /* TODO */
+    /* Do the victim have anything worth taking? */
+    known = tri_and(known,
+                    tech_can_be_stolen(actor_player, target_player));
+
+    /* TODO: Calculate actual chance */
+
     break;
   case ACTION_SPY_TARGETED_STEAL_TECH:
-    /* TODO */
+    /* Do the victim have anything worth taking? */
+    known = tri_and(known,
+                    tech_can_be_stolen(actor_player, target_player));
+
+    /* TODO: Calculate actual chance */
+
     break;
   case ACTION_SPY_INVESTIGATE_CITY:
     /* There is no risk that the city won't get investigated. */
diff --git a/common/metaknowledge.c b/common/metaknowledge.c
index 7537d87..60f6a78 100644
--- a/common/metaknowledge.c
+++ b/common/metaknowledge.c
@@ -110,8 +110,7 @@ static bool is_req_knowable(const struct player *pow_player,
 
   if (req->source.kind == VUT_ADVANCE || req->source.kind == VUT_TECHFLAG) {
     if (req->range == REQ_RANGE_PLAYER
-        && (pow_player == target_player
-            || player_has_embassy(pow_player, target_player))) {
+        && can_see_techs_of_target(pow_player, target_player)) {
       return TRUE;
     }
   }
@@ -203,3 +202,13 @@ mke_eval_reqs(const struct player *pow_player,
 
   return result;
 }
+
+/**************************************************************************
+  Can pow_player see the techs of target player?
+**************************************************************************/
+bool can_see_techs_of_target(const struct player *pow_player,
+                             const struct player *target_player)
+{
+  return pow_player == target_player
+      || player_has_embassy(pow_player, target_player);
+}
diff --git a/common/metaknowledge.h b/common/metaknowledge.h
index 7543dcb..422bce4 100644
--- a/common/metaknowledge.h
+++ b/common/metaknowledge.h
@@ -48,6 +48,10 @@ mke_eval_reqs(const struct player *pow_player,
               const struct specialist *target_specialist,
               const struct requirement_vector *reqs);
 
+
+bool can_see_techs_of_target(const struct player *pow_player,
+                             const struct player *target_player);
+
 #ifdef __cplusplus
 }
 #endif /* __cplusplus */
-- 
1.8.5.3

