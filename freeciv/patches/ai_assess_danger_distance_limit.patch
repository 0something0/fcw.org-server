diff --git a/ai/default/daimilitary.c b/ai/default/daimilitary.c
index fa00e7e..974a5f0 100644
--- a/ai/default/daimilitary.c
+++ b/ai/default/daimilitary.c
@@ -528,6 +528,9 @@ static unsigned int assess_danger(struct ai_type *ait, struct city *pcity)
     assess_turns = 6;
   } else {
     assess_turns = 3;
+#ifdef FREECIV_WEB
+    assess_turns = has_handicap(pplayer, H_ASSESS_DANGER_LIMITED) ? 2 : 3;
+#endif
   }
 
   omnimap = !has_handicap(pplayer, H_MAP);
@@ -552,6 +555,16 @@ static unsigned int assess_danger(struct ai_type *ait, struct city *pcity)
       struct unit_type *utype = unit_type_get(punit);
       struct unit_type_ai *utai = utype_ai_data(utype, ait);
 
+#ifdef FREECIV_WEB
+      int unit_distance = real_map_distance(ptile, unit_tile(punit));
+      if (unit_distance > ASSESS_DANGER_MAX_DISTANCE
+          || (has_handicap(pplayer, H_ASSESS_DANGER_LIMITED)
+              && unit_distance > AI_HANDICAP_DISTANCE_LIMIT)) {
+        /* Too far away. */
+        continue;
+      }
+#endif
+
       if (!utai->carries_occupiers
           && !utype_acts_hostile(utype)
           && (utype_has_flag(utype, UTYF_CIVILIAN)
diff --git a/ai/default/daimilitary.h b/ai/default/daimilitary.h
index a494aaa..2d7ed87 100644
--- a/ai/default/daimilitary.h
+++ b/ai/default/daimilitary.h
@@ -20,6 +20,11 @@
 /* server/advisors */
 #include "advchoice.h"
 
+#ifdef FREECIV_WEB
+#define ASSESS_DANGER_MAX_DISTANCE         40
+#define AI_HANDICAP_DISTANCE_LIMIT         6  //TODO: 20 for non-web
+#endif /* FREECIV_WEB */
+
 struct unit_type *dai_choose_defender_versus(struct city *pcity,
                                              struct unit *attacker);
 void military_advisor_choose_tech(struct player *pplayer,
diff --git a/ai/difficulty.c b/ai/difficulty.c
index 9b86b47..0c1deef 100644
--- a/ai/difficulty.c
+++ b/ai/difficulty.c
@@ -65,6 +65,9 @@ static bv_handicap handicap_of_skill_level(enum ai_level level)
      BV_SET(handicap, H_TARGETS);
      BV_SET(handicap, H_HUTS);
      BV_SET(handicap, H_REVOLUTION);
+#ifdef FREECIV_WEB
+     BV_SET(handicap, H_ASSESS_DANGER_LIMITED);
+#endif
      BV_SET(handicap, H_PRODCHGPEN);
      break;
    case AI_LEVEL_NOVICE:
@@ -82,6 +85,9 @@ static bv_handicap handicap_of_skill_level(enum ai_level level)
      BV_SET(handicap, H_DANGER);
      BV_SET(handicap, H_CEASEFIRE);
      BV_SET(handicap, H_NOBRIBE_WF);
+#ifdef FREECIV_WEB
+     BV_SET(handicap, H_ASSESS_DANGER_LIMITED);
+#endif
      BV_SET(handicap, H_PRODCHGPEN);
      break;
    case AI_LEVEL_EASY:
@@ -96,6 +102,9 @@ static bv_handicap handicap_of_skill_level(enum ai_level level)
      BV_SET(handicap, H_REVOLUTION);
      BV_SET(handicap, H_EXPANSION);
      BV_SET(handicap, H_CEASEFIRE);
+#ifdef FREECIV_WEB
+     BV_SET(handicap, H_ASSESS_DANGER_LIMITED);
+#endif
      BV_SET(handicap, H_NOBRIBE_WF);
      break;
    case AI_LEVEL_NORMAL:
diff --git a/ai/handicaps.c b/ai/handicaps.c
index e92b749..96df8a8 100644
--- a/ai/handicaps.c
+++ b/ai/handicaps.c
@@ -126,6 +126,10 @@ const char *handicap_desc(enum handicap_type htype, bool *inverted)
   case H_PRODCHGPEN:
     *inverted = TRUE;
     return _("Can change city production type without penalty.");
+#ifdef FREECIV_WEB
+  case H_ASSESS_DANGER_LIMITED:
+    return _("Limits the distance to search for threatening enemy units.");    
+#endif
   case H_LAST:
     break; /* fall through -- should never see this */
   }
diff --git a/ai/handicaps.h b/ai/handicaps.h
index fca4666..878d253 100644
--- a/ai/handicaps.h
+++ b/ai/handicaps.h
@@ -33,6 +33,9 @@ enum handicap_type {
   H_CEASEFIRE,
   H_NOBRIBE_WF,
   H_PRODCHGPEN,
+#ifdef FREECIV_WEB
+  H_ASSESS_DANGER_LIMITED,
+#endif
   H_LAST
 };
 
